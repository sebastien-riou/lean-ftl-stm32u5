
lean-ftl-u5a5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data_flash   0000a000  08200000  08200000  0000c000  2**13
                  CONTENTS, ALLOC, LOAD, DATA
  1 .isr_vector   00000250  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00007fe0  08000250  08000250  00001250  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000fc  08008230  08008230  00009230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    0000000c  0800832c  0800832c  0000932c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000098  08008338  08008338  00009338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .init_array   00000004  080083d0  080083d0  000093d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080083d4  080083d4  000093d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c0  20000000  080083d8  0000a000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  9 .bss          00000310  200002c0  08008698  0000a2c0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200005d0  08008698  0000a5d0  2**0
                  ALLOC
 11 .ARM.attributes 00000034  00000000  00000000  00016000  2**0
                  CONTENTS, READONLY
 12 .comment      00000039  00000000  00000000  00016034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001072a  00000000  00000000  0001606d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000238e  00000000  00000000  00026797  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e28  00000000  00000000  00028b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ad4  00000000  00000000  00029950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000351ee  00000000  00000000  0002a424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f030  00000000  00000000  0005f612  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0014b682  00000000  00000000  0006e642  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000039c4  00000000  00000000  001b9cc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  001bd688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <setjmp>:
 8000250:	46ec      	mov	ip, sp
 8000252:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000256:	ec80 8b10 	vstmia	r0, {d8-d15}
 800025a:	f04f 0000 	mov.w	r0, #0
 800025e:	4770      	bx	lr

08000260 <longjmp>:
 8000260:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000264:	46e5      	mov	sp, ip
 8000266:	ec90 8b10 	vldmia	r0, {d8-d15}
 800026a:	0008      	movs	r0, r1
 800026c:	bf08      	it	eq
 800026e:	2001      	moveq	r0, #1
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000284:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000288:	f000 b8e2 	b.w	8000450 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f006 fee0 	bl	8007058 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__restore_core_regs>:
 80002a4:	f100 0134 	add.w	r1, r0, #52	@ 0x34
 80002a8:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 80002ac:	469c      	mov	ip, r3
 80002ae:	46a6      	mov	lr, r4
 80002b0:	f84c 5d04 	str.w	r5, [ip, #-4]!
 80002b4:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 80002b8:	46e5      	mov	sp, ip
 80002ba:	bd00      	pop	{pc}

080002bc <__gnu_Unwind_Restore_VFP>:
 80002bc:	ec90 0b21 	fldmiax	r0, {d0-d15}	@ Deprecated
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop

080002c4 <__gnu_Unwind_Save_VFP>:
 80002c4:	ec80 0b21 	fstmiax	r0, {d0-d15}	@ Deprecated
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop

080002cc <__gnu_Unwind_Restore_VFP_D>:
 80002cc:	ec90 0b20 	vldmia	r0, {d0-d15}
 80002d0:	4770      	bx	lr
 80002d2:	bf00      	nop

080002d4 <__gnu_Unwind_Save_VFP_D>:
 80002d4:	ec80 0b20 	vstmia	r0, {d0-d15}
 80002d8:	4770      	bx	lr
 80002da:	bf00      	nop

080002dc <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 80002dc:	ecd0 0b20 	vldmia	r0, {d16-d31}
 80002e0:	4770      	bx	lr
 80002e2:	bf00      	nop

080002e4 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 80002e4:	ecc0 0b20 	vstmia	r0, {d16-d31}
 80002e8:	4770      	bx	lr
 80002ea:	bf00      	nop

080002ec <__gnu_Unwind_Restore_WMMXD>:
 80002ec:	ecf0 0102 			@ <UNDEFINED> instruction: 0xecf00102
 80002f0:	ecf0 1102 			@ <UNDEFINED> instruction: 0xecf01102
 80002f4:	ecf0 2102 			@ <UNDEFINED> instruction: 0xecf02102
 80002f8:	ecf0 3102 			@ <UNDEFINED> instruction: 0xecf03102
 80002fc:	ecf0 4102 			@ <UNDEFINED> instruction: 0xecf04102
 8000300:	ecf0 5102 			@ <UNDEFINED> instruction: 0xecf05102
 8000304:	ecf0 6102 			@ <UNDEFINED> instruction: 0xecf06102
 8000308:	ecf0 7102 			@ <UNDEFINED> instruction: 0xecf07102
 800030c:	ecf0 8102 			@ <UNDEFINED> instruction: 0xecf08102
 8000310:	ecf0 9102 			@ <UNDEFINED> instruction: 0xecf09102
 8000314:	ecf0 a102 			@ <UNDEFINED> instruction: 0xecf0a102
 8000318:	ecf0 b102 			@ <UNDEFINED> instruction: 0xecf0b102
 800031c:	ecf0 c102 			@ <UNDEFINED> instruction: 0xecf0c102
 8000320:	ecf0 d102 			@ <UNDEFINED> instruction: 0xecf0d102
 8000324:	ecf0 e102 			@ <UNDEFINED> instruction: 0xecf0e102
 8000328:	ecf0 f102 			@ <UNDEFINED> instruction: 0xecf0f102
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop

08000330 <__gnu_Unwind_Save_WMMXD>:
 8000330:	ece0 0102 			@ <UNDEFINED> instruction: 0xece00102
 8000334:	ece0 1102 			@ <UNDEFINED> instruction: 0xece01102
 8000338:	ece0 2102 			@ <UNDEFINED> instruction: 0xece02102
 800033c:	ece0 3102 			@ <UNDEFINED> instruction: 0xece03102
 8000340:	ece0 4102 			@ <UNDEFINED> instruction: 0xece04102
 8000344:	ece0 5102 			@ <UNDEFINED> instruction: 0xece05102
 8000348:	ece0 6102 			@ <UNDEFINED> instruction: 0xece06102
 800034c:	ece0 7102 			@ <UNDEFINED> instruction: 0xece07102
 8000350:	ece0 8102 			@ <UNDEFINED> instruction: 0xece08102
 8000354:	ece0 9102 			@ <UNDEFINED> instruction: 0xece09102
 8000358:	ece0 a102 			@ <UNDEFINED> instruction: 0xece0a102
 800035c:	ece0 b102 			@ <UNDEFINED> instruction: 0xece0b102
 8000360:	ece0 c102 			@ <UNDEFINED> instruction: 0xece0c102
 8000364:	ece0 d102 			@ <UNDEFINED> instruction: 0xece0d102
 8000368:	ece0 e102 			@ <UNDEFINED> instruction: 0xece0e102
 800036c:	ece0 f102 			@ <UNDEFINED> instruction: 0xece0f102
 8000370:	4770      	bx	lr
 8000372:	bf00      	nop

08000374 <__gnu_Unwind_Restore_WMMXC>:
 8000374:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8000378:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 800037c:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8000380:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8000384:	4770      	bx	lr
 8000386:	bf00      	nop

08000388 <__gnu_Unwind_Save_WMMXC>:
 8000388:	fca0 8101 	stc2	1, cr8, [r0], #4
 800038c:	fca0 9101 	stc2	1, cr9, [r0], #4
 8000390:	fca0 a101 	stc2	1, cr10, [r0], #4
 8000394:	fca0 b101 	stc2	1, cr11, [r0], #4
 8000398:	4770      	bx	lr
 800039a:	bf00      	nop

0800039c <_Unwind_RaiseException>:
 800039c:	46ec      	mov	ip, sp
 800039e:	b500      	push	{lr}
 80003a0:	e92d 5000 	stmdb	sp!, {ip, lr}
 80003a4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80003a8:	f04f 0300 	mov.w	r3, #0
 80003ac:	e92d 000c 	stmdb	sp!, {r2, r3}
 80003b0:	a901      	add	r1, sp, #4
 80003b2:	f007 f951 	bl	8007658 <__gnu_Unwind_RaiseException>
 80003b6:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 80003ba:	b012      	add	sp, #72	@ 0x48
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <_Unwind_Resume>:
 80003c0:	46ec      	mov	ip, sp
 80003c2:	b500      	push	{lr}
 80003c4:	e92d 5000 	stmdb	sp!, {ip, lr}
 80003c8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80003cc:	f04f 0300 	mov.w	r3, #0
 80003d0:	e92d 000c 	stmdb	sp!, {r2, r3}
 80003d4:	a901      	add	r1, sp, #4
 80003d6:	f007 f97f 	bl	80076d8 <__gnu_Unwind_Resume>
 80003da:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 80003de:	b012      	add	sp, #72	@ 0x48
 80003e0:	4770      	bx	lr
 80003e2:	bf00      	nop

080003e4 <_Unwind_Resume_or_Rethrow>:
 80003e4:	46ec      	mov	ip, sp
 80003e6:	b500      	push	{lr}
 80003e8:	e92d 5000 	stmdb	sp!, {ip, lr}
 80003ec:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80003f0:	f04f 0300 	mov.w	r3, #0
 80003f4:	e92d 000c 	stmdb	sp!, {r2, r3}
 80003f8:	a901      	add	r1, sp, #4
 80003fa:	f007 f98f 	bl	800771c <__gnu_Unwind_Resume_or_Rethrow>
 80003fe:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8000402:	b012      	add	sp, #72	@ 0x48
 8000404:	4770      	bx	lr
 8000406:	bf00      	nop

08000408 <_Unwind_ForcedUnwind>:
 8000408:	46ec      	mov	ip, sp
 800040a:	b500      	push	{lr}
 800040c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000410:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000414:	f04f 0300 	mov.w	r3, #0
 8000418:	e92d 000c 	stmdb	sp!, {r2, r3}
 800041c:	ab01      	add	r3, sp, #4
 800041e:	f007 f951 	bl	80076c4 <__gnu_Unwind_ForcedUnwind>
 8000422:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8000426:	b012      	add	sp, #72	@ 0x48
 8000428:	4770      	bx	lr
 800042a:	bf00      	nop

0800042c <_Unwind_Backtrace>:
 800042c:	46ec      	mov	ip, sp
 800042e:	b500      	push	{lr}
 8000430:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000434:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000438:	f04f 0300 	mov.w	r3, #0
 800043c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000440:	aa01      	add	r2, sp, #4
 8000442:	f007 f9c7 	bl	80077d4 <__gnu_Unwind_Backtrace>
 8000446:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 800044a:	b012      	add	sp, #72	@ 0x48
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop

08000450 <__aeabi_idiv0>:
 8000450:	4770      	bx	lr
 8000452:	bf00      	nop

08000454 <__do_global_dtors_aux>:
 8000454:	b510      	push	{r4, lr}
 8000456:	4c05      	ldr	r4, [pc, #20]	@ (800046c <__do_global_dtors_aux+0x18>)
 8000458:	7823      	ldrb	r3, [r4, #0]
 800045a:	b933      	cbnz	r3, 800046a <__do_global_dtors_aux+0x16>
 800045c:	4b04      	ldr	r3, [pc, #16]	@ (8000470 <__do_global_dtors_aux+0x1c>)
 800045e:	b113      	cbz	r3, 8000466 <__do_global_dtors_aux+0x12>
 8000460:	4804      	ldr	r0, [pc, #16]	@ (8000474 <__do_global_dtors_aux+0x20>)
 8000462:	f3af 8000 	nop.w
 8000466:	2301      	movs	r3, #1
 8000468:	7023      	strb	r3, [r4, #0]
 800046a:	bd10      	pop	{r4, pc}
 800046c:	200002c0 	.word	0x200002c0
 8000470:	00000000 	.word	0x00000000
 8000474:	08008204 	.word	0x08008204

08000478 <frame_dummy>:
 8000478:	b508      	push	{r3, lr}
 800047a:	4b03      	ldr	r3, [pc, #12]	@ (8000488 <frame_dummy+0x10>)
 800047c:	b11b      	cbz	r3, 8000486 <frame_dummy+0xe>
 800047e:	4903      	ldr	r1, [pc, #12]	@ (800048c <frame_dummy+0x14>)
 8000480:	4803      	ldr	r0, [pc, #12]	@ (8000490 <frame_dummy+0x18>)
 8000482:	f3af 8000 	nop.w
 8000486:	bd08      	pop	{r3, pc}
 8000488:	00000000 	.word	0x00000000
 800048c:	200002c4 	.word	0x200002c4
 8000490:	08008204 	.word	0x08008204

08000494 <led1>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#include <stdbool.h>
void led1(bool on){
 8000494:	b480      	push	{r7}
 8000496:	b083      	sub	sp, #12
 8000498:	af00      	add	r7, sp, #0
 800049a:	4603      	mov	r3, r0
 800049c:	71fb      	strb	r3, [r7, #7]
  if(on) WRITE_REG(LED1_GPIO_PORT->BSRR, LED1_PIN);
 800049e:	79fb      	ldrb	r3, [r7, #7]
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d003      	beq.n	80004ac <led1+0x18>
 80004a4:	4b06      	ldr	r3, [pc, #24]	@ (80004c0 <led1+0x2c>)
 80004a6:	2280      	movs	r2, #128	@ 0x80
 80004a8:	619a      	str	r2, [r3, #24]
  else WRITE_REG(LED1_GPIO_PORT->BRR, LED1_PIN);
}
 80004aa:	e002      	b.n	80004b2 <led1+0x1e>
  else WRITE_REG(LED1_GPIO_PORT->BRR, LED1_PIN);
 80004ac:	4b04      	ldr	r3, [pc, #16]	@ (80004c0 <led1+0x2c>)
 80004ae:	2280      	movs	r2, #128	@ 0x80
 80004b0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80004b2:	bf00      	nop
 80004b4:	370c      	adds	r7, #12
 80004b6:	46bd      	mov	sp, r7
 80004b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop
 80004c0:	42020800 	.word	0x42020800

080004c4 <button>:

bool button(){
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(BUTTON_USER_GPIO_PORT, BUTTON_USER_PIN);
 80004c8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004cc:	4805      	ldr	r0, [pc, #20]	@ (80004e4 <button+0x20>)
 80004ce:	f001 f9f1 	bl	80018b4 <HAL_GPIO_ReadPin>
 80004d2:	4603      	mov	r3, r0
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	bf14      	ite	ne
 80004d8:	2301      	movne	r3, #1
 80004da:	2300      	moveq	r3, #0
 80004dc:	b2db      	uxtb	r3, r3
}
 80004de:	4618      	mov	r0, r3
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	42020800 	.word	0x42020800

080004e8 <delay_ms>:

void delay_ms(unsigned int ms){
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 80004f0:	6878      	ldr	r0, [r7, #4]
 80004f2:	f000 fd1b 	bl	8000f2c <HAL_Delay>
}
 80004f6:	bf00      	nop
 80004f8:	3708      	adds	r7, #8
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
	...

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000504:	f000 fc4c 	bl	8000da0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000508:	f000 f834 	bl	8000574 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 800050c:	f000 f87b 	bl	8000606 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000510:	f000 f8b2 	bl	8000678 <MX_GPIO_Init>
  MX_ICACHE_Init();
 8000514:	f000 f89c 	bl	8000650 <MX_ICACHE_Init>
  MX_DCACHE1_Init();
 8000518:	f000 f884 	bl	8000624 <MX_DCACHE1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 800051c:	2000      	movs	r0, #0
 800051e:	f000 fa51 	bl	80009c4 <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 8000522:	2001      	movs	r0, #1
 8000524:	f000 fa4e 	bl	80009c4 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000528:	2002      	movs	r0, #2
 800052a:	f000 fa4b 	bl	80009c4 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 800052e:	2101      	movs	r1, #1
 8000530:	2000      	movs	r0, #0
 8000532:	f000 fad7 	bl	8000ae4 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000536:	4b0e      	ldr	r3, [pc, #56]	@ (8000570 <main+0x70>)
 8000538:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800053c:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 800053e:	4b0c      	ldr	r3, [pc, #48]	@ (8000570 <main+0x70>)
 8000540:	2200      	movs	r2, #0
 8000542:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000544:	4b0a      	ldr	r3, [pc, #40]	@ (8000570 <main+0x70>)
 8000546:	2200      	movs	r2, #0
 8000548:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 800054a:	4b09      	ldr	r3, [pc, #36]	@ (8000570 <main+0x70>)
 800054c:	2200      	movs	r2, #0
 800054e:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000550:	4b07      	ldr	r3, [pc, #28]	@ (8000570 <main+0x70>)
 8000552:	2200      	movs	r2, #0
 8000554:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000556:	4906      	ldr	r1, [pc, #24]	@ (8000570 <main+0x70>)
 8000558:	2000      	movs	r0, #0
 800055a:	f000 fb5d 	bl	8000c18 <BSP_COM_Init>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <main+0x68>
  {
    Error_Handler();
 8000564:	f000 f930 	bl	80007c8 <Error_Handler>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    test_main();
 8000568:	f005 fdca 	bl	8006100 <test_main>
 800056c:	e7fc      	b.n	8000568 <main+0x68>
 800056e:	bf00      	nop
 8000570:	200002dc 	.word	0x200002dc

08000574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b09e      	sub	sp, #120	@ 0x78
 8000578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057a:	f107 0318 	add.w	r3, r7, #24
 800057e:	2260      	movs	r2, #96	@ 0x60
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f006 fd28 	bl	8006fd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000588:	463b      	mov	r3, r7
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	605a      	str	r2, [r3, #4]
 8000590:	609a      	str	r2, [r3, #8]
 8000592:	60da      	str	r2, [r3, #12]
 8000594:	611a      	str	r2, [r3, #16]
 8000596:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 8000598:	2000      	movs	r0, #0
 800059a:	f001 f9eb 	bl	8001974 <HAL_PWREx_ControlVoltageScaling>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005a4:	f000 f910 	bl	80007c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005a8:	2310      	movs	r3, #16
 80005aa:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005ac:	2301      	movs	r3, #1
 80005ae:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80005b0:	2310      	movs	r3, #16
 80005b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 80005b4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005ba:	2300      	movs	r3, #0
 80005bc:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005be:	f107 0318 	add.w	r3, r7, #24
 80005c2:	4618      	mov	r0, r3
 80005c4:	f001 fad2 	bl	8001b6c <HAL_RCC_OscConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80005ce:	f000 f8fb 	bl	80007c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d2:	231f      	movs	r3, #31
 80005d4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80005d6:	2300      	movs	r3, #0
 80005d8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005da:	2300      	movs	r3, #0
 80005dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005ea:	463b      	mov	r3, r7
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f002 f998 	bl	8002924 <HAL_RCC_ClockConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80005fa:	f000 f8e5 	bl	80007c8 <Error_Handler>
  }
}
 80005fe:	bf00      	nop
 8000600:	3778      	adds	r7, #120	@ 0x78
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}

08000606 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000606:	b580      	push	{r7, lr}
 8000608:	af00      	add	r7, sp, #0

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 800060a:	f001 fa9f 	bl	8001b4c <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 800060e:	2002      	movs	r0, #2
 8000610:	f001 fa3c 	bl	8001a8c <HAL_PWREx_ConfigSupply>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <SystemPower_Config+0x18>
  {
    Error_Handler();
 800061a:	f000 f8d5 	bl	80007c8 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}
	...

08000624 <MX_DCACHE1_Init>:
  * @brief DCACHE1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCACHE1_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END DCACHE1_Init 0 */

  /* USER CODE BEGIN DCACHE1_Init 1 */

  /* USER CODE END DCACHE1_Init 1 */
  hdcache1.Instance = DCACHE1;
 8000628:	4b07      	ldr	r3, [pc, #28]	@ (8000648 <MX_DCACHE1_Init+0x24>)
 800062a:	4a08      	ldr	r2, [pc, #32]	@ (800064c <MX_DCACHE1_Init+0x28>)
 800062c:	601a      	str	r2, [r3, #0]
  hdcache1.Init.ReadBurstType = DCACHE_READ_BURST_WRAP;
 800062e:	4b06      	ldr	r3, [pc, #24]	@ (8000648 <MX_DCACHE1_Init+0x24>)
 8000630:	2200      	movs	r2, #0
 8000632:	605a      	str	r2, [r3, #4]
  if (HAL_DCACHE_Init(&hdcache1) != HAL_OK)
 8000634:	4804      	ldr	r0, [pc, #16]	@ (8000648 <MX_DCACHE1_Init+0x24>)
 8000636:	f000 fe31 	bl	800129c <HAL_DCACHE_Init>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_DCACHE1_Init+0x20>
  {
    Error_Handler();
 8000640:	f000 f8c2 	bl	80007c8 <Error_Handler>
  }
  /* USER CODE BEGIN DCACHE1_Init 2 */

  /* USER CODE END DCACHE1_Init 2 */

}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}
 8000648:	200002ec 	.word	0x200002ec
 800064c:	40031400 	.word	0x40031400

08000650 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000654:	2000      	movs	r0, #0
 8000656:	f001 f95d 	bl	8001914 <HAL_ICACHE_ConfigAssociativityMode>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000660:	f000 f8b2 	bl	80007c8 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000664:	f001 f976 	bl	8001954 <HAL_ICACHE_Enable>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800066e:	f000 f8ab 	bl	80007c8 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}
	...

08000678 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b08a      	sub	sp, #40	@ 0x28
 800067c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067e:	f107 0314 	add.w	r3, r7, #20
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
 800068c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068e:	4b4a      	ldr	r3, [pc, #296]	@ (80007b8 <MX_GPIO_Init+0x140>)
 8000690:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000694:	4a48      	ldr	r2, [pc, #288]	@ (80007b8 <MX_GPIO_Init+0x140>)
 8000696:	f043 0304 	orr.w	r3, r3, #4
 800069a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800069e:	4b46      	ldr	r3, [pc, #280]	@ (80007b8 <MX_GPIO_Init+0x140>)
 80006a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006a4:	f003 0304 	and.w	r3, r3, #4
 80006a8:	613b      	str	r3, [r7, #16]
 80006aa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ac:	4b42      	ldr	r3, [pc, #264]	@ (80007b8 <MX_GPIO_Init+0x140>)
 80006ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006b2:	4a41      	ldr	r2, [pc, #260]	@ (80007b8 <MX_GPIO_Init+0x140>)
 80006b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006b8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80006bc:	4b3e      	ldr	r3, [pc, #248]	@ (80007b8 <MX_GPIO_Init+0x140>)
 80006be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ca:	4b3b      	ldr	r3, [pc, #236]	@ (80007b8 <MX_GPIO_Init+0x140>)
 80006cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006d0:	4a39      	ldr	r2, [pc, #228]	@ (80007b8 <MX_GPIO_Init+0x140>)
 80006d2:	f043 0302 	orr.w	r3, r3, #2
 80006d6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80006da:	4b37      	ldr	r3, [pc, #220]	@ (80007b8 <MX_GPIO_Init+0x140>)
 80006dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006e0:	f003 0302 	and.w	r3, r3, #2
 80006e4:	60bb      	str	r3, [r7, #8]
 80006e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e8:	4b33      	ldr	r3, [pc, #204]	@ (80007b8 <MX_GPIO_Init+0x140>)
 80006ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006ee:	4a32      	ldr	r2, [pc, #200]	@ (80007b8 <MX_GPIO_Init+0x140>)
 80006f0:	f043 0301 	orr.w	r3, r3, #1
 80006f4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80006f8:	4b2f      	ldr	r3, [pc, #188]	@ (80007b8 <MX_GPIO_Init+0x140>)
 80006fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006fe:	f003 0301 	and.w	r3, r3, #1
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UCPD_DBn_GPIO_Port, UCPD_DBn_Pin, GPIO_PIN_RESET);
 8000706:	2200      	movs	r2, #0
 8000708:	2120      	movs	r1, #32
 800070a:	482c      	ldr	r0, [pc, #176]	@ (80007bc <MX_GPIO_Init+0x144>)
 800070c:	f001 f8ea 	bl	80018e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8000710:	2304      	movs	r3, #4
 8000712:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000714:	2303      	movs	r3, #3
 8000716:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	2300      	movs	r3, #0
 800071a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 800071c:	f107 0314 	add.w	r3, r7, #20
 8000720:	4619      	mov	r1, r3
 8000722:	4827      	ldr	r0, [pc, #156]	@ (80007c0 <MX_GPIO_Init+0x148>)
 8000724:	f000 feee 	bl	8001504 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000728:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800072c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800072e:	2300      	movs	r3, #0
 8000730:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000732:	2300      	movs	r3, #0
 8000734:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000736:	f107 0314 	add.w	r3, r7, #20
 800073a:	4619      	mov	r1, r3
 800073c:	481f      	ldr	r0, [pc, #124]	@ (80007bc <MX_GPIO_Init+0x144>)
 800073e:	f000 fee1 	bl	8001504 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000742:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000746:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000748:	2303      	movs	r3, #3
 800074a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	2300      	movs	r3, #0
 800074e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000750:	f107 0314 	add.w	r3, r7, #20
 8000754:	4619      	mov	r1, r3
 8000756:	4819      	ldr	r0, [pc, #100]	@ (80007bc <MX_GPIO_Init+0x144>)
 8000758:	f000 fed4 	bl	8001504 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800075c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000760:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000762:	2302      	movs	r3, #2
 8000764:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076a:	2300      	movs	r3, #0
 800076c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076e:	f107 0314 	add.w	r3, r7, #20
 8000772:	4619      	mov	r1, r3
 8000774:	4813      	ldr	r0, [pc, #76]	@ (80007c4 <MX_GPIO_Init+0x14c>)
 8000776:	f000 fec5 	bl	8001504 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800077a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800077e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000780:	2303      	movs	r3, #3
 8000782:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000788:	f107 0314 	add.w	r3, r7, #20
 800078c:	4619      	mov	r1, r3
 800078e:	480d      	ldr	r0, [pc, #52]	@ (80007c4 <MX_GPIO_Init+0x14c>)
 8000790:	f000 feb8 	bl	8001504 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_DBn_Pin */
  GPIO_InitStruct.Pin = UCPD_DBn_Pin;
 8000794:	2320      	movs	r3, #32
 8000796:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000798:	2301      	movs	r3, #1
 800079a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	2300      	movs	r3, #0
 800079e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a0:	2300      	movs	r3, #0
 80007a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(UCPD_DBn_GPIO_Port, &GPIO_InitStruct);
 80007a4:	f107 0314 	add.w	r3, r7, #20
 80007a8:	4619      	mov	r1, r3
 80007aa:	4804      	ldr	r0, [pc, #16]	@ (80007bc <MX_GPIO_Init+0x144>)
 80007ac:	f000 feaa 	bl	8001504 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007b0:	bf00      	nop
 80007b2:	3728      	adds	r7, #40	@ 0x28
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	46020c00 	.word	0x46020c00
 80007bc:	42020400 	.word	0x42020400
 80007c0:	42020800 	.word	0x42020800
 80007c4:	42020000 	.word	0x42020000

080007c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007cc:	b672      	cpsid	i
}
 80007ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d0:	bf00      	nop
 80007d2:	e7fd      	b.n	80007d0 <Error_Handler+0x8>

080007d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80007da:	4b0a      	ldr	r3, [pc, #40]	@ (8000804 <HAL_MspInit+0x30>)
 80007dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80007e0:	4a08      	ldr	r2, [pc, #32]	@ (8000804 <HAL_MspInit+0x30>)
 80007e2:	f043 0304 	orr.w	r3, r3, #4
 80007e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80007ea:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <HAL_MspInit+0x30>)
 80007ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80007f0:	f003 0304 	and.w	r3, r3, #4
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007f8:	bf00      	nop
 80007fa:	370c      	adds	r7, #12
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr
 8000804:	46020c00 	.word	0x46020c00

08000808 <HAL_DCACHE_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcache: DCACHE handle pointer
* @retval None
*/
void HAL_DCACHE_MspInit(DCACHE_HandleTypeDef* hdcache)
{
 8000808:	b480      	push	{r7}
 800080a:	b085      	sub	sp, #20
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  if(hdcache->Instance==DCACHE1)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a0b      	ldr	r2, [pc, #44]	@ (8000844 <HAL_DCACHE_MspInit+0x3c>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d10e      	bne.n	8000838 <HAL_DCACHE_MspInit+0x30>
  {
  /* USER CODE BEGIN DCACHE1_MspInit 0 */

  /* USER CODE END DCACHE1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCACHE1_CLK_ENABLE();
 800081a:	4b0b      	ldr	r3, [pc, #44]	@ (8000848 <HAL_DCACHE_MspInit+0x40>)
 800081c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000820:	4a09      	ldr	r2, [pc, #36]	@ (8000848 <HAL_DCACHE_MspInit+0x40>)
 8000822:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000826:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800082a:	4b07      	ldr	r3, [pc, #28]	@ (8000848 <HAL_DCACHE_MspInit+0x40>)
 800082c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000830:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DCACHE1_MspInit 1 */

  /* USER CODE END DCACHE1_MspInit 1 */
  }

}
 8000838:	bf00      	nop
 800083a:	3714      	adds	r7, #20
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	40031400 	.word	0x40031400
 8000848:	46020c00 	.word	0x46020c00

0800084c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000850:	bf00      	nop
 8000852:	e7fd      	b.n	8000850 <NMI_Handler+0x4>

08000854 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000858:	bf00      	nop
 800085a:	e7fd      	b.n	8000858 <HardFault_Handler+0x4>

0800085c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000860:	bf00      	nop
 8000862:	e7fd      	b.n	8000860 <MemManage_Handler+0x4>

08000864 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000868:	bf00      	nop
 800086a:	e7fd      	b.n	8000868 <BusFault_Handler+0x4>

0800086c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000870:	bf00      	nop
 8000872:	e7fd      	b.n	8000870 <UsageFault_Handler+0x4>

08000874 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr

08000882 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000886:	bf00      	nop
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr

08000890 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000894:	bf00      	nop
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr

0800089e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800089e:	b580      	push	{r7, lr}
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008a2:	f000 fb23 	bl	8000eec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}

080008aa <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 80008ae:	2000      	movs	r0, #0
 80008b0:	f000 f990 	bl	8000bd4 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <_getpid>:
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	2301      	movs	r3, #1
 80008be:	4618      	mov	r0, r3
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr

080008c8 <_kill>:
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
 80008d0:	6039      	str	r1, [r7, #0]
 80008d2:	f006 fb89 	bl	8006fe8 <__errno>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2216      	movs	r2, #22
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80008e0:	4618      	mov	r0, r3
 80008e2:	3708      	adds	r7, #8
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <_exit>:
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80008f4:	6878      	ldr	r0, [r7, #4]
 80008f6:	f7ff ffe7 	bl	80008c8 <_kill>
 80008fa:	bf00      	nop
 80008fc:	e7fd      	b.n	80008fa <_exit+0x12>
	...

08000900 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000904:	4b18      	ldr	r3, [pc, #96]	@ (8000968 <SystemInit+0x68>)
 8000906:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800090a:	4a17      	ldr	r2, [pc, #92]	@ (8000968 <SystemInit+0x68>)
 800090c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000910:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8000914:	4b15      	ldr	r3, [pc, #84]	@ (800096c <SystemInit+0x6c>)
 8000916:	2201      	movs	r2, #1
 8000918:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800091a:	4b14      	ldr	r3, [pc, #80]	@ (800096c <SystemInit+0x6c>)
 800091c:	2200      	movs	r2, #0
 800091e:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000920:	4b12      	ldr	r3, [pc, #72]	@ (800096c <SystemInit+0x6c>)
 8000922:	2200      	movs	r2, #0
 8000924:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8000926:	4b11      	ldr	r3, [pc, #68]	@ (800096c <SystemInit+0x6c>)
 8000928:	2200      	movs	r2, #0
 800092a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 800092c:	4b0f      	ldr	r3, [pc, #60]	@ (800096c <SystemInit+0x6c>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a0e      	ldr	r2, [pc, #56]	@ (800096c <SystemInit+0x6c>)
 8000932:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8000936:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 800093a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 800093c:	4b0b      	ldr	r3, [pc, #44]	@ (800096c <SystemInit+0x6c>)
 800093e:	2200      	movs	r2, #0
 8000940:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000942:	4b0a      	ldr	r3, [pc, #40]	@ (800096c <SystemInit+0x6c>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4a09      	ldr	r2, [pc, #36]	@ (800096c <SystemInit+0x6c>)
 8000948:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800094c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800094e:	4b07      	ldr	r3, [pc, #28]	@ (800096c <SystemInit+0x6c>)
 8000950:	2200      	movs	r2, #0
 8000952:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000954:	4b04      	ldr	r3, [pc, #16]	@ (8000968 <SystemInit+0x68>)
 8000956:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800095a:	609a      	str	r2, [r3, #8]
  #endif
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	e000ed00 	.word	0xe000ed00
 800096c:	46020c00 	.word	0x46020c00

08000970 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000970:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009a8 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000974:	f7ff ffc4 	bl	8000900 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000978:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800097a:	e003      	b.n	8000984 <LoopCopyDataInit>

0800097c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800097c:	4b0b      	ldr	r3, [pc, #44]	@ (80009ac <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800097e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000980:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000982:	3104      	adds	r1, #4

08000984 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000984:	480a      	ldr	r0, [pc, #40]	@ (80009b0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000986:	4b0b      	ldr	r3, [pc, #44]	@ (80009b4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000988:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800098a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800098c:	d3f6      	bcc.n	800097c <CopyDataInit>
	ldr	r2, =_sbss
 800098e:	4a0a      	ldr	r2, [pc, #40]	@ (80009b8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000990:	e002      	b.n	8000998 <LoopFillZerobss>

08000992 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000992:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000994:	f842 3b04 	str.w	r3, [r2], #4

08000998 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000998:	4b08      	ldr	r3, [pc, #32]	@ (80009bc <LoopForever+0x16>)
	cmp	r2, r3
 800099a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800099c:	d3f9      	bcc.n	8000992 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800099e:	f006 fb29 	bl	8006ff4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009a2:	f7ff fdad 	bl	8000500 <main>

080009a6 <LoopForever>:

LoopForever:
    b LoopForever
 80009a6:	e7fe      	b.n	80009a6 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80009a8:	20270000 	.word	0x20270000
	ldr	r3, =_sidata
 80009ac:	080083d8 	.word	0x080083d8
	ldr	r0, =_sdata
 80009b0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80009b4:	200002c0 	.word	0x200002c0
	ldr	r2, =_sbss
 80009b8:	200002c0 	.word	0x200002c0
	ldr	r3, = _ebss
 80009bc:	200005d0 	.word	0x200005d0

080009c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009c0:	e7fe      	b.n	80009c0 <ADC1_2_IRQHandler>
	...

080009c4 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b08e      	sub	sp, #56	@ 0x38
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80009ce:	2300      	movs	r3, #0
 80009d0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitTypeDef  gpio_init_structure;
#if defined (USE_NUCLEO_144)
  uint32_t pwrenabled = 0U;
 80009d2:	2300      	movs	r3, #0
 80009d4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif /* USE_NUCLEO_144 */

  if ((Led != LED2)
 80009d6:	79fb      	ldrb	r3, [r7, #7]
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d009      	beq.n	80009f0 <BSP_LED_Init+0x2c>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 80009dc:	79fb      	ldrb	r3, [r7, #7]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d006      	beq.n	80009f0 <BSP_LED_Init+0x2c>
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	2b02      	cmp	r3, #2
 80009e6:	d003      	beq.n	80009f0 <BSP_LED_Init+0x2c>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80009e8:	f06f 0301 	mvn.w	r3, #1
 80009ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80009ee:	e06e      	b.n	8000ace <BSP_LED_Init+0x10a>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 80009f0:	79fb      	ldrb	r3, [r7, #7]
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d10f      	bne.n	8000a16 <BSP_LED_Init+0x52>
    {
      LED2_GPIO_CLK_ENABLE();
 80009f6:	4b38      	ldr	r3, [pc, #224]	@ (8000ad8 <BSP_LED_Init+0x114>)
 80009f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009fc:	4a36      	ldr	r2, [pc, #216]	@ (8000ad8 <BSP_LED_Init+0x114>)
 80009fe:	f043 0302 	orr.w	r3, r3, #2
 8000a02:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000a06:	4b34      	ldr	r3, [pc, #208]	@ (8000ad8 <BSP_LED_Init+0x114>)
 8000a08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a0c:	f003 0302 	and.w	r3, r3, #2
 8000a10:	61bb      	str	r3, [r7, #24]
 8000a12:	69bb      	ldr	r3, [r7, #24]
 8000a14:	e046      	b.n	8000aa4 <BSP_LED_Init+0xe0>
    }
#if defined (USE_NUCLEO_144)
    else if (Led == LED1)
 8000a16:	79fb      	ldrb	r3, [r7, #7]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d10f      	bne.n	8000a3c <BSP_LED_Init+0x78>
    {
      LED1_GPIO_CLK_ENABLE();
 8000a1c:	4b2e      	ldr	r3, [pc, #184]	@ (8000ad8 <BSP_LED_Init+0x114>)
 8000a1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a22:	4a2d      	ldr	r2, [pc, #180]	@ (8000ad8 <BSP_LED_Init+0x114>)
 8000a24:	f043 0304 	orr.w	r3, r3, #4
 8000a28:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000a2c:	4b2a      	ldr	r3, [pc, #168]	@ (8000ad8 <BSP_LED_Init+0x114>)
 8000a2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a32:	f003 0304 	and.w	r3, r3, #4
 8000a36:	617b      	str	r3, [r7, #20]
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	e033      	b.n	8000aa4 <BSP_LED_Init+0xe0>
    }
    else /* Led == Led3 */
    {
      /* Enable VddIO2 for Led3 */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a3c:	4b26      	ldr	r3, [pc, #152]	@ (8000ad8 <BSP_LED_Init+0x114>)
 8000a3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000a42:	f003 0304 	and.w	r3, r3, #4
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d110      	bne.n	8000a6c <BSP_LED_Init+0xa8>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8000a4a:	4b23      	ldr	r3, [pc, #140]	@ (8000ad8 <BSP_LED_Init+0x114>)
 8000a4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000a50:	4a21      	ldr	r2, [pc, #132]	@ (8000ad8 <BSP_LED_Init+0x114>)
 8000a52:	f043 0304 	orr.w	r3, r3, #4
 8000a56:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000a5a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ad8 <BSP_LED_Init+0x114>)
 8000a5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000a60:	f003 0304 	and.w	r3, r3, #4
 8000a64:	613b      	str	r3, [r7, #16]
 8000a66:	693b      	ldr	r3, [r7, #16]
        pwrenabled = 1U;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      HAL_PWREx_EnableVddIO2();
 8000a6c:	f001 f85e 	bl	8001b2c <HAL_PWREx_EnableVddIO2>

      if (pwrenabled == 1U)
 8000a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a72:	2b01      	cmp	r3, #1
 8000a74:	d107      	bne.n	8000a86 <BSP_LED_Init+0xc2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8000a76:	4b18      	ldr	r3, [pc, #96]	@ (8000ad8 <BSP_LED_Init+0x114>)
 8000a78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000a7c:	4a16      	ldr	r2, [pc, #88]	@ (8000ad8 <BSP_LED_Init+0x114>)
 8000a7e:	f023 0304 	bic.w	r3, r3, #4
 8000a82:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      LED3_GPIO_CLK_ENABLE();
 8000a86:	4b14      	ldr	r3, [pc, #80]	@ (8000ad8 <BSP_LED_Init+0x114>)
 8000a88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a8c:	4a12      	ldr	r2, [pc, #72]	@ (8000ad8 <BSP_LED_Init+0x114>)
 8000a8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a92:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000a96:	4b10      	ldr	r3, [pc, #64]	@ (8000ad8 <BSP_LED_Init+0x114>)
 8000a98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	68fb      	ldr	r3, [r7, #12]
    }
#endif /* defined (USE_NUCLEO_144) */
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
 8000aa6:	4a0d      	ldr	r2, [pc, #52]	@ (8000adc <BSP_LED_Init+0x118>)
 8000aa8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000aac:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab6:	2303      	movs	r3, #3
 8000ab8:	62bb      	str	r3, [r7, #40]	@ 0x28

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	4a08      	ldr	r2, [pc, #32]	@ (8000ae0 <BSP_LED_Init+0x11c>)
 8000abe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ac2:	f107 021c 	add.w	r2, r7, #28
 8000ac6:	4611      	mov	r1, r2
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f000 fd1b 	bl	8001504 <HAL_GPIO_Init>
  }

  return ret;
 8000ace:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	3738      	adds	r7, #56	@ 0x38
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	46020c00 	.word	0x46020c00
 8000adc:	08008288 	.word	0x08008288
 8000ae0:	20000070 	.word	0x20000070

08000ae4 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b088      	sub	sp, #32
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	460a      	mov	r2, r1
 8000aee:	71fb      	strb	r3, [r7, #7]
 8000af0:	4613      	mov	r3, r2
 8000af2:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8000af4:	4b30      	ldr	r3, [pc, #192]	@ (8000bb8 <BSP_PB_Init+0xd4>)
 8000af6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000afa:	4a2f      	ldr	r2, [pc, #188]	@ (8000bb8 <BSP_PB_Init+0xd4>)
 8000afc:	f043 0304 	orr.w	r3, r3, #4
 8000b00:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b04:	4b2c      	ldr	r3, [pc, #176]	@ (8000bb8 <BSP_PB_Init+0xd4>)
 8000b06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b0a:	f003 0304 	and.w	r3, r3, #4
 8000b0e:	60bb      	str	r3, [r7, #8]
 8000b10:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8000b12:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b16:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8000b20:	79bb      	ldrb	r3, [r7, #6]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d10c      	bne.n	8000b40 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000b26:	2300      	movs	r3, #0
 8000b28:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	4a23      	ldr	r2, [pc, #140]	@ (8000bbc <BSP_PB_Init+0xd8>)
 8000b2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b32:	f107 020c 	add.w	r2, r7, #12
 8000b36:	4611      	mov	r1, r2
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f000 fce3 	bl	8001504 <HAL_GPIO_Init>
 8000b3e:	e036      	b.n	8000bae <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000b40:	4b1f      	ldr	r3, [pc, #124]	@ (8000bc0 <BSP_PB_Init+0xdc>)
 8000b42:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000b44:	79fb      	ldrb	r3, [r7, #7]
 8000b46:	4a1d      	ldr	r2, [pc, #116]	@ (8000bbc <BSP_PB_Init+0xd8>)
 8000b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b4c:	f107 020c 	add.w	r2, r7, #12
 8000b50:	4611      	mov	r1, r2
 8000b52:	4618      	mov	r0, r3
 8000b54:	f000 fcd6 	bl	8001504 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000b58:	79fa      	ldrb	r2, [r7, #7]
 8000b5a:	4613      	mov	r3, r2
 8000b5c:	005b      	lsls	r3, r3, #1
 8000b5e:	4413      	add	r3, r2
 8000b60:	009b      	lsls	r3, r3, #2
 8000b62:	4a18      	ldr	r2, [pc, #96]	@ (8000bc4 <BSP_PB_Init+0xe0>)
 8000b64:	441a      	add	r2, r3
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	4917      	ldr	r1, [pc, #92]	@ (8000bc8 <BSP_PB_Init+0xe4>)
 8000b6a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4610      	mov	r0, r2
 8000b72:	f000 fc6a 	bl	800144a <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8000b76:	79fa      	ldrb	r2, [r7, #7]
 8000b78:	4613      	mov	r3, r2
 8000b7a:	005b      	lsls	r3, r3, #1
 8000b7c:	4413      	add	r3, r2
 8000b7e:	009b      	lsls	r3, r3, #2
 8000b80:	4a10      	ldr	r2, [pc, #64]	@ (8000bc4 <BSP_PB_Init+0xe0>)
 8000b82:	1898      	adds	r0, r3, r2
 8000b84:	79fb      	ldrb	r3, [r7, #7]
 8000b86:	4a11      	ldr	r2, [pc, #68]	@ (8000bcc <BSP_PB_Init+0xe8>)
 8000b88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	2100      	movs	r1, #0
 8000b90:	f000 fc2f 	bl	80013f2 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000b94:	2018      	movs	r0, #24
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	4a0d      	ldr	r2, [pc, #52]	@ (8000bd0 <BSP_PB_Init+0xec>)
 8000b9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	f000 fa9f 	bl	80010e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000ba6:	2318      	movs	r3, #24
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f000 fab5 	bl	8001118 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8000bae:	2300      	movs	r3, #0
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3720      	adds	r7, #32
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	46020c00 	.word	0x46020c00
 8000bbc:	2000007c 	.word	0x2000007c
 8000bc0:	10110000 	.word	0x10110000
 8000bc4:	20000318 	.word	0x20000318
 8000bc8:	08008290 	.word	0x08008290
 8000bcc:	20000080 	.word	0x20000080
 8000bd0:	20000084 	.word	0x20000084

08000bd4 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8000bde:	79fa      	ldrb	r2, [r7, #7]
 8000be0:	4613      	mov	r3, r2
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	4413      	add	r3, r2
 8000be6:	009b      	lsls	r3, r3, #2
 8000be8:	4a04      	ldr	r2, [pc, #16]	@ (8000bfc <BSP_PB_IRQHandler+0x28>)
 8000bea:	4413      	add	r3, r2
 8000bec:	4618      	mov	r0, r3
 8000bee:	f000 fc41 	bl	8001474 <HAL_EXTI_IRQHandler>
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	20000318 	.word	0x20000318

08000c00 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8000c0a:	bf00      	nop
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
	...

08000c18 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	6039      	str	r1, [r7, #0]
 8000c22:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000c24:	2300      	movs	r3, #0
 8000c26:	60fb      	str	r3, [r7, #12]

  if (COM >= COMn)
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d003      	beq.n	8000c36 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000c2e:	f06f 0301 	mvn.w	r3, #1
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	e018      	b.n	8000c68 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8000c36:	79fb      	ldrb	r3, [r7, #7]
 8000c38:	2294      	movs	r2, #148	@ 0x94
 8000c3a:	fb02 f303 	mul.w	r3, r2, r3
 8000c3e:	4a0d      	ldr	r2, [pc, #52]	@ (8000c74 <BSP_COM_Init+0x5c>)
 8000c40:	4413      	add	r3, r2
 8000c42:	4618      	mov	r0, r3
 8000c44:	f000 f854 	bl	8000cf0 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	2294      	movs	r2, #148	@ 0x94
 8000c4c:	fb02 f303 	mul.w	r3, r2, r3
 8000c50:	4a08      	ldr	r2, [pc, #32]	@ (8000c74 <BSP_COM_Init+0x5c>)
 8000c52:	4413      	add	r3, r2
 8000c54:	6839      	ldr	r1, [r7, #0]
 8000c56:	4618      	mov	r0, r3
 8000c58:	f000 f80e 	bl	8000c78 <MX_USART1_Init>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d002      	beq.n	8000c68 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000c62:	f06f 0303 	mvn.w	r3, #3
 8000c66:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000c68:	68fb      	ldr	r3, [r7, #12]
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3710      	adds	r7, #16
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20000324 	.word	0x20000324

08000c78 <MX_USART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 8000c82:	4b16      	ldr	r3, [pc, #88]	@ (8000cdc <MX_USART1_Init+0x64>)
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	220c      	movs	r2, #12
 8000c96:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	895b      	ldrh	r3, [r3, #10]
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	685a      	ldr	r2, [r3, #4]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	891b      	ldrh	r3, [r3, #8]
 8000cae:	461a      	mov	r2, r3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	899b      	ldrh	r3, [r3, #12]
 8000cb8:	461a      	mov	r2, r3
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000cc4:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2200      	movs	r2, #0
 8000cca:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 8000ccc:	6878      	ldr	r0, [r7, #4]
 8000cce:	f004 f973 	bl	8004fb8 <HAL_UART_Init>
 8000cd2:	4603      	mov	r3, r0
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	2000006c 	.word	0x2000006c

08000ce0 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8000ce4:	2000      	movs	r0, #0
 8000ce6:	f7ff ff8b 	bl	8000c00 <BSP_PB_Callback>
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
	...

08000cf0 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08a      	sub	sp, #40	@ 0x28
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8000cf8:	4b27      	ldr	r3, [pc, #156]	@ (8000d98 <COM1_MspInit+0xa8>)
 8000cfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cfe:	4a26      	ldr	r2, [pc, #152]	@ (8000d98 <COM1_MspInit+0xa8>)
 8000d00:	f043 0301 	orr.w	r3, r3, #1
 8000d04:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d08:	4b23      	ldr	r3, [pc, #140]	@ (8000d98 <COM1_MspInit+0xa8>)
 8000d0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	613b      	str	r3, [r7, #16]
 8000d14:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8000d16:	4b20      	ldr	r3, [pc, #128]	@ (8000d98 <COM1_MspInit+0xa8>)
 8000d18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d1c:	4a1e      	ldr	r2, [pc, #120]	@ (8000d98 <COM1_MspInit+0xa8>)
 8000d1e:	f043 0301 	orr.w	r3, r3, #1
 8000d22:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d26:	4b1c      	ldr	r3, [pc, #112]	@ (8000d98 <COM1_MspInit+0xa8>)
 8000d28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d2c:	f003 0301 	and.w	r3, r3, #1
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8000d34:	4b18      	ldr	r3, [pc, #96]	@ (8000d98 <COM1_MspInit+0xa8>)
 8000d36:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000d3a:	4a17      	ldr	r2, [pc, #92]	@ (8000d98 <COM1_MspInit+0xa8>)
 8000d3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d40:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000d44:	4b14      	ldr	r3, [pc, #80]	@ (8000d98 <COM1_MspInit+0xa8>)
 8000d46:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000d4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d4e:	60bb      	str	r3, [r7, #8]
 8000d50:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8000d52:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d56:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8000d60:	2301      	movs	r3, #1
 8000d62:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8000d64:	2307      	movs	r3, #7
 8000d66:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8000d68:	f107 0314 	add.w	r3, r7, #20
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	480b      	ldr	r0, [pc, #44]	@ (8000d9c <COM1_MspInit+0xac>)
 8000d70:	f000 fbc8 	bl	8001504 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 8000d74:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d78:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8000d7e:	2307      	movs	r3, #7
 8000d80:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8000d82:	f107 0314 	add.w	r3, r7, #20
 8000d86:	4619      	mov	r1, r3
 8000d88:	4804      	ldr	r0, [pc, #16]	@ (8000d9c <COM1_MspInit+0xac>)
 8000d8a:	f000 fbbb 	bl	8001504 <HAL_GPIO_Init>
}
 8000d8e:	bf00      	nop
 8000d90:	3728      	adds	r7, #40	@ 0x28
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	46020c00 	.word	0x46020c00
 8000d9c:	42020000 	.word	0x42020000

08000da0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000da4:	4b12      	ldr	r3, [pc, #72]	@ (8000df0 <HAL_Init+0x50>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a11      	ldr	r2, [pc, #68]	@ (8000df0 <HAL_Init+0x50>)
 8000daa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db0:	2003      	movs	r0, #3
 8000db2:	f000 f98c 	bl	80010ce <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000db6:	f001 ffa7 	bl	8002d08 <HAL_RCC_GetSysClockFreq>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	4b0d      	ldr	r3, [pc, #52]	@ (8000df4 <HAL_Init+0x54>)
 8000dbe:	6a1b      	ldr	r3, [r3, #32]
 8000dc0:	f003 030f 	and.w	r3, r3, #15
 8000dc4:	490c      	ldr	r1, [pc, #48]	@ (8000df8 <HAL_Init+0x58>)
 8000dc6:	5ccb      	ldrb	r3, [r1, r3]
 8000dc8:	fa22 f303 	lsr.w	r3, r2, r3
 8000dcc:	4a0b      	ldr	r2, [pc, #44]	@ (8000dfc <HAL_Init+0x5c>)
 8000dce:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000dd0:	2004      	movs	r0, #4
 8000dd2:	f000 f9d1 	bl	8001178 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dd6:	200f      	movs	r0, #15
 8000dd8:	f000 f812 	bl	8000e00 <HAL_InitTick>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
 8000de4:	e002      	b.n	8000dec <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000de6:	f7ff fcf5 	bl	80007d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dea:	2300      	movs	r3, #0
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40022000 	.word	0x40022000
 8000df4:	46020c00 	.word	0x46020c00
 8000df8:	08008230 	.word	0x08008230
 8000dfc:	20000068 	.word	0x20000068

08000e00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000e0c:	4b33      	ldr	r3, [pc, #204]	@ (8000edc <HAL_InitTick+0xdc>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d101      	bne.n	8000e18 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8000e14:	2301      	movs	r3, #1
 8000e16:	e05c      	b.n	8000ed2 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8000e18:	4b31      	ldr	r3, [pc, #196]	@ (8000ee0 <HAL_InitTick+0xe0>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f003 0304 	and.w	r3, r3, #4
 8000e20:	2b04      	cmp	r3, #4
 8000e22:	d10c      	bne.n	8000e3e <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8000e24:	4b2f      	ldr	r3, [pc, #188]	@ (8000ee4 <HAL_InitTick+0xe4>)
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	4b2c      	ldr	r3, [pc, #176]	@ (8000edc <HAL_InitTick+0xdc>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	e037      	b.n	8000eae <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8000e3e:	f000 f9f3 	bl	8001228 <HAL_SYSTICK_GetCLKSourceConfig>
 8000e42:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	2b02      	cmp	r3, #2
 8000e48:	d023      	beq.n	8000e92 <HAL_InitTick+0x92>
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	2b02      	cmp	r3, #2
 8000e4e:	d82d      	bhi.n	8000eac <HAL_InitTick+0xac>
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d003      	beq.n	8000e5e <HAL_InitTick+0x5e>
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d00d      	beq.n	8000e78 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8000e5c:	e026      	b.n	8000eac <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8000e5e:	4b21      	ldr	r3, [pc, #132]	@ (8000ee4 <HAL_InitTick+0xe4>)
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	4b1e      	ldr	r3, [pc, #120]	@ (8000edc <HAL_InitTick+0xdc>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	4619      	mov	r1, r3
 8000e68:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8000e6c:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e74:	60fb      	str	r3, [r7, #12]
        break;
 8000e76:	e01a      	b.n	8000eae <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000e78:	4b18      	ldr	r3, [pc, #96]	@ (8000edc <HAL_InitTick+0xdc>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e82:	fbb3 f3f2 	udiv	r3, r3, r2
 8000e86:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e8e:	60fb      	str	r3, [r7, #12]
        break;
 8000e90:	e00d      	b.n	8000eae <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000e92:	4b12      	ldr	r3, [pc, #72]	@ (8000edc <HAL_InitTick+0xdc>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	461a      	mov	r2, r3
 8000e98:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8000ea0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ea8:	60fb      	str	r3, [r7, #12]
        break;
 8000eaa:	e000      	b.n	8000eae <HAL_InitTick+0xae>
        break;
 8000eac:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8000eae:	68f8      	ldr	r0, [r7, #12]
 8000eb0:	f000 f940 	bl	8001134 <HAL_SYSTICK_Config>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e009      	b.n	8000ed2 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	6879      	ldr	r1, [r7, #4]
 8000ec2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ec6:	f000 f90d 	bl	80010e4 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8000eca:	4a07      	ldr	r2, [pc, #28]	@ (8000ee8 <HAL_InitTick+0xe8>)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000ed0:	2300      	movs	r3, #0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	2000008c 	.word	0x2000008c
 8000ee0:	e000e010 	.word	0xe000e010
 8000ee4:	20000068 	.word	0x20000068
 8000ee8:	20000088 	.word	0x20000088

08000eec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ef0:	4b06      	ldr	r3, [pc, #24]	@ (8000f0c <HAL_IncTick+0x20>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	4b06      	ldr	r3, [pc, #24]	@ (8000f10 <HAL_IncTick+0x24>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4413      	add	r3, r2
 8000efc:	4a04      	ldr	r2, [pc, #16]	@ (8000f10 <HAL_IncTick+0x24>)
 8000efe:	6013      	str	r3, [r2, #0]
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	2000008c 	.word	0x2000008c
 8000f10:	200003b8 	.word	0x200003b8

08000f14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  return uwTick;
 8000f18:	4b03      	ldr	r3, [pc, #12]	@ (8000f28 <HAL_GetTick+0x14>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	200003b8 	.word	0x200003b8

08000f2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f34:	f7ff ffee 	bl	8000f14 <HAL_GetTick>
 8000f38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000f44:	d005      	beq.n	8000f52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f46:	4b0a      	ldr	r3, [pc, #40]	@ (8000f70 <HAL_Delay+0x44>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	4413      	add	r3, r2
 8000f50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f52:	bf00      	nop
 8000f54:	f7ff ffde 	bl	8000f14 <HAL_GetTick>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	68fa      	ldr	r2, [r7, #12]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d8f7      	bhi.n	8000f54 <HAL_Delay+0x28>
  {
  }
}
 8000f64:	bf00      	nop
 8000f66:	bf00      	nop
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	2000008c 	.word	0x2000008c

08000f74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f003 0307 	and.w	r3, r3, #7
 8000f82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f84:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f8a:	68ba      	ldr	r2, [r7, #8]
 8000f8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f90:	4013      	ands	r3, r2
 8000f92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fa0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fa6:	4a04      	ldr	r2, [pc, #16]	@ (8000fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	60d3      	str	r3, [r2, #12]
}
 8000fac:	bf00      	nop
 8000fae:	3714      	adds	r7, #20
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fc0:	4b04      	ldr	r3, [pc, #16]	@ (8000fd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	0a1b      	lsrs	r3, r3, #8
 8000fc6:	f003 0307 	and.w	r3, r3, #7
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000fe2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	db0b      	blt.n	8001002 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fea:	88fb      	ldrh	r3, [r7, #6]
 8000fec:	f003 021f 	and.w	r2, r3, #31
 8000ff0:	4907      	ldr	r1, [pc, #28]	@ (8001010 <__NVIC_EnableIRQ+0x38>)
 8000ff2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ff6:	095b      	lsrs	r3, r3, #5
 8000ff8:	2001      	movs	r0, #1
 8000ffa:	fa00 f202 	lsl.w	r2, r0, r2
 8000ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	e000e100 	.word	0xe000e100

08001014 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	6039      	str	r1, [r7, #0]
 800101e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001020:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001024:	2b00      	cmp	r3, #0
 8001026:	db0a      	blt.n	800103e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	b2da      	uxtb	r2, r3
 800102c:	490c      	ldr	r1, [pc, #48]	@ (8001060 <__NVIC_SetPriority+0x4c>)
 800102e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001032:	0112      	lsls	r2, r2, #4
 8001034:	b2d2      	uxtb	r2, r2
 8001036:	440b      	add	r3, r1
 8001038:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800103c:	e00a      	b.n	8001054 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	b2da      	uxtb	r2, r3
 8001042:	4908      	ldr	r1, [pc, #32]	@ (8001064 <__NVIC_SetPriority+0x50>)
 8001044:	88fb      	ldrh	r3, [r7, #6]
 8001046:	f003 030f 	and.w	r3, r3, #15
 800104a:	3b04      	subs	r3, #4
 800104c:	0112      	lsls	r2, r2, #4
 800104e:	b2d2      	uxtb	r2, r2
 8001050:	440b      	add	r3, r1
 8001052:	761a      	strb	r2, [r3, #24]
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	e000e100 	.word	0xe000e100
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001068:	b480      	push	{r7}
 800106a:	b089      	sub	sp, #36	@ 0x24
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	f003 0307 	and.w	r3, r3, #7
 800107a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	f1c3 0307 	rsb	r3, r3, #7
 8001082:	2b04      	cmp	r3, #4
 8001084:	bf28      	it	cs
 8001086:	2304      	movcs	r3, #4
 8001088:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	3304      	adds	r3, #4
 800108e:	2b06      	cmp	r3, #6
 8001090:	d902      	bls.n	8001098 <NVIC_EncodePriority+0x30>
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	3b03      	subs	r3, #3
 8001096:	e000      	b.n	800109a <NVIC_EncodePriority+0x32>
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800109c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43da      	mvns	r2, r3
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	401a      	ands	r2, r3
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010b0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ba:	43d9      	mvns	r1, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c0:	4313      	orrs	r3, r2
         );
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3724      	adds	r7, #36	@ 0x24
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr

080010ce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b082      	sub	sp, #8
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f7ff ff4c 	bl	8000f74 <__NVIC_SetPriorityGrouping>
}
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	60b9      	str	r1, [r7, #8]
 80010ee:	607a      	str	r2, [r7, #4]
 80010f0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010f2:	f7ff ff63 	bl	8000fbc <__NVIC_GetPriorityGrouping>
 80010f6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	68b9      	ldr	r1, [r7, #8]
 80010fc:	6978      	ldr	r0, [r7, #20]
 80010fe:	f7ff ffb3 	bl	8001068 <NVIC_EncodePriority>
 8001102:	4602      	mov	r2, r0
 8001104:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001108:	4611      	mov	r1, r2
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff ff82 	bl	8001014 <__NVIC_SetPriority>
}
 8001110:	bf00      	nop
 8001112:	3718      	adds	r7, #24
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001122:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff ff56 	bl	8000fd8 <__NVIC_EnableIRQ>
}
 800112c:	bf00      	nop
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3b01      	subs	r3, #1
 8001140:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001144:	d301      	bcc.n	800114a <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8001146:	2301      	movs	r3, #1
 8001148:	e00d      	b.n	8001166 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 800114a:	4a0a      	ldr	r2, [pc, #40]	@ (8001174 <HAL_SYSTICK_Config+0x40>)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3b01      	subs	r3, #1
 8001150:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8001152:	4b08      	ldr	r3, [pc, #32]	@ (8001174 <HAL_SYSTICK_Config+0x40>)
 8001154:	2200      	movs	r2, #0
 8001156:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001158:	4b06      	ldr	r3, [pc, #24]	@ (8001174 <HAL_SYSTICK_Config+0x40>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a05      	ldr	r2, [pc, #20]	@ (8001174 <HAL_SYSTICK_Config+0x40>)
 800115e:	f043 0303 	orr.w	r3, r3, #3
 8001162:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	e000e010 	.word	0xe000e010

08001178 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2b04      	cmp	r3, #4
 8001184:	d844      	bhi.n	8001210 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001186:	a201      	add	r2, pc, #4	@ (adr r2, 800118c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800118c:	080011af 	.word	0x080011af
 8001190:	080011cd 	.word	0x080011cd
 8001194:	080011ef 	.word	0x080011ef
 8001198:	08001211 	.word	0x08001211
 800119c:	080011a1 	.word	0x080011a1
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80011a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001220 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a1e      	ldr	r2, [pc, #120]	@ (8001220 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80011a6:	f043 0304 	orr.w	r3, r3, #4
 80011aa:	6013      	str	r3, [r2, #0]
      break;
 80011ac:	e031      	b.n	8001212 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80011ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001220 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a1b      	ldr	r2, [pc, #108]	@ (8001220 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80011b4:	f023 0304 	bic.w	r3, r3, #4
 80011b8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 80011ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001224 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80011bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011c0:	4a18      	ldr	r2, [pc, #96]	@ (8001224 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80011c2:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80011c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80011ca:	e022      	b.n	8001212 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80011cc:	4b14      	ldr	r3, [pc, #80]	@ (8001220 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a13      	ldr	r2, [pc, #76]	@ (8001220 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80011d2:	f023 0304 	bic.w	r3, r3, #4
 80011d6:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 80011d8:	4b12      	ldr	r3, [pc, #72]	@ (8001224 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80011da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011de:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80011e2:	4a10      	ldr	r2, [pc, #64]	@ (8001224 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80011e4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80011ec:	e011      	b.n	8001212 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80011ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001220 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a0b      	ldr	r2, [pc, #44]	@ (8001220 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80011f4:	f023 0304 	bic.w	r3, r3, #4
 80011f8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 80011fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001224 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80011fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001200:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001204:	4a07      	ldr	r2, [pc, #28]	@ (8001224 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001206:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800120a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800120e:	e000      	b.n	8001212 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001210:	bf00      	nop
  }
}
 8001212:	bf00      	nop
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	e000e010 	.word	0xe000e010
 8001224:	46020c00 	.word	0x46020c00

08001228 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 800122e:	4b19      	ldr	r3, [pc, #100]	@ (8001294 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 0304 	and.w	r3, r3, #4
 8001236:	2b00      	cmp	r3, #0
 8001238:	d002      	beq.n	8001240 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 800123a:	2304      	movs	r3, #4
 800123c:	607b      	str	r3, [r7, #4]
 800123e:	e021      	b.n	8001284 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8001240:	4b15      	ldr	r3, [pc, #84]	@ (8001298 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 8001242:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001246:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800124a:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001252:	d011      	beq.n	8001278 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800125a:	d810      	bhi.n	800127e <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d004      	beq.n	800126c <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001268:	d003      	beq.n	8001272 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 800126a:	e008      	b.n	800127e <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800126c:	2300      	movs	r3, #0
 800126e:	607b      	str	r3, [r7, #4]
        break;
 8001270:	e008      	b.n	8001284 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8001272:	2301      	movs	r3, #1
 8001274:	607b      	str	r3, [r7, #4]
        break;
 8001276:	e005      	b.n	8001284 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8001278:	2302      	movs	r3, #2
 800127a:	607b      	str	r3, [r7, #4]
        break;
 800127c:	e002      	b.n	8001284 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800127e:	2300      	movs	r3, #0
 8001280:	607b      	str	r3, [r7, #4]
        break;
 8001282:	bf00      	nop
    }
  }
  return systick_source;
 8001284:	687b      	ldr	r3, [r7, #4]
}
 8001286:	4618      	mov	r0, r3
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	e000e010 	.word	0xe000e010
 8001298:	46020c00 	.word	0x46020c00

0800129c <HAL_DCACHE_Init>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHE.
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_DCACHE_Init(DCACHE_HandleTypeDef *hdcache)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the DCACHE handle allocation */
  if (hdcache == NULL)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d101      	bne.n	80012ae <HAL_DCACHE_Init+0x12>
  {
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e037      	b.n	800131e <HAL_DCACHE_Init+0x82>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));
  assert_param(IS_DCACHE_READ_BURST_TYPE(hdcache->Init.ReadBurstType));

  if (hdcache->State == HAL_DCACHE_STATE_RESET)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d119      	bne.n	80012ee <HAL_DCACHE_Init+0x52>
  {
    /* Init the DCACHE Callback settings with legacy weak */
    hdcache->ErrorCallback                      = HAL_DCACHE_ErrorCallback;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a1a      	ldr	r2, [pc, #104]	@ (8001328 <HAL_DCACHE_Init+0x8c>)
 80012be:	609a      	str	r2, [r3, #8]
    hdcache->CleanByAddrCallback                = HAL_DCACHE_CleanByAddrCallback;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	4a1a      	ldr	r2, [pc, #104]	@ (800132c <HAL_DCACHE_Init+0x90>)
 80012c4:	60da      	str	r2, [r3, #12]
    hdcache->InvalidateByAddrCallback           = HAL_DCACHE_InvalidateByAddrCallback;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a19      	ldr	r2, [pc, #100]	@ (8001330 <HAL_DCACHE_Init+0x94>)
 80012ca:	611a      	str	r2, [r3, #16]
    hdcache->InvalidateCompleteCallback         = HAL_DCACHE_InvalidateCompleteCallback;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4a19      	ldr	r2, [pc, #100]	@ (8001334 <HAL_DCACHE_Init+0x98>)
 80012d0:	615a      	str	r2, [r3, #20]
    hdcache->CleanAndInvalidateByAddrCallback   = HAL_DCACHE_CleanAndInvalidateByAddrCallback;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a18      	ldr	r2, [pc, #96]	@ (8001338 <HAL_DCACHE_Init+0x9c>)
 80012d6:	619a      	str	r2, [r3, #24]

    if (hdcache->MspInitCallback == NULL)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	69db      	ldr	r3, [r3, #28]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d102      	bne.n	80012e6 <HAL_DCACHE_Init+0x4a>
    {
      hdcache->MspInitCallback = HAL_DCACHE_MspInit;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4a16      	ldr	r2, [pc, #88]	@ (800133c <HAL_DCACHE_Init+0xa0>)
 80012e4:	61da      	str	r2, [r3, #28]
    }

    /* Init the low level hardware */
    hdcache->MspInitCallback(hdcache);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	69db      	ldr	r3, [r3, #28]
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	4798      	blx	r3
  }

  /* Init the error code */
  hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2200      	movs	r2, #0
 80012f2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Init the DCACHE handle state */
  hdcache->State = HAL_DCACHE_STATE_READY;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2201      	movs	r2, #1
 80012f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  /* Set requested read burst type */
  MODIFY_REG(hdcache->Instance->CR, DCACHE_CR_HBURST, hdcache->Init.ReadBurstType);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	685a      	ldr	r2, [r3, #4]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	430a      	orrs	r2, r1
 8001310:	601a      	str	r2, [r3, #0]

  /* Enable the selected DCACHE peripheral */
  status = HAL_DCACHE_Enable(hdcache);
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f000 f814 	bl	8001340 <HAL_DCACHE_Enable>
 8001318:	4603      	mov	r3, r0
 800131a:	73fb      	strb	r3, [r7, #15]

  return status;
 800131c:	7bfb      	ldrb	r3, [r7, #15]
}
 800131e:	4618      	mov	r0, r3
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	080013df 	.word	0x080013df
 800132c:	0800138f 	.word	0x0800138f
 8001330:	080013a3 	.word	0x080013a3
 8001334:	080013cb 	.word	0x080013cb
 8001338:	080013b7 	.word	0x080013b7
 800133c:	08000809 	.word	0x08000809

08001340 <HAL_DCACHE_Enable>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCACHE_Enable(DCACHE_HandleTypeDef *hdcache)
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001348:	2300      	movs	r3, #0
 800134a:	73fb      	strb	r3, [r7, #15]

  /* Check the dcache handle allocation */
  if (hdcache == NULL)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d101      	bne.n	8001356 <HAL_DCACHE_Enable+0x16>
  {
    return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e015      	b.n	8001382 <HAL_DCACHE_Enable+0x42>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));

  /* Check no ongoing operation */
  if (READ_BIT(hdcache->Instance->SR, (DCACHE_SR_BUSYF | DCACHE_SR_BUSYCMDF)) != 0U)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f003 0309 	and.w	r3, r3, #9
 8001360:	2b00      	cmp	r3, #0
 8001362:	d002      	beq.n	800136a <HAL_DCACHE_Enable+0x2a>
  {
    /* Return busy status */
    status =  HAL_BUSY;
 8001364:	2302      	movs	r3, #2
 8001366:	73fb      	strb	r3, [r7, #15]
 8001368:	e00a      	b.n	8001380 <HAL_DCACHE_Enable+0x40>
  }
  else
  {
    /* Update the error code */
    hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2200      	movs	r2, #0
 800136e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Enable the selected DCACHE peripheral */
    SET_BIT(hdcache->Instance->CR, DCACHE_CR_EN);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f042 0201 	orr.w	r2, r2, #1
 800137e:	601a      	str	r2, [r3, #0]
  }

  return status;
 8001380:	7bfb      	ldrb	r3, [r7, #15]
}
 8001382:	4618      	mov	r0, r3
 8001384:	3714      	adds	r7, #20
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr

0800138e <HAL_DCACHE_CleanByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_CleanByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 800138e:	b480      	push	{r7}
 8001390:	b083      	sub	sp, #12
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_CleanByAddrCallback() should be implemented in the user file
   */
}
 8001396:	bf00      	nop
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr

080013a2 <HAL_DCACHE_InvalidateByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_InvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 80013a2:	b480      	push	{r7}
 80013a4:	b083      	sub	sp, #12
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_InvalidateByAddrCallback() should be implemented in the user file
   */
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr

080013b6 <HAL_DCACHE_CleanAndInvalidateByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_CleanAndInvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 80013b6:	b480      	push	{r7}
 80013b8:	b083      	sub	sp, #12
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_CleanAndInvalidateByAddrCallback() should be implemented in the user file
   */
}
 80013be:	bf00      	nop
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr

080013ca <HAL_DCACHE_InvalidateCompleteCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_InvalidateCompleteCallback(DCACHE_HandleTypeDef *hdcache)
{
 80013ca:	b480      	push	{r7}
 80013cc:	b083      	sub	sp, #12
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_InvalidateCompleteCallback() should be implemented in the user file
   */
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr

080013de <HAL_DCACHE_ErrorCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_ErrorCallback(DCACHE_HandleTypeDef *hdcache)
{
 80013de:	b480      	push	{r7}
 80013e0:	b083      	sub	sp, #12
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_ErrorCallback() should be implemented in the user file
   */
}
 80013e6:	bf00      	nop
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 80013f2:	b480      	push	{r7}
 80013f4:	b087      	sub	sp, #28
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	60f8      	str	r0, [r7, #12]
 80013fa:	460b      	mov	r3, r1
 80013fc:	607a      	str	r2, [r7, #4]
 80013fe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001400:	2300      	movs	r3, #0
 8001402:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8001404:	7afb      	ldrb	r3, [r7, #11]
 8001406:	2b02      	cmp	r3, #2
 8001408:	d011      	beq.n	800142e <HAL_EXTI_RegisterCallback+0x3c>
 800140a:	2b02      	cmp	r3, #2
 800140c:	dc13      	bgt.n	8001436 <HAL_EXTI_RegisterCallback+0x44>
 800140e:	2b00      	cmp	r3, #0
 8001410:	d002      	beq.n	8001418 <HAL_EXTI_RegisterCallback+0x26>
 8001412:	2b01      	cmp	r3, #1
 8001414:	d007      	beq.n	8001426 <HAL_EXTI_RegisterCallback+0x34>
 8001416:	e00e      	b.n	8001436 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	687a      	ldr	r2, [r7, #4]
 8001422:	609a      	str	r2, [r3, #8]
      break;
 8001424:	e00a      	b.n	800143c <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	605a      	str	r2, [r3, #4]
      break;
 800142c:	e006      	b.n	800143c <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	609a      	str	r2, [r3, #8]
      break;
 8001434:	e002      	b.n	800143c <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	75fb      	strb	r3, [r7, #23]
      break;
 800143a:	bf00      	nop
  }

  return status;
 800143c:	7dfb      	ldrb	r3, [r7, #23]
}
 800143e:	4618      	mov	r0, r3
 8001440:	371c      	adds	r7, #28
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr

0800144a <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800144a:	b480      	push	{r7}
 800144c:	b083      	sub	sp, #12
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
 8001452:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d101      	bne.n	800145e <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e003      	b.n	8001466 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	683a      	ldr	r2, [r7, #0]
 8001462:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001464:	2300      	movs	r3, #0
  }
}
 8001466:	4618      	mov	r0, r3
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
	...

08001474 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	0c1b      	lsrs	r3, r3, #16
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 031f 	and.w	r3, r3, #31
 8001490:	2201      	movs	r2, #1
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	015a      	lsls	r2, r3, #5
 800149c:	4b17      	ldr	r3, [pc, #92]	@ (80014fc <HAL_EXTI_IRQHandler+0x88>)
 800149e:	4413      	add	r3, r2
 80014a0:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	4013      	ands	r3, r2
 80014aa:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d009      	beq.n	80014c6 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d002      	beq.n	80014c6 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	015a      	lsls	r2, r3, #5
 80014ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001500 <HAL_EXTI_IRQHandler+0x8c>)
 80014cc:	4413      	add	r3, r2
 80014ce:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	4013      	ands	r3, r2
 80014d8:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d009      	beq.n	80014f4 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d002      	beq.n	80014f4 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	4798      	blx	r3
    }
  }
}
 80014f4:	bf00      	nop
 80014f6:	3718      	adds	r7, #24
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	4602200c 	.word	0x4602200c
 8001500:	46022010 	.word	0x46022010

08001504 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001504:	b480      	push	{r7}
 8001506:	b089      	sub	sp, #36	@ 0x24
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800150e:	2300      	movs	r3, #0
 8001510:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001516:	e1ba      	b.n	800188e <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	2101      	movs	r1, #1
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	fa01 f303 	lsl.w	r3, r1, r3
 8001524:	4013      	ands	r3, r2
 8001526:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	2b00      	cmp	r3, #0
 8001530:	f000 81aa 	beq.w	8001888 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	4a55      	ldr	r2, [pc, #340]	@ (800168c <HAL_GPIO_Init+0x188>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d15d      	bne.n	80015f8 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8001542:	2201      	movs	r2, #1
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	43db      	mvns	r3, r3
 800154c:	69fa      	ldr	r2, [r7, #28]
 800154e:	4013      	ands	r3, r2
 8001550:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f003 0201 	and.w	r2, r3, #1
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	69fa      	ldr	r2, [r7, #28]
 8001562:	4313      	orrs	r3, r2
 8001564:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	69fa      	ldr	r2, [r7, #28]
 800156a:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 800156c:	4a48      	ldr	r2, [pc, #288]	@ (8001690 <HAL_GPIO_Init+0x18c>)
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001574:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8001576:	4a46      	ldr	r2, [pc, #280]	@ (8001690 <HAL_GPIO_Init+0x18c>)
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	00db      	lsls	r3, r3, #3
 800157c:	4413      	add	r3, r2
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	08da      	lsrs	r2, r3, #3
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	3208      	adds	r2, #8
 800158a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800158e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	f003 0307 	and.w	r3, r3, #7
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	220f      	movs	r2, #15
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	43db      	mvns	r3, r3
 80015a0:	69fa      	ldr	r2, [r7, #28]
 80015a2:	4013      	ands	r3, r2
 80015a4:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	f003 0307 	and.w	r3, r3, #7
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	220b      	movs	r2, #11
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	69fa      	ldr	r2, [r7, #28]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	08da      	lsrs	r2, r3, #3
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	3208      	adds	r2, #8
 80015c2:	69f9      	ldr	r1, [r7, #28]
 80015c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	2203      	movs	r2, #3
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	43db      	mvns	r3, r3
 80015da:	69fa      	ldr	r2, [r7, #28]
 80015dc:	4013      	ands	r3, r2
 80015de:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	2202      	movs	r2, #2
 80015e6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ea:	69fa      	ldr	r2, [r7, #28]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	69fa      	ldr	r2, [r7, #28]
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	e067      	b.n	80016c8 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d003      	beq.n	8001608 <HAL_GPIO_Init+0x104>
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	2b12      	cmp	r3, #18
 8001606:	d145      	bne.n	8001694 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	08da      	lsrs	r2, r3, #3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	3208      	adds	r2, #8
 8001610:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001614:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	f003 0307 	and.w	r3, r3, #7
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	220f      	movs	r2, #15
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	43db      	mvns	r3, r3
 8001626:	69fa      	ldr	r2, [r7, #28]
 8001628:	4013      	ands	r3, r2
 800162a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	691b      	ldr	r3, [r3, #16]
 8001630:	f003 020f 	and.w	r2, r3, #15
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	f003 0307 	and.w	r3, r3, #7
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	69fa      	ldr	r2, [r7, #28]
 8001642:	4313      	orrs	r3, r2
 8001644:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	08da      	lsrs	r2, r3, #3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	3208      	adds	r2, #8
 800164e:	69f9      	ldr	r1, [r7, #28]
 8001650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	2203      	movs	r2, #3
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	43db      	mvns	r3, r3
 8001666:	69fa      	ldr	r2, [r7, #28]
 8001668:	4013      	ands	r3, r2
 800166a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f003 0203 	and.w	r2, r3, #3
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	69fa      	ldr	r2, [r7, #28]
 800167e:	4313      	orrs	r3, r2
 8001680:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	69fa      	ldr	r2, [r7, #28]
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	e01e      	b.n	80016c8 <HAL_GPIO_Init+0x1c4>
 800168a:	bf00      	nop
 800168c:	46020000 	.word	0x46020000
 8001690:	08008294 	.word	0x08008294
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	2203      	movs	r2, #3
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	43db      	mvns	r3, r3
 80016a6:	69fa      	ldr	r2, [r7, #28]
 80016a8:	4013      	ands	r3, r2
 80016aa:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f003 0203 	and.w	r2, r3, #3
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	69fa      	ldr	r2, [r7, #28]
 80016be:	4313      	orrs	r3, r2
 80016c0:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	69fa      	ldr	r2, [r7, #28]
 80016c6:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d00b      	beq.n	80016e8 <HAL_GPIO_Init+0x1e4>
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d007      	beq.n	80016e8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016dc:	2b11      	cmp	r3, #17
 80016de:	d003      	beq.n	80016e8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	2b12      	cmp	r3, #18
 80016e6:	d130      	bne.n	800174a <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	2203      	movs	r2, #3
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	43db      	mvns	r3, r3
 80016fa:	69fa      	ldr	r2, [r7, #28]
 80016fc:	4013      	ands	r3, r2
 80016fe:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	68da      	ldr	r2, [r3, #12]
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	69fa      	ldr	r2, [r7, #28]
 800170e:	4313      	orrs	r3, r2
 8001710:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	69fa      	ldr	r2, [r7, #28]
 8001716:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800171e:	2201      	movs	r2, #1
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	43db      	mvns	r3, r3
 8001728:	69fa      	ldr	r2, [r7, #28]
 800172a:	4013      	ands	r3, r2
 800172c:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	091b      	lsrs	r3, r3, #4
 8001734:	f003 0201 	and.w	r2, r3, #1
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	69fa      	ldr	r2, [r7, #28]
 8001740:	4313      	orrs	r3, r2
 8001742:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	69fa      	ldr	r2, [r7, #28]
 8001748:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	2b03      	cmp	r3, #3
 8001750:	d017      	beq.n	8001782 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	2203      	movs	r2, #3
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	43db      	mvns	r3, r3
 8001764:	69fa      	ldr	r2, [r7, #28]
 8001766:	4013      	ands	r3, r2
 8001768:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	689a      	ldr	r2, [r3, #8]
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	69fa      	ldr	r2, [r7, #28]
 8001778:	4313      	orrs	r3, r2
 800177a:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	69fa      	ldr	r2, [r7, #28]
 8001780:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d07c      	beq.n	8001888 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800178e:	4a47      	ldr	r2, [pc, #284]	@ (80018ac <HAL_GPIO_Init+0x3a8>)
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	089b      	lsrs	r3, r3, #2
 8001794:	3318      	adds	r3, #24
 8001796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800179a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	f003 0303 	and.w	r3, r3, #3
 80017a2:	00db      	lsls	r3, r3, #3
 80017a4:	220f      	movs	r2, #15
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	43db      	mvns	r3, r3
 80017ac:	69fa      	ldr	r2, [r7, #28]
 80017ae:	4013      	ands	r3, r2
 80017b0:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	0a9a      	lsrs	r2, r3, #10
 80017b6:	4b3e      	ldr	r3, [pc, #248]	@ (80018b0 <HAL_GPIO_Init+0x3ac>)
 80017b8:	4013      	ands	r3, r2
 80017ba:	697a      	ldr	r2, [r7, #20]
 80017bc:	f002 0203 	and.w	r2, r2, #3
 80017c0:	00d2      	lsls	r2, r2, #3
 80017c2:	4093      	lsls	r3, r2
 80017c4:	69fa      	ldr	r2, [r7, #28]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80017ca:	4938      	ldr	r1, [pc, #224]	@ (80018ac <HAL_GPIO_Init+0x3a8>)
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	089b      	lsrs	r3, r3, #2
 80017d0:	3318      	adds	r3, #24
 80017d2:	69fa      	ldr	r2, [r7, #28]
 80017d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80017d8:	4b34      	ldr	r3, [pc, #208]	@ (80018ac <HAL_GPIO_Init+0x3a8>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	43db      	mvns	r3, r3
 80017e2:	69fa      	ldr	r2, [r7, #28]
 80017e4:	4013      	ands	r3, r2
 80017e6:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d003      	beq.n	80017fc <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80017f4:	69fa      	ldr	r2, [r7, #28]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80017fc:	4a2b      	ldr	r2, [pc, #172]	@ (80018ac <HAL_GPIO_Init+0x3a8>)
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001802:	4b2a      	ldr	r3, [pc, #168]	@ (80018ac <HAL_GPIO_Init+0x3a8>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	43db      	mvns	r3, r3
 800180c:	69fa      	ldr	r2, [r7, #28]
 800180e:	4013      	ands	r3, r2
 8001810:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d003      	beq.n	8001826 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800181e:	69fa      	ldr	r2, [r7, #28]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	4313      	orrs	r3, r2
 8001824:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8001826:	4a21      	ldr	r2, [pc, #132]	@ (80018ac <HAL_GPIO_Init+0x3a8>)
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800182c:	4b1f      	ldr	r3, [pc, #124]	@ (80018ac <HAL_GPIO_Init+0x3a8>)
 800182e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001832:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	43db      	mvns	r3, r3
 8001838:	69fa      	ldr	r2, [r7, #28]
 800183a:	4013      	ands	r3, r2
 800183c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d003      	beq.n	8001852 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800184a:	69fa      	ldr	r2, [r7, #28]
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	4313      	orrs	r3, r2
 8001850:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8001852:	4a16      	ldr	r2, [pc, #88]	@ (80018ac <HAL_GPIO_Init+0x3a8>)
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800185a:	4b14      	ldr	r3, [pc, #80]	@ (80018ac <HAL_GPIO_Init+0x3a8>)
 800185c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001860:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	43db      	mvns	r3, r3
 8001866:	69fa      	ldr	r2, [r7, #28]
 8001868:	4013      	ands	r3, r2
 800186a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d003      	beq.n	8001880 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8001878:	69fa      	ldr	r2, [r7, #28]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	4313      	orrs	r3, r2
 800187e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8001880:	4a0a      	ldr	r2, [pc, #40]	@ (80018ac <HAL_GPIO_Init+0x3a8>)
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	3301      	adds	r3, #1
 800188c:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	fa22 f303 	lsr.w	r3, r2, r3
 8001898:	2b00      	cmp	r3, #0
 800189a:	f47f ae3d 	bne.w	8001518 <HAL_GPIO_Init+0x14>
  }
}
 800189e:	bf00      	nop
 80018a0:	bf00      	nop
 80018a2:	3724      	adds	r7, #36	@ 0x24
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	46022000 	.word	0x46022000
 80018b0:	002f7f7f 	.word	0x002f7f7f

080018b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	460b      	mov	r3, r1
 80018be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	691a      	ldr	r2, [r3, #16]
 80018c4:	887b      	ldrh	r3, [r7, #2]
 80018c6:	4013      	ands	r3, r2
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d002      	beq.n	80018d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018cc:	2301      	movs	r3, #1
 80018ce:	73fb      	strb	r3, [r7, #15]
 80018d0:	e001      	b.n	80018d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018d2:	2300      	movs	r3, #0
 80018d4:	73fb      	strb	r3, [r7, #15]
  }

  return bitstatus;
 80018d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3714      	adds	r7, #20
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	460b      	mov	r3, r1
 80018ee:	807b      	strh	r3, [r7, #2]
 80018f0:	4613      	mov	r3, r2
 80018f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018f4:	787b      	ldrb	r3, [r7, #1]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d003      	beq.n	8001902 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018fa:	887a      	ldrh	r2, [r7, #2]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8001900:	e002      	b.n	8001908 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8001902:	887a      	ldrh	r2, [r7, #2]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001908:	bf00      	nop
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800191c:	2300      	movs	r3, #0
 800191e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8001920:	4b0b      	ldr	r3, [pc, #44]	@ (8001950 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0301 	and.w	r3, r3, #1
 8001928:	2b00      	cmp	r3, #0
 800192a:	d002      	beq.n	8001932 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	73fb      	strb	r3, [r7, #15]
 8001930:	e007      	b.n	8001942 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8001932:	4b07      	ldr	r3, [pc, #28]	@ (8001950 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f023 0204 	bic.w	r2, r3, #4
 800193a:	4905      	ldr	r1, [pc, #20]	@ (8001950 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4313      	orrs	r3, r2
 8001940:	600b      	str	r3, [r1, #0]
  }

  return status;
 8001942:	7bfb      	ldrb	r3, [r7, #15]
}
 8001944:	4618      	mov	r0, r3
 8001946:	3714      	adds	r7, #20
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr
 8001950:	40030400 	.word	0x40030400

08001954 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8001958:	4b05      	ldr	r3, [pc, #20]	@ (8001970 <HAL_ICACHE_Enable+0x1c>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a04      	ldr	r2, [pc, #16]	@ (8001970 <HAL_ICACHE_Enable+0x1c>)
 800195e:	f043 0301 	orr.w	r3, r3, #1
 8001962:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	40030400 	.word	0x40030400

08001974 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 800197c:	4b39      	ldr	r3, [pc, #228]	@ (8001a64 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800197e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001980:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001984:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8001986:	68ba      	ldr	r2, [r7, #8]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	429a      	cmp	r2, r3
 800198c:	d10b      	bne.n	80019a6 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001994:	d905      	bls.n	80019a2 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8001996:	4b33      	ldr	r3, [pc, #204]	@ (8001a64 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	4a32      	ldr	r2, [pc, #200]	@ (8001a64 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800199c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019a0:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 80019a2:	2300      	movs	r3, #0
 80019a4:	e057      	b.n	8001a56 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019ac:	d90a      	bls.n	80019c4 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80019ae:	4b2d      	ldr	r3, [pc, #180]	@ (8001a64 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	4a2a      	ldr	r2, [pc, #168]	@ (8001a64 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80019bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019c0:	60d3      	str	r3, [r2, #12]
 80019c2:	e007      	b.n	80019d4 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80019c4:	4b27      	ldr	r3, [pc, #156]	@ (8001a64 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80019cc:	4925      	ldr	r1, [pc, #148]	@ (8001a64 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80019d4:	4b24      	ldr	r3, [pc, #144]	@ (8001a68 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a24      	ldr	r2, [pc, #144]	@ (8001a6c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80019da:	fba2 2303 	umull	r2, r3, r2, r3
 80019de:	099b      	lsrs	r3, r3, #6
 80019e0:	2232      	movs	r2, #50	@ 0x32
 80019e2:	fb02 f303 	mul.w	r3, r2, r3
 80019e6:	4a21      	ldr	r2, [pc, #132]	@ (8001a6c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80019e8:	fba2 2303 	umull	r2, r3, r2, r3
 80019ec:	099b      	lsrs	r3, r3, #6
 80019ee:	3301      	adds	r3, #1
 80019f0:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80019f2:	e002      	b.n	80019fa <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	3b01      	subs	r3, #1
 80019f8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80019fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001a64 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d102      	bne.n	8001a0c <HAL_PWREx_ControlVoltageScaling+0x98>
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d1f3      	bne.n	80019f4 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d01b      	beq.n	8001a4a <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8001a12:	4b15      	ldr	r3, [pc, #84]	@ (8001a68 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a15      	ldr	r2, [pc, #84]	@ (8001a6c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8001a18:	fba2 2303 	umull	r2, r3, r2, r3
 8001a1c:	099b      	lsrs	r3, r3, #6
 8001a1e:	2232      	movs	r2, #50	@ 0x32
 8001a20:	fb02 f303 	mul.w	r3, r2, r3
 8001a24:	4a11      	ldr	r2, [pc, #68]	@ (8001a6c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8001a26:	fba2 2303 	umull	r2, r3, r2, r3
 8001a2a:	099b      	lsrs	r3, r3, #6
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8001a30:	e002      	b.n	8001a38 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	3b01      	subs	r3, #1
 8001a36:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8001a38:	4b0a      	ldr	r3, [pc, #40]	@ (8001a64 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001a3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d102      	bne.n	8001a4a <HAL_PWREx_ControlVoltageScaling+0xd6>
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d1f3      	bne.n	8001a32 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d101      	bne.n	8001a54 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e000      	b.n	8001a56 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3714      	adds	r7, #20
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	46020800 	.word	0x46020800
 8001a68:	20000068 	.word	0x20000068
 8001a6c:	10624dd3 	.word	0x10624dd3

08001a70 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8001a74:	4b04      	ldr	r3, [pc, #16]	@ (8001a88 <HAL_PWREx_GetVoltageRange+0x18>)
 8001a76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a78:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	46020800 	.word	0x46020800

08001a8c <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8001a94:	4b22      	ldr	r3, [pc, #136]	@ (8001b20 <HAL_PWREx_ConfigSupply+0x94>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a22      	ldr	r2, [pc, #136]	@ (8001b24 <HAL_PWREx_ConfigSupply+0x98>)
 8001a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a9e:	099b      	lsrs	r3, r3, #6
 8001aa0:	2232      	movs	r2, #50	@ 0x32
 8001aa2:	fb02 f303 	mul.w	r3, r2, r3
 8001aa6:	4a1f      	ldr	r2, [pc, #124]	@ (8001b24 <HAL_PWREx_ConfigSupply+0x98>)
 8001aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8001aac:	099b      	lsrs	r3, r3, #6
 8001aae:	3301      	adds	r3, #1
 8001ab0:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d113      	bne.n	8001ae0 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8001ab8:	4b1b      	ldr	r3, [pc, #108]	@ (8001b28 <HAL_PWREx_ConfigSupply+0x9c>)
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	4a1a      	ldr	r2, [pc, #104]	@ (8001b28 <HAL_PWREx_ConfigSupply+0x9c>)
 8001abe:	f023 0302 	bic.w	r3, r3, #2
 8001ac2:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8001ac4:	e002      	b.n	8001acc <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8001acc:	4b16      	ldr	r3, [pc, #88]	@ (8001b28 <HAL_PWREx_ConfigSupply+0x9c>)
 8001ace:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ad0:	f003 0302 	and.w	r3, r3, #2
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d116      	bne.n	8001b06 <HAL_PWREx_ConfigSupply+0x7a>
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d1f3      	bne.n	8001ac6 <HAL_PWREx_ConfigSupply+0x3a>
 8001ade:	e012      	b.n	8001b06 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8001ae0:	4b11      	ldr	r3, [pc, #68]	@ (8001b28 <HAL_PWREx_ConfigSupply+0x9c>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	4a10      	ldr	r2, [pc, #64]	@ (8001b28 <HAL_PWREx_ConfigSupply+0x9c>)
 8001ae6:	f043 0302 	orr.w	r3, r3, #2
 8001aea:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8001aec:	e002      	b.n	8001af4 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	3b01      	subs	r3, #1
 8001af2:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8001af4:	4b0c      	ldr	r3, [pc, #48]	@ (8001b28 <HAL_PWREx_ConfigSupply+0x9c>)
 8001af6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001af8:	f003 0302 	and.w	r3, r3, #2
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d102      	bne.n	8001b06 <HAL_PWREx_ConfigSupply+0x7a>
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d1f3      	bne.n	8001aee <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d101      	bne.n	8001b10 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e000      	b.n	8001b12 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3714      	adds	r7, #20
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	20000068 	.word	0x20000068
 8001b24:	10624dd3 	.word	0x10624dd3
 8001b28:	46020800 	.word	0x46020800

08001b2c <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8001b30:	4b05      	ldr	r3, [pc, #20]	@ (8001b48 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	4a04      	ldr	r2, [pc, #16]	@ (8001b48 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001b36:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001b3a:	6113      	str	r3, [r2, #16]
}
 8001b3c:	bf00      	nop
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	46020800 	.word	0x46020800

08001b4c <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8001b50:	4b05      	ldr	r3, [pc, #20]	@ (8001b68 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b54:	4a04      	ldr	r2, [pc, #16]	@ (8001b68 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001b56:	f043 0301 	orr.w	r3, r3, #1
 8001b5a:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 8001b5c:	bf00      	nop
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	46020800 	.word	0x46020800

08001b6c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b08e      	sub	sp, #56	@ 0x38
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8001b74:	2300      	movs	r3, #0
 8001b76:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d102      	bne.n	8001b86 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	f000 bec8 	b.w	8002916 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b86:	4b99      	ldr	r3, [pc, #612]	@ (8001dec <HAL_RCC_OscConfig+0x280>)
 8001b88:	69db      	ldr	r3, [r3, #28]
 8001b8a:	f003 030c 	and.w	r3, r3, #12
 8001b8e:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b90:	4b96      	ldr	r3, [pc, #600]	@ (8001dec <HAL_RCC_OscConfig+0x280>)
 8001b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b94:	f003 0303 	and.w	r3, r3, #3
 8001b98:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0310 	and.w	r3, r3, #16
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f000 816c 	beq.w	8001e80 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d007      	beq.n	8001bbe <HAL_RCC_OscConfig+0x52>
 8001bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bb0:	2b0c      	cmp	r3, #12
 8001bb2:	f040 80de 	bne.w	8001d72 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001bb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	f040 80da 	bne.w	8001d72 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	69db      	ldr	r3, [r3, #28]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d102      	bne.n	8001bcc <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	f000 bea5 	b.w	8002916 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001bd0:	4b86      	ldr	r3, [pc, #536]	@ (8001dec <HAL_RCC_OscConfig+0x280>)
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d004      	beq.n	8001be6 <HAL_RCC_OscConfig+0x7a>
 8001bdc:	4b83      	ldr	r3, [pc, #524]	@ (8001dec <HAL_RCC_OscConfig+0x280>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8001be4:	e005      	b.n	8001bf2 <HAL_RCC_OscConfig+0x86>
 8001be6:	4b81      	ldr	r3, [pc, #516]	@ (8001dec <HAL_RCC_OscConfig+0x280>)
 8001be8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001bec:	041b      	lsls	r3, r3, #16
 8001bee:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d255      	bcs.n	8001ca2 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d10a      	bne.n	8001c12 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c00:	4618      	mov	r0, r3
 8001c02:	f001 f9dd 	bl	8002fc0 <RCC_SetFlashLatencyFromMSIRange>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d002      	beq.n	8001c12 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	f000 be82 	b.w	8002916 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001c12:	4b76      	ldr	r3, [pc, #472]	@ (8001dec <HAL_RCC_OscConfig+0x280>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	4a75      	ldr	r2, [pc, #468]	@ (8001dec <HAL_RCC_OscConfig+0x280>)
 8001c18:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001c1c:	6093      	str	r3, [r2, #8]
 8001c1e:	4b73      	ldr	r3, [pc, #460]	@ (8001dec <HAL_RCC_OscConfig+0x280>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c2a:	4970      	ldr	r1, [pc, #448]	@ (8001dec <HAL_RCC_OscConfig+0x280>)
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c34:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001c38:	d309      	bcc.n	8001c4e <HAL_RCC_OscConfig+0xe2>
 8001c3a:	4b6c      	ldr	r3, [pc, #432]	@ (8001dec <HAL_RCC_OscConfig+0x280>)
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	f023 021f 	bic.w	r2, r3, #31
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a1b      	ldr	r3, [r3, #32]
 8001c46:	4969      	ldr	r1, [pc, #420]	@ (8001dec <HAL_RCC_OscConfig+0x280>)
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	60cb      	str	r3, [r1, #12]
 8001c4c:	e07e      	b.n	8001d4c <HAL_RCC_OscConfig+0x1e0>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	da0a      	bge.n	8001c6c <HAL_RCC_OscConfig+0x100>
 8001c56:	4b65      	ldr	r3, [pc, #404]	@ (8001dec <HAL_RCC_OscConfig+0x280>)
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a1b      	ldr	r3, [r3, #32]
 8001c62:	015b      	lsls	r3, r3, #5
 8001c64:	4961      	ldr	r1, [pc, #388]	@ (8001dec <HAL_RCC_OscConfig+0x280>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	60cb      	str	r3, [r1, #12]
 8001c6a:	e06f      	b.n	8001d4c <HAL_RCC_OscConfig+0x1e0>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c74:	d30a      	bcc.n	8001c8c <HAL_RCC_OscConfig+0x120>
 8001c76:	4b5d      	ldr	r3, [pc, #372]	@ (8001dec <HAL_RCC_OscConfig+0x280>)
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a1b      	ldr	r3, [r3, #32]
 8001c82:	029b      	lsls	r3, r3, #10
 8001c84:	4959      	ldr	r1, [pc, #356]	@ (8001dec <HAL_RCC_OscConfig+0x280>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	60cb      	str	r3, [r1, #12]
 8001c8a:	e05f      	b.n	8001d4c <HAL_RCC_OscConfig+0x1e0>
 8001c8c:	4b57      	ldr	r3, [pc, #348]	@ (8001dec <HAL_RCC_OscConfig+0x280>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6a1b      	ldr	r3, [r3, #32]
 8001c98:	03db      	lsls	r3, r3, #15
 8001c9a:	4954      	ldr	r1, [pc, #336]	@ (8001dec <HAL_RCC_OscConfig+0x280>)
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	60cb      	str	r3, [r1, #12]
 8001ca0:	e054      	b.n	8001d4c <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001ca2:	4b52      	ldr	r3, [pc, #328]	@ (8001dec <HAL_RCC_OscConfig+0x280>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	4a51      	ldr	r2, [pc, #324]	@ (8001dec <HAL_RCC_OscConfig+0x280>)
 8001ca8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001cac:	6093      	str	r3, [r2, #8]
 8001cae:	4b4f      	ldr	r3, [pc, #316]	@ (8001dec <HAL_RCC_OscConfig+0x280>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cba:	494c      	ldr	r1, [pc, #304]	@ (8001dec <HAL_RCC_OscConfig+0x280>)
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001cc8:	d309      	bcc.n	8001cde <HAL_RCC_OscConfig+0x172>
 8001cca:	4b48      	ldr	r3, [pc, #288]	@ (8001dec <HAL_RCC_OscConfig+0x280>)
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	f023 021f 	bic.w	r2, r3, #31
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a1b      	ldr	r3, [r3, #32]
 8001cd6:	4945      	ldr	r1, [pc, #276]	@ (8001dec <HAL_RCC_OscConfig+0x280>)
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	60cb      	str	r3, [r1, #12]
 8001cdc:	e028      	b.n	8001d30 <HAL_RCC_OscConfig+0x1c4>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	da0a      	bge.n	8001cfc <HAL_RCC_OscConfig+0x190>
 8001ce6:	4b41      	ldr	r3, [pc, #260]	@ (8001dec <HAL_RCC_OscConfig+0x280>)
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a1b      	ldr	r3, [r3, #32]
 8001cf2:	015b      	lsls	r3, r3, #5
 8001cf4:	493d      	ldr	r1, [pc, #244]	@ (8001dec <HAL_RCC_OscConfig+0x280>)
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	60cb      	str	r3, [r1, #12]
 8001cfa:	e019      	b.n	8001d30 <HAL_RCC_OscConfig+0x1c4>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d04:	d30a      	bcc.n	8001d1c <HAL_RCC_OscConfig+0x1b0>
 8001d06:	4b39      	ldr	r3, [pc, #228]	@ (8001dec <HAL_RCC_OscConfig+0x280>)
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a1b      	ldr	r3, [r3, #32]
 8001d12:	029b      	lsls	r3, r3, #10
 8001d14:	4935      	ldr	r1, [pc, #212]	@ (8001dec <HAL_RCC_OscConfig+0x280>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	60cb      	str	r3, [r1, #12]
 8001d1a:	e009      	b.n	8001d30 <HAL_RCC_OscConfig+0x1c4>
 8001d1c:	4b33      	ldr	r3, [pc, #204]	@ (8001dec <HAL_RCC_OscConfig+0x280>)
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a1b      	ldr	r3, [r3, #32]
 8001d28:	03db      	lsls	r3, r3, #15
 8001d2a:	4930      	ldr	r1, [pc, #192]	@ (8001dec <HAL_RCC_OscConfig+0x280>)
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d10a      	bne.n	8001d4c <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f001 f940 	bl	8002fc0 <RCC_SetFlashLatencyFromMSIRange>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d002      	beq.n	8001d4c <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	f000 bde5 	b.w	8002916 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8001d4c:	f001 f8e2 	bl	8002f14 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001d50:	4b27      	ldr	r3, [pc, #156]	@ (8001df0 <HAL_RCC_OscConfig+0x284>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff f853 	bl	8000e00 <HAL_InitTick>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8001d60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	f000 808a 	beq.w	8001e7e <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8001d6a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d6e:	f000 bdd2 	b.w	8002916 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	69db      	ldr	r3, [r3, #28]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d066      	beq.n	8001e48 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8001d7a:	4b1c      	ldr	r3, [pc, #112]	@ (8001dec <HAL_RCC_OscConfig+0x280>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a1b      	ldr	r2, [pc, #108]	@ (8001dec <HAL_RCC_OscConfig+0x280>)
 8001d80:	f043 0301 	orr.w	r3, r3, #1
 8001d84:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001d86:	f7ff f8c5 	bl	8000f14 <HAL_GetTick>
 8001d8a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8001d8c:	e009      	b.n	8001da2 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d8e:	f7ff f8c1 	bl	8000f14 <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d902      	bls.n	8001da2 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	f000 bdba 	b.w	8002916 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8001da2:	4b12      	ldr	r3, [pc, #72]	@ (8001dec <HAL_RCC_OscConfig+0x280>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0304 	and.w	r3, r3, #4
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d0ef      	beq.n	8001d8e <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001dae:	4b0f      	ldr	r3, [pc, #60]	@ (8001dec <HAL_RCC_OscConfig+0x280>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	4a0e      	ldr	r2, [pc, #56]	@ (8001dec <HAL_RCC_OscConfig+0x280>)
 8001db4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001db8:	6093      	str	r3, [r2, #8]
 8001dba:	4b0c      	ldr	r3, [pc, #48]	@ (8001dec <HAL_RCC_OscConfig+0x280>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dc6:	4909      	ldr	r1, [pc, #36]	@ (8001dec <HAL_RCC_OscConfig+0x280>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001dd4:	d30e      	bcc.n	8001df4 <HAL_RCC_OscConfig+0x288>
 8001dd6:	4b05      	ldr	r3, [pc, #20]	@ (8001dec <HAL_RCC_OscConfig+0x280>)
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	f023 021f 	bic.w	r2, r3, #31
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6a1b      	ldr	r3, [r3, #32]
 8001de2:	4902      	ldr	r1, [pc, #8]	@ (8001dec <HAL_RCC_OscConfig+0x280>)
 8001de4:	4313      	orrs	r3, r2
 8001de6:	60cb      	str	r3, [r1, #12]
 8001de8:	e04a      	b.n	8001e80 <HAL_RCC_OscConfig+0x314>
 8001dea:	bf00      	nop
 8001dec:	46020c00 	.word	0x46020c00
 8001df0:	20000088 	.word	0x20000088
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	da0a      	bge.n	8001e12 <HAL_RCC_OscConfig+0x2a6>
 8001dfc:	4b98      	ldr	r3, [pc, #608]	@ (8002060 <HAL_RCC_OscConfig+0x4f4>)
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6a1b      	ldr	r3, [r3, #32]
 8001e08:	015b      	lsls	r3, r3, #5
 8001e0a:	4995      	ldr	r1, [pc, #596]	@ (8002060 <HAL_RCC_OscConfig+0x4f4>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	60cb      	str	r3, [r1, #12]
 8001e10:	e036      	b.n	8001e80 <HAL_RCC_OscConfig+0x314>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e1a:	d30a      	bcc.n	8001e32 <HAL_RCC_OscConfig+0x2c6>
 8001e1c:	4b90      	ldr	r3, [pc, #576]	@ (8002060 <HAL_RCC_OscConfig+0x4f4>)
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a1b      	ldr	r3, [r3, #32]
 8001e28:	029b      	lsls	r3, r3, #10
 8001e2a:	498d      	ldr	r1, [pc, #564]	@ (8002060 <HAL_RCC_OscConfig+0x4f4>)
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	60cb      	str	r3, [r1, #12]
 8001e30:	e026      	b.n	8001e80 <HAL_RCC_OscConfig+0x314>
 8001e32:	4b8b      	ldr	r3, [pc, #556]	@ (8002060 <HAL_RCC_OscConfig+0x4f4>)
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a1b      	ldr	r3, [r3, #32]
 8001e3e:	03db      	lsls	r3, r3, #15
 8001e40:	4987      	ldr	r1, [pc, #540]	@ (8002060 <HAL_RCC_OscConfig+0x4f4>)
 8001e42:	4313      	orrs	r3, r2
 8001e44:	60cb      	str	r3, [r1, #12]
 8001e46:	e01b      	b.n	8001e80 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8001e48:	4b85      	ldr	r3, [pc, #532]	@ (8002060 <HAL_RCC_OscConfig+0x4f4>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a84      	ldr	r2, [pc, #528]	@ (8002060 <HAL_RCC_OscConfig+0x4f4>)
 8001e4e:	f023 0301 	bic.w	r3, r3, #1
 8001e52:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001e54:	f7ff f85e 	bl	8000f14 <HAL_GetTick>
 8001e58:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8001e5a:	e009      	b.n	8001e70 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e5c:	f7ff f85a 	bl	8000f14 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d902      	bls.n	8001e70 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	f000 bd53 	b.w	8002916 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8001e70:	4b7b      	ldr	r3, [pc, #492]	@ (8002060 <HAL_RCC_OscConfig+0x4f4>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0304 	and.w	r3, r3, #4
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d1ef      	bne.n	8001e5c <HAL_RCC_OscConfig+0x2f0>
 8001e7c:	e000      	b.n	8001e80 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001e7e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0301 	and.w	r3, r3, #1
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	f000 808b 	beq.w	8001fa4 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e90:	2b08      	cmp	r3, #8
 8001e92:	d005      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x334>
 8001e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e96:	2b0c      	cmp	r3, #12
 8001e98:	d109      	bne.n	8001eae <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e9c:	2b03      	cmp	r3, #3
 8001e9e:	d106      	bne.n	8001eae <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d17d      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	f000 bd34 	b.w	8002916 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001eb6:	d106      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x35a>
 8001eb8:	4b69      	ldr	r3, [pc, #420]	@ (8002060 <HAL_RCC_OscConfig+0x4f4>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a68      	ldr	r2, [pc, #416]	@ (8002060 <HAL_RCC_OscConfig+0x4f4>)
 8001ebe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ec2:	6013      	str	r3, [r2, #0]
 8001ec4:	e041      	b.n	8001f4a <HAL_RCC_OscConfig+0x3de>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ece:	d112      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x38a>
 8001ed0:	4b63      	ldr	r3, [pc, #396]	@ (8002060 <HAL_RCC_OscConfig+0x4f4>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a62      	ldr	r2, [pc, #392]	@ (8002060 <HAL_RCC_OscConfig+0x4f4>)
 8001ed6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001eda:	6013      	str	r3, [r2, #0]
 8001edc:	4b60      	ldr	r3, [pc, #384]	@ (8002060 <HAL_RCC_OscConfig+0x4f4>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a5f      	ldr	r2, [pc, #380]	@ (8002060 <HAL_RCC_OscConfig+0x4f4>)
 8001ee2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001ee6:	6013      	str	r3, [r2, #0]
 8001ee8:	4b5d      	ldr	r3, [pc, #372]	@ (8002060 <HAL_RCC_OscConfig+0x4f4>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a5c      	ldr	r2, [pc, #368]	@ (8002060 <HAL_RCC_OscConfig+0x4f4>)
 8001eee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ef2:	6013      	str	r3, [r2, #0]
 8001ef4:	e029      	b.n	8001f4a <HAL_RCC_OscConfig+0x3de>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8001efe:	d112      	bne.n	8001f26 <HAL_RCC_OscConfig+0x3ba>
 8001f00:	4b57      	ldr	r3, [pc, #348]	@ (8002060 <HAL_RCC_OscConfig+0x4f4>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a56      	ldr	r2, [pc, #344]	@ (8002060 <HAL_RCC_OscConfig+0x4f4>)
 8001f06:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f0a:	6013      	str	r3, [r2, #0]
 8001f0c:	4b54      	ldr	r3, [pc, #336]	@ (8002060 <HAL_RCC_OscConfig+0x4f4>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a53      	ldr	r2, [pc, #332]	@ (8002060 <HAL_RCC_OscConfig+0x4f4>)
 8001f12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001f16:	6013      	str	r3, [r2, #0]
 8001f18:	4b51      	ldr	r3, [pc, #324]	@ (8002060 <HAL_RCC_OscConfig+0x4f4>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a50      	ldr	r2, [pc, #320]	@ (8002060 <HAL_RCC_OscConfig+0x4f4>)
 8001f1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f22:	6013      	str	r3, [r2, #0]
 8001f24:	e011      	b.n	8001f4a <HAL_RCC_OscConfig+0x3de>
 8001f26:	4b4e      	ldr	r3, [pc, #312]	@ (8002060 <HAL_RCC_OscConfig+0x4f4>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a4d      	ldr	r2, [pc, #308]	@ (8002060 <HAL_RCC_OscConfig+0x4f4>)
 8001f2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f30:	6013      	str	r3, [r2, #0]
 8001f32:	4b4b      	ldr	r3, [pc, #300]	@ (8002060 <HAL_RCC_OscConfig+0x4f4>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a4a      	ldr	r2, [pc, #296]	@ (8002060 <HAL_RCC_OscConfig+0x4f4>)
 8001f38:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f3c:	6013      	str	r3, [r2, #0]
 8001f3e:	4b48      	ldr	r3, [pc, #288]	@ (8002060 <HAL_RCC_OscConfig+0x4f4>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a47      	ldr	r2, [pc, #284]	@ (8002060 <HAL_RCC_OscConfig+0x4f4>)
 8001f44:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001f48:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d014      	beq.n	8001f7c <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8001f52:	f7fe ffdf 	bl	8000f14 <HAL_GetTick>
 8001f56:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f58:	e009      	b.n	8001f6e <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f5a:	f7fe ffdb 	bl	8000f14 <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b64      	cmp	r3, #100	@ 0x64
 8001f66:	d902      	bls.n	8001f6e <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	f000 bcd4 	b.w	8002916 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f6e:	4b3c      	ldr	r3, [pc, #240]	@ (8002060 <HAL_RCC_OscConfig+0x4f4>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d0ef      	beq.n	8001f5a <HAL_RCC_OscConfig+0x3ee>
 8001f7a:	e013      	b.n	8001fa4 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8001f7c:	f7fe ffca 	bl	8000f14 <HAL_GetTick>
 8001f80:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f82:	e009      	b.n	8001f98 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f84:	f7fe ffc6 	bl	8000f14 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b64      	cmp	r3, #100	@ 0x64
 8001f90:	d902      	bls.n	8001f98 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	f000 bcbf 	b.w	8002916 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f98:	4b31      	ldr	r3, [pc, #196]	@ (8002060 <HAL_RCC_OscConfig+0x4f4>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d1ef      	bne.n	8001f84 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0302 	and.w	r3, r3, #2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d05f      	beq.n	8002070 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fb2:	2b04      	cmp	r3, #4
 8001fb4:	d005      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x456>
 8001fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fb8:	2b0c      	cmp	r3, #12
 8001fba:	d114      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001fbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d111      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d102      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	f000 bca3 	b.w	8002916 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8001fd0:	4b23      	ldr	r3, [pc, #140]	@ (8002060 <HAL_RCC_OscConfig+0x4f4>)
 8001fd2:	691b      	ldr	r3, [r3, #16]
 8001fd4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	691b      	ldr	r3, [r3, #16]
 8001fdc:	041b      	lsls	r3, r3, #16
 8001fde:	4920      	ldr	r1, [pc, #128]	@ (8002060 <HAL_RCC_OscConfig+0x4f4>)
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001fe4:	e044      	b.n	8002070 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d024      	beq.n	8002038 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8001fee:	4b1c      	ldr	r3, [pc, #112]	@ (8002060 <HAL_RCC_OscConfig+0x4f4>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a1b      	ldr	r2, [pc, #108]	@ (8002060 <HAL_RCC_OscConfig+0x4f4>)
 8001ff4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ff8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001ffa:	f7fe ff8b 	bl	8000f14 <HAL_GetTick>
 8001ffe:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002000:	e009      	b.n	8002016 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002002:	f7fe ff87 	bl	8000f14 <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	2b02      	cmp	r3, #2
 800200e:	d902      	bls.n	8002016 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	f000 bc80 	b.w	8002916 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002016:	4b12      	ldr	r3, [pc, #72]	@ (8002060 <HAL_RCC_OscConfig+0x4f4>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800201e:	2b00      	cmp	r3, #0
 8002020:	d0ef      	beq.n	8002002 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8002022:	4b0f      	ldr	r3, [pc, #60]	@ (8002060 <HAL_RCC_OscConfig+0x4f4>)
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	041b      	lsls	r3, r3, #16
 8002030:	490b      	ldr	r1, [pc, #44]	@ (8002060 <HAL_RCC_OscConfig+0x4f4>)
 8002032:	4313      	orrs	r3, r2
 8002034:	610b      	str	r3, [r1, #16]
 8002036:	e01b      	b.n	8002070 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8002038:	4b09      	ldr	r3, [pc, #36]	@ (8002060 <HAL_RCC_OscConfig+0x4f4>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a08      	ldr	r2, [pc, #32]	@ (8002060 <HAL_RCC_OscConfig+0x4f4>)
 800203e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002042:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002044:	f7fe ff66 	bl	8000f14 <HAL_GetTick>
 8002048:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800204a:	e00b      	b.n	8002064 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800204c:	f7fe ff62 	bl	8000f14 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d904      	bls.n	8002064 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	f000 bc5b 	b.w	8002916 <HAL_RCC_OscConfig+0xdaa>
 8002060:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002064:	4baf      	ldr	r3, [pc, #700]	@ (8002324 <HAL_RCC_OscConfig+0x7b8>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800206c:	2b00      	cmp	r3, #0
 800206e:	d1ed      	bne.n	800204c <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0308 	and.w	r3, r3, #8
 8002078:	2b00      	cmp	r3, #0
 800207a:	f000 80c8 	beq.w	800220e <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800207e:	2300      	movs	r3, #0
 8002080:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002084:	4ba7      	ldr	r3, [pc, #668]	@ (8002324 <HAL_RCC_OscConfig+0x7b8>)
 8002086:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800208a:	f003 0304 	and.w	r3, r3, #4
 800208e:	2b00      	cmp	r3, #0
 8002090:	d111      	bne.n	80020b6 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002092:	4ba4      	ldr	r3, [pc, #656]	@ (8002324 <HAL_RCC_OscConfig+0x7b8>)
 8002094:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002098:	4aa2      	ldr	r2, [pc, #648]	@ (8002324 <HAL_RCC_OscConfig+0x7b8>)
 800209a:	f043 0304 	orr.w	r3, r3, #4
 800209e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80020a2:	4ba0      	ldr	r3, [pc, #640]	@ (8002324 <HAL_RCC_OscConfig+0x7b8>)
 80020a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020a8:	f003 0304 	and.w	r3, r3, #4
 80020ac:	617b      	str	r3, [r7, #20]
 80020ae:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 80020b0:	2301      	movs	r3, #1
 80020b2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80020b6:	4b9c      	ldr	r3, [pc, #624]	@ (8002328 <HAL_RCC_OscConfig+0x7bc>)
 80020b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d119      	bne.n	80020f6 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80020c2:	4b99      	ldr	r3, [pc, #612]	@ (8002328 <HAL_RCC_OscConfig+0x7bc>)
 80020c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020c6:	4a98      	ldr	r2, [pc, #608]	@ (8002328 <HAL_RCC_OscConfig+0x7bc>)
 80020c8:	f043 0301 	orr.w	r3, r3, #1
 80020cc:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ce:	f7fe ff21 	bl	8000f14 <HAL_GetTick>
 80020d2:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80020d4:	e009      	b.n	80020ea <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020d6:	f7fe ff1d 	bl	8000f14 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d902      	bls.n	80020ea <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	f000 bc16 	b.w	8002916 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80020ea:	4b8f      	ldr	r3, [pc, #572]	@ (8002328 <HAL_RCC_OscConfig+0x7bc>)
 80020ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d0ef      	beq.n	80020d6 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d05f      	beq.n	80021be <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80020fe:	4b89      	ldr	r3, [pc, #548]	@ (8002324 <HAL_RCC_OscConfig+0x7b8>)
 8002100:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002104:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	699a      	ldr	r2, [r3, #24]
 800210a:	6a3b      	ldr	r3, [r7, #32]
 800210c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002110:	429a      	cmp	r2, r3
 8002112:	d037      	beq.n	8002184 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8002114:	6a3b      	ldr	r3, [r7, #32]
 8002116:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d006      	beq.n	800212c <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800211e:	6a3b      	ldr	r3, [r7, #32]
 8002120:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8002124:	2b00      	cmp	r3, #0
 8002126:	d101      	bne.n	800212c <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e3f4      	b.n	8002916 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800212c:	6a3b      	ldr	r3, [r7, #32]
 800212e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d01b      	beq.n	800216e <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8002136:	4b7b      	ldr	r3, [pc, #492]	@ (8002324 <HAL_RCC_OscConfig+0x7b8>)
 8002138:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800213c:	4a79      	ldr	r2, [pc, #484]	@ (8002324 <HAL_RCC_OscConfig+0x7b8>)
 800213e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8002142:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8002146:	f7fe fee5 	bl	8000f14 <HAL_GetTick>
 800214a:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800214c:	e008      	b.n	8002160 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800214e:	f7fe fee1 	bl	8000f14 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	2b05      	cmp	r3, #5
 800215a:	d901      	bls.n	8002160 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e3da      	b.n	8002916 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002160:	4b70      	ldr	r3, [pc, #448]	@ (8002324 <HAL_RCC_OscConfig+0x7b8>)
 8002162:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002166:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d1ef      	bne.n	800214e <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800216e:	4b6d      	ldr	r3, [pc, #436]	@ (8002324 <HAL_RCC_OscConfig+0x7b8>)
 8002170:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002174:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	4969      	ldr	r1, [pc, #420]	@ (8002324 <HAL_RCC_OscConfig+0x7b8>)
 800217e:	4313      	orrs	r3, r2
 8002180:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8002184:	4b67      	ldr	r3, [pc, #412]	@ (8002324 <HAL_RCC_OscConfig+0x7b8>)
 8002186:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800218a:	4a66      	ldr	r2, [pc, #408]	@ (8002324 <HAL_RCC_OscConfig+0x7b8>)
 800218c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002190:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8002194:	f7fe febe 	bl	8000f14 <HAL_GetTick>
 8002198:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800219c:	f7fe feba 	bl	8000f14 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b05      	cmp	r3, #5
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e3b3      	b.n	8002916 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80021ae:	4b5d      	ldr	r3, [pc, #372]	@ (8002324 <HAL_RCC_OscConfig+0x7b8>)
 80021b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80021b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d0ef      	beq.n	800219c <HAL_RCC_OscConfig+0x630>
 80021bc:	e01b      	b.n	80021f6 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 80021be:	4b59      	ldr	r3, [pc, #356]	@ (8002324 <HAL_RCC_OscConfig+0x7b8>)
 80021c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80021c4:	4a57      	ldr	r2, [pc, #348]	@ (8002324 <HAL_RCC_OscConfig+0x7b8>)
 80021c6:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80021ca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80021ce:	f7fe fea1 	bl	8000f14 <HAL_GetTick>
 80021d2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80021d4:	e008      	b.n	80021e8 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021d6:	f7fe fe9d 	bl	8000f14 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	2b05      	cmp	r3, #5
 80021e2:	d901      	bls.n	80021e8 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e396      	b.n	8002916 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80021e8:	4b4e      	ldr	r3, [pc, #312]	@ (8002324 <HAL_RCC_OscConfig+0x7b8>)
 80021ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80021ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1ef      	bne.n	80021d6 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80021f6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d107      	bne.n	800220e <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021fe:	4b49      	ldr	r3, [pc, #292]	@ (8002324 <HAL_RCC_OscConfig+0x7b8>)
 8002200:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002204:	4a47      	ldr	r2, [pc, #284]	@ (8002324 <HAL_RCC_OscConfig+0x7b8>)
 8002206:	f023 0304 	bic.w	r3, r3, #4
 800220a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0304 	and.w	r3, r3, #4
 8002216:	2b00      	cmp	r3, #0
 8002218:	f000 8111 	beq.w	800243e <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 800221c:	2300      	movs	r3, #0
 800221e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002222:	4b40      	ldr	r3, [pc, #256]	@ (8002324 <HAL_RCC_OscConfig+0x7b8>)
 8002224:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002228:	f003 0304 	and.w	r3, r3, #4
 800222c:	2b00      	cmp	r3, #0
 800222e:	d111      	bne.n	8002254 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002230:	4b3c      	ldr	r3, [pc, #240]	@ (8002324 <HAL_RCC_OscConfig+0x7b8>)
 8002232:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002236:	4a3b      	ldr	r2, [pc, #236]	@ (8002324 <HAL_RCC_OscConfig+0x7b8>)
 8002238:	f043 0304 	orr.w	r3, r3, #4
 800223c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002240:	4b38      	ldr	r3, [pc, #224]	@ (8002324 <HAL_RCC_OscConfig+0x7b8>)
 8002242:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002246:	f003 0304 	and.w	r3, r3, #4
 800224a:	613b      	str	r3, [r7, #16]
 800224c:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800224e:	2301      	movs	r3, #1
 8002250:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002254:	4b34      	ldr	r3, [pc, #208]	@ (8002328 <HAL_RCC_OscConfig+0x7bc>)
 8002256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	2b00      	cmp	r3, #0
 800225e:	d118      	bne.n	8002292 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002260:	4b31      	ldr	r3, [pc, #196]	@ (8002328 <HAL_RCC_OscConfig+0x7bc>)
 8002262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002264:	4a30      	ldr	r2, [pc, #192]	@ (8002328 <HAL_RCC_OscConfig+0x7bc>)
 8002266:	f043 0301 	orr.w	r3, r3, #1
 800226a:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800226c:	f7fe fe52 	bl	8000f14 <HAL_GetTick>
 8002270:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002272:	e008      	b.n	8002286 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002274:	f7fe fe4e 	bl	8000f14 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b02      	cmp	r3, #2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e347      	b.n	8002916 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002286:	4b28      	ldr	r3, [pc, #160]	@ (8002328 <HAL_RCC_OscConfig+0x7bc>)
 8002288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	2b00      	cmp	r3, #0
 8002290:	d0f0      	beq.n	8002274 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	2b00      	cmp	r3, #0
 800229c:	d01f      	beq.n	80022de <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f003 0304 	and.w	r3, r3, #4
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d010      	beq.n	80022cc <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80022aa:	4b1e      	ldr	r3, [pc, #120]	@ (8002324 <HAL_RCC_OscConfig+0x7b8>)
 80022ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80022b0:	4a1c      	ldr	r2, [pc, #112]	@ (8002324 <HAL_RCC_OscConfig+0x7b8>)
 80022b2:	f043 0304 	orr.w	r3, r3, #4
 80022b6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80022ba:	4b1a      	ldr	r3, [pc, #104]	@ (8002324 <HAL_RCC_OscConfig+0x7b8>)
 80022bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80022c0:	4a18      	ldr	r2, [pc, #96]	@ (8002324 <HAL_RCC_OscConfig+0x7b8>)
 80022c2:	f043 0301 	orr.w	r3, r3, #1
 80022c6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80022ca:	e018      	b.n	80022fe <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80022cc:	4b15      	ldr	r3, [pc, #84]	@ (8002324 <HAL_RCC_OscConfig+0x7b8>)
 80022ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80022d2:	4a14      	ldr	r2, [pc, #80]	@ (8002324 <HAL_RCC_OscConfig+0x7b8>)
 80022d4:	f043 0301 	orr.w	r3, r3, #1
 80022d8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80022dc:	e00f      	b.n	80022fe <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80022de:	4b11      	ldr	r3, [pc, #68]	@ (8002324 <HAL_RCC_OscConfig+0x7b8>)
 80022e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80022e4:	4a0f      	ldr	r2, [pc, #60]	@ (8002324 <HAL_RCC_OscConfig+0x7b8>)
 80022e6:	f023 0301 	bic.w	r3, r3, #1
 80022ea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80022ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002324 <HAL_RCC_OscConfig+0x7b8>)
 80022f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80022f4:	4a0b      	ldr	r2, [pc, #44]	@ (8002324 <HAL_RCC_OscConfig+0x7b8>)
 80022f6:	f023 0304 	bic.w	r3, r3, #4
 80022fa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d057      	beq.n	80023b6 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8002306:	f7fe fe05 	bl	8000f14 <HAL_GetTick>
 800230a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800230c:	e00e      	b.n	800232c <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800230e:	f7fe fe01 	bl	8000f14 <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	f241 3288 	movw	r2, #5000	@ 0x1388
 800231c:	4293      	cmp	r3, r2
 800231e:	d905      	bls.n	800232c <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e2f8      	b.n	8002916 <HAL_RCC_OscConfig+0xdaa>
 8002324:	46020c00 	.word	0x46020c00
 8002328:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800232c:	4b9c      	ldr	r3, [pc, #624]	@ (80025a0 <HAL_RCC_OscConfig+0xa34>)
 800232e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d0e9      	beq.n	800230e <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002342:	2b00      	cmp	r3, #0
 8002344:	d01b      	beq.n	800237e <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002346:	4b96      	ldr	r3, [pc, #600]	@ (80025a0 <HAL_RCC_OscConfig+0xa34>)
 8002348:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800234c:	4a94      	ldr	r2, [pc, #592]	@ (80025a0 <HAL_RCC_OscConfig+0xa34>)
 800234e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002352:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002356:	e00a      	b.n	800236e <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002358:	f7fe fddc 	bl	8000f14 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002366:	4293      	cmp	r3, r2
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e2d3      	b.n	8002916 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800236e:	4b8c      	ldr	r3, [pc, #560]	@ (80025a0 <HAL_RCC_OscConfig+0xa34>)
 8002370:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002374:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002378:	2b00      	cmp	r3, #0
 800237a:	d0ed      	beq.n	8002358 <HAL_RCC_OscConfig+0x7ec>
 800237c:	e053      	b.n	8002426 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800237e:	4b88      	ldr	r3, [pc, #544]	@ (80025a0 <HAL_RCC_OscConfig+0xa34>)
 8002380:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002384:	4a86      	ldr	r2, [pc, #536]	@ (80025a0 <HAL_RCC_OscConfig+0xa34>)
 8002386:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800238a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800238e:	e00a      	b.n	80023a6 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002390:	f7fe fdc0 	bl	8000f14 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800239e:	4293      	cmp	r3, r2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e2b7      	b.n	8002916 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80023a6:	4b7e      	ldr	r3, [pc, #504]	@ (80025a0 <HAL_RCC_OscConfig+0xa34>)
 80023a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80023ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d1ed      	bne.n	8002390 <HAL_RCC_OscConfig+0x824>
 80023b4:	e037      	b.n	8002426 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 80023b6:	f7fe fdad 	bl	8000f14 <HAL_GetTick>
 80023ba:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023bc:	e00a      	b.n	80023d4 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023be:	f7fe fda9 	bl	8000f14 <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d901      	bls.n	80023d4 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e2a0      	b.n	8002916 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023d4:	4b72      	ldr	r3, [pc, #456]	@ (80025a0 <HAL_RCC_OscConfig+0xa34>)
 80023d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d1ed      	bne.n	80023be <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80023e2:	4b6f      	ldr	r3, [pc, #444]	@ (80025a0 <HAL_RCC_OscConfig+0xa34>)
 80023e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80023e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d01a      	beq.n	8002426 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80023f0:	4b6b      	ldr	r3, [pc, #428]	@ (80025a0 <HAL_RCC_OscConfig+0xa34>)
 80023f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80023f6:	4a6a      	ldr	r2, [pc, #424]	@ (80025a0 <HAL_RCC_OscConfig+0xa34>)
 80023f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80023fc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002400:	e00a      	b.n	8002418 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002402:	f7fe fd87 	bl	8000f14 <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002410:	4293      	cmp	r3, r2
 8002412:	d901      	bls.n	8002418 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e27e      	b.n	8002916 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002418:	4b61      	ldr	r3, [pc, #388]	@ (80025a0 <HAL_RCC_OscConfig+0xa34>)
 800241a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800241e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1ed      	bne.n	8002402 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002426:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800242a:	2b01      	cmp	r3, #1
 800242c:	d107      	bne.n	800243e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800242e:	4b5c      	ldr	r3, [pc, #368]	@ (80025a0 <HAL_RCC_OscConfig+0xa34>)
 8002430:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002434:	4a5a      	ldr	r2, [pc, #360]	@ (80025a0 <HAL_RCC_OscConfig+0xa34>)
 8002436:	f023 0304 	bic.w	r3, r3, #4
 800243a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0320 	and.w	r3, r3, #32
 8002446:	2b00      	cmp	r3, #0
 8002448:	d036      	beq.n	80024b8 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800244e:	2b00      	cmp	r3, #0
 8002450:	d019      	beq.n	8002486 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8002452:	4b53      	ldr	r3, [pc, #332]	@ (80025a0 <HAL_RCC_OscConfig+0xa34>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a52      	ldr	r2, [pc, #328]	@ (80025a0 <HAL_RCC_OscConfig+0xa34>)
 8002458:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800245c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800245e:	f7fe fd59 	bl	8000f14 <HAL_GetTick>
 8002462:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002464:	e008      	b.n	8002478 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002466:	f7fe fd55 	bl	8000f14 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b02      	cmp	r3, #2
 8002472:	d901      	bls.n	8002478 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e24e      	b.n	8002916 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002478:	4b49      	ldr	r3, [pc, #292]	@ (80025a0 <HAL_RCC_OscConfig+0xa34>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d0f0      	beq.n	8002466 <HAL_RCC_OscConfig+0x8fa>
 8002484:	e018      	b.n	80024b8 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8002486:	4b46      	ldr	r3, [pc, #280]	@ (80025a0 <HAL_RCC_OscConfig+0xa34>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a45      	ldr	r2, [pc, #276]	@ (80025a0 <HAL_RCC_OscConfig+0xa34>)
 800248c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002490:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002492:	f7fe fd3f 	bl	8000f14 <HAL_GetTick>
 8002496:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002498:	e008      	b.n	80024ac <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800249a:	f7fe fd3b 	bl	8000f14 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e234      	b.n	8002916 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80024ac:	4b3c      	ldr	r3, [pc, #240]	@ (80025a0 <HAL_RCC_OscConfig+0xa34>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d1f0      	bne.n	800249a <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d036      	beq.n	8002532 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d019      	beq.n	8002500 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80024cc:	4b34      	ldr	r3, [pc, #208]	@ (80025a0 <HAL_RCC_OscConfig+0xa34>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a33      	ldr	r2, [pc, #204]	@ (80025a0 <HAL_RCC_OscConfig+0xa34>)
 80024d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024d6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80024d8:	f7fe fd1c 	bl	8000f14 <HAL_GetTick>
 80024dc:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80024e0:	f7fe fd18 	bl	8000f14 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e211      	b.n	8002916 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80024f2:	4b2b      	ldr	r3, [pc, #172]	@ (80025a0 <HAL_RCC_OscConfig+0xa34>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d0f0      	beq.n	80024e0 <HAL_RCC_OscConfig+0x974>
 80024fe:	e018      	b.n	8002532 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8002500:	4b27      	ldr	r3, [pc, #156]	@ (80025a0 <HAL_RCC_OscConfig+0xa34>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a26      	ldr	r2, [pc, #152]	@ (80025a0 <HAL_RCC_OscConfig+0xa34>)
 8002506:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800250a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800250c:	f7fe fd02 	bl	8000f14 <HAL_GetTick>
 8002510:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8002512:	e008      	b.n	8002526 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002514:	f7fe fcfe 	bl	8000f14 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b02      	cmp	r3, #2
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e1f7      	b.n	8002916 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8002526:	4b1e      	ldr	r3, [pc, #120]	@ (80025a0 <HAL_RCC_OscConfig+0xa34>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d1f0      	bne.n	8002514 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800253a:	2b00      	cmp	r3, #0
 800253c:	d07f      	beq.n	800263e <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002542:	2b00      	cmp	r3, #0
 8002544:	d062      	beq.n	800260c <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8002546:	4b16      	ldr	r3, [pc, #88]	@ (80025a0 <HAL_RCC_OscConfig+0xa34>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	4a15      	ldr	r2, [pc, #84]	@ (80025a0 <HAL_RCC_OscConfig+0xa34>)
 800254c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002550:	6093      	str	r3, [r2, #8]
 8002552:	4b13      	ldr	r3, [pc, #76]	@ (80025a0 <HAL_RCC_OscConfig+0xa34>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800255e:	4910      	ldr	r1, [pc, #64]	@ (80025a0 <HAL_RCC_OscConfig+0xa34>)
 8002560:	4313      	orrs	r3, r2
 8002562:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002568:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800256c:	d309      	bcc.n	8002582 <HAL_RCC_OscConfig+0xa16>
 800256e:	4b0c      	ldr	r3, [pc, #48]	@ (80025a0 <HAL_RCC_OscConfig+0xa34>)
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	f023 021f 	bic.w	r2, r3, #31
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a1b      	ldr	r3, [r3, #32]
 800257a:	4909      	ldr	r1, [pc, #36]	@ (80025a0 <HAL_RCC_OscConfig+0xa34>)
 800257c:	4313      	orrs	r3, r2
 800257e:	60cb      	str	r3, [r1, #12]
 8002580:	e02a      	b.n	80025d8 <HAL_RCC_OscConfig+0xa6c>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002586:	2b00      	cmp	r3, #0
 8002588:	da0c      	bge.n	80025a4 <HAL_RCC_OscConfig+0xa38>
 800258a:	4b05      	ldr	r3, [pc, #20]	@ (80025a0 <HAL_RCC_OscConfig+0xa34>)
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a1b      	ldr	r3, [r3, #32]
 8002596:	015b      	lsls	r3, r3, #5
 8002598:	4901      	ldr	r1, [pc, #4]	@ (80025a0 <HAL_RCC_OscConfig+0xa34>)
 800259a:	4313      	orrs	r3, r2
 800259c:	60cb      	str	r3, [r1, #12]
 800259e:	e01b      	b.n	80025d8 <HAL_RCC_OscConfig+0xa6c>
 80025a0:	46020c00 	.word	0x46020c00
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025ac:	d30a      	bcc.n	80025c4 <HAL_RCC_OscConfig+0xa58>
 80025ae:	4ba1      	ldr	r3, [pc, #644]	@ (8002834 <HAL_RCC_OscConfig+0xcc8>)
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a1b      	ldr	r3, [r3, #32]
 80025ba:	029b      	lsls	r3, r3, #10
 80025bc:	499d      	ldr	r1, [pc, #628]	@ (8002834 <HAL_RCC_OscConfig+0xcc8>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	60cb      	str	r3, [r1, #12]
 80025c2:	e009      	b.n	80025d8 <HAL_RCC_OscConfig+0xa6c>
 80025c4:	4b9b      	ldr	r3, [pc, #620]	@ (8002834 <HAL_RCC_OscConfig+0xcc8>)
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a1b      	ldr	r3, [r3, #32]
 80025d0:	03db      	lsls	r3, r3, #15
 80025d2:	4998      	ldr	r1, [pc, #608]	@ (8002834 <HAL_RCC_OscConfig+0xcc8>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80025d8:	4b96      	ldr	r3, [pc, #600]	@ (8002834 <HAL_RCC_OscConfig+0xcc8>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a95      	ldr	r2, [pc, #596]	@ (8002834 <HAL_RCC_OscConfig+0xcc8>)
 80025de:	f043 0310 	orr.w	r3, r3, #16
 80025e2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80025e4:	f7fe fc96 	bl	8000f14 <HAL_GetTick>
 80025e8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80025ec:	f7fe fc92 	bl	8000f14 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e18b      	b.n	8002916 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80025fe:	4b8d      	ldr	r3, [pc, #564]	@ (8002834 <HAL_RCC_OscConfig+0xcc8>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0320 	and.w	r3, r3, #32
 8002606:	2b00      	cmp	r3, #0
 8002608:	d0f0      	beq.n	80025ec <HAL_RCC_OscConfig+0xa80>
 800260a:	e018      	b.n	800263e <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800260c:	4b89      	ldr	r3, [pc, #548]	@ (8002834 <HAL_RCC_OscConfig+0xcc8>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a88      	ldr	r2, [pc, #544]	@ (8002834 <HAL_RCC_OscConfig+0xcc8>)
 8002612:	f023 0310 	bic.w	r3, r3, #16
 8002616:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002618:	f7fe fc7c 	bl	8000f14 <HAL_GetTick>
 800261c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800261e:	e008      	b.n	8002632 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002620:	f7fe fc78 	bl	8000f14 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e171      	b.n	8002916 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8002632:	4b80      	ldr	r3, [pc, #512]	@ (8002834 <HAL_RCC_OscConfig+0xcc8>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0320 	and.w	r3, r3, #32
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1f0      	bne.n	8002620 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002642:	2b00      	cmp	r3, #0
 8002644:	f000 8166 	beq.w	8002914 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8002648:	2300      	movs	r3, #0
 800264a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800264e:	4b79      	ldr	r3, [pc, #484]	@ (8002834 <HAL_RCC_OscConfig+0xcc8>)
 8002650:	69db      	ldr	r3, [r3, #28]
 8002652:	f003 030c 	and.w	r3, r3, #12
 8002656:	2b0c      	cmp	r3, #12
 8002658:	f000 80f2 	beq.w	8002840 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002660:	2b02      	cmp	r3, #2
 8002662:	f040 80c5 	bne.w	80027f0 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8002666:	4b73      	ldr	r3, [pc, #460]	@ (8002834 <HAL_RCC_OscConfig+0xcc8>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a72      	ldr	r2, [pc, #456]	@ (8002834 <HAL_RCC_OscConfig+0xcc8>)
 800266c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002670:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002672:	f7fe fc4f 	bl	8000f14 <HAL_GetTick>
 8002676:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002678:	e008      	b.n	800268c <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800267a:	f7fe fc4b 	bl	8000f14 <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	2b02      	cmp	r3, #2
 8002686:	d901      	bls.n	800268c <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e144      	b.n	8002916 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800268c:	4b69      	ldr	r3, [pc, #420]	@ (8002834 <HAL_RCC_OscConfig+0xcc8>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d1f0      	bne.n	800267a <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002698:	4b66      	ldr	r3, [pc, #408]	@ (8002834 <HAL_RCC_OscConfig+0xcc8>)
 800269a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800269e:	f003 0304 	and.w	r3, r3, #4
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d111      	bne.n	80026ca <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80026a6:	4b63      	ldr	r3, [pc, #396]	@ (8002834 <HAL_RCC_OscConfig+0xcc8>)
 80026a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026ac:	4a61      	ldr	r2, [pc, #388]	@ (8002834 <HAL_RCC_OscConfig+0xcc8>)
 80026ae:	f043 0304 	orr.w	r3, r3, #4
 80026b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80026b6:	4b5f      	ldr	r3, [pc, #380]	@ (8002834 <HAL_RCC_OscConfig+0xcc8>)
 80026b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026bc:	f003 0304 	and.w	r3, r3, #4
 80026c0:	60fb      	str	r3, [r7, #12]
 80026c2:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80026c4:	2301      	movs	r3, #1
 80026c6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80026ca:	4b5b      	ldr	r3, [pc, #364]	@ (8002838 <HAL_RCC_OscConfig+0xccc>)
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026d2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80026d6:	d102      	bne.n	80026de <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 80026d8:	2301      	movs	r3, #1
 80026da:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80026de:	4b56      	ldr	r3, [pc, #344]	@ (8002838 <HAL_RCC_OscConfig+0xccc>)
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	4a55      	ldr	r2, [pc, #340]	@ (8002838 <HAL_RCC_OscConfig+0xccc>)
 80026e4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026e8:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80026ea:	4b52      	ldr	r3, [pc, #328]	@ (8002834 <HAL_RCC_OscConfig+0xcc8>)
 80026ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80026f2:	f023 0303 	bic.w	r3, r3, #3
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80026fe:	3a01      	subs	r2, #1
 8002700:	0212      	lsls	r2, r2, #8
 8002702:	4311      	orrs	r1, r2
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002708:	430a      	orrs	r2, r1
 800270a:	494a      	ldr	r1, [pc, #296]	@ (8002834 <HAL_RCC_OscConfig+0xcc8>)
 800270c:	4313      	orrs	r3, r2
 800270e:	628b      	str	r3, [r1, #40]	@ 0x28
 8002710:	4b48      	ldr	r3, [pc, #288]	@ (8002834 <HAL_RCC_OscConfig+0xcc8>)
 8002712:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002714:	4b49      	ldr	r3, [pc, #292]	@ (800283c <HAL_RCC_OscConfig+0xcd0>)
 8002716:	4013      	ands	r3, r2
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800271c:	3a01      	subs	r2, #1
 800271e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002726:	3a01      	subs	r2, #1
 8002728:	0252      	lsls	r2, r2, #9
 800272a:	b292      	uxth	r2, r2
 800272c:	4311      	orrs	r1, r2
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002732:	3a01      	subs	r2, #1
 8002734:	0412      	lsls	r2, r2, #16
 8002736:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800273a:	4311      	orrs	r1, r2
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8002740:	3a01      	subs	r2, #1
 8002742:	0612      	lsls	r2, r2, #24
 8002744:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8002748:	430a      	orrs	r2, r1
 800274a:	493a      	ldr	r1, [pc, #232]	@ (8002834 <HAL_RCC_OscConfig+0xcc8>)
 800274c:	4313      	orrs	r3, r2
 800274e:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8002750:	4b38      	ldr	r3, [pc, #224]	@ (8002834 <HAL_RCC_OscConfig+0xcc8>)
 8002752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002754:	4a37      	ldr	r2, [pc, #220]	@ (8002834 <HAL_RCC_OscConfig+0xcc8>)
 8002756:	f023 0310 	bic.w	r3, r3, #16
 800275a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002760:	4a34      	ldr	r2, [pc, #208]	@ (8002834 <HAL_RCC_OscConfig+0xcc8>)
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8002766:	4b33      	ldr	r3, [pc, #204]	@ (8002834 <HAL_RCC_OscConfig+0xcc8>)
 8002768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800276a:	4a32      	ldr	r2, [pc, #200]	@ (8002834 <HAL_RCC_OscConfig+0xcc8>)
 800276c:	f043 0310 	orr.w	r3, r3, #16
 8002770:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8002772:	4b30      	ldr	r3, [pc, #192]	@ (8002834 <HAL_RCC_OscConfig+0xcc8>)
 8002774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002776:	f023 020c 	bic.w	r2, r3, #12
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800277e:	492d      	ldr	r1, [pc, #180]	@ (8002834 <HAL_RCC_OscConfig+0xcc8>)
 8002780:	4313      	orrs	r3, r2
 8002782:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8002784:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002788:	2b01      	cmp	r3, #1
 800278a:	d105      	bne.n	8002798 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800278c:	4b2a      	ldr	r3, [pc, #168]	@ (8002838 <HAL_RCC_OscConfig+0xccc>)
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	4a29      	ldr	r2, [pc, #164]	@ (8002838 <HAL_RCC_OscConfig+0xccc>)
 8002792:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002796:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8002798:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800279c:	2b01      	cmp	r3, #1
 800279e:	d107      	bne.n	80027b0 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80027a0:	4b24      	ldr	r3, [pc, #144]	@ (8002834 <HAL_RCC_OscConfig+0xcc8>)
 80027a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027a6:	4a23      	ldr	r2, [pc, #140]	@ (8002834 <HAL_RCC_OscConfig+0xcc8>)
 80027a8:	f023 0304 	bic.w	r3, r3, #4
 80027ac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80027b0:	4b20      	ldr	r3, [pc, #128]	@ (8002834 <HAL_RCC_OscConfig+0xcc8>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a1f      	ldr	r2, [pc, #124]	@ (8002834 <HAL_RCC_OscConfig+0xcc8>)
 80027b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027ba:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80027bc:	f7fe fbaa 	bl	8000f14 <HAL_GetTick>
 80027c0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027c4:	f7fe fba6 	bl	8000f14 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e09f      	b.n	8002916 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80027d6:	4b17      	ldr	r3, [pc, #92]	@ (8002834 <HAL_RCC_OscConfig+0xcc8>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d0f0      	beq.n	80027c4 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80027e2:	4b14      	ldr	r3, [pc, #80]	@ (8002834 <HAL_RCC_OscConfig+0xcc8>)
 80027e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027e6:	4a13      	ldr	r2, [pc, #76]	@ (8002834 <HAL_RCC_OscConfig+0xcc8>)
 80027e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027ec:	6293      	str	r3, [r2, #40]	@ 0x28
 80027ee:	e091      	b.n	8002914 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80027f0:	4b10      	ldr	r3, [pc, #64]	@ (8002834 <HAL_RCC_OscConfig+0xcc8>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a0f      	ldr	r2, [pc, #60]	@ (8002834 <HAL_RCC_OscConfig+0xcc8>)
 80027f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027fa:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80027fc:	f7fe fb8a 	bl	8000f14 <HAL_GetTick>
 8002800:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002802:	e008      	b.n	8002816 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002804:	f7fe fb86 	bl	8000f14 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b02      	cmp	r3, #2
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e07f      	b.n	8002916 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002816:	4b07      	ldr	r3, [pc, #28]	@ (8002834 <HAL_RCC_OscConfig+0xcc8>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d1f0      	bne.n	8002804 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002822:	4b04      	ldr	r3, [pc, #16]	@ (8002834 <HAL_RCC_OscConfig+0xcc8>)
 8002824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002826:	4a03      	ldr	r2, [pc, #12]	@ (8002834 <HAL_RCC_OscConfig+0xcc8>)
 8002828:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800282c:	f023 0303 	bic.w	r3, r3, #3
 8002830:	6293      	str	r3, [r2, #40]	@ 0x28
 8002832:	e06f      	b.n	8002914 <HAL_RCC_OscConfig+0xda8>
 8002834:	46020c00 	.word	0x46020c00
 8002838:	46020800 	.word	0x46020800
 800283c:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8002840:	4b37      	ldr	r3, [pc, #220]	@ (8002920 <HAL_RCC_OscConfig+0xdb4>)
 8002842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002844:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002846:	4b36      	ldr	r3, [pc, #216]	@ (8002920 <HAL_RCC_OscConfig+0xdb4>)
 8002848:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800284a:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002850:	2b01      	cmp	r3, #1
 8002852:	d039      	beq.n	80028c8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	f003 0203 	and.w	r2, r3, #3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800285e:	429a      	cmp	r2, r3
 8002860:	d132      	bne.n	80028c8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	0a1b      	lsrs	r3, r3, #8
 8002866:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800286e:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8002870:	429a      	cmp	r2, r3
 8002872:	d129      	bne.n	80028c8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800287e:	429a      	cmp	r2, r3
 8002880:	d122      	bne.n	80028c8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800288c:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800288e:	429a      	cmp	r2, r3
 8002890:	d11a      	bne.n	80028c8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	0a5b      	lsrs	r3, r3, #9
 8002896:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800289e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d111      	bne.n	80028c8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	0c1b      	lsrs	r3, r3, #16
 80028a8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028b0:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d108      	bne.n	80028c8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	0e1b      	lsrs	r3, r3, #24
 80028ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028c2:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d001      	beq.n	80028cc <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e024      	b.n	8002916 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80028cc:	4b14      	ldr	r3, [pc, #80]	@ (8002920 <HAL_RCC_OscConfig+0xdb4>)
 80028ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028d0:	08db      	lsrs	r3, r3, #3
 80028d2:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80028da:	429a      	cmp	r2, r3
 80028dc:	d01a      	beq.n	8002914 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80028de:	4b10      	ldr	r3, [pc, #64]	@ (8002920 <HAL_RCC_OscConfig+0xdb4>)
 80028e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028e2:	4a0f      	ldr	r2, [pc, #60]	@ (8002920 <HAL_RCC_OscConfig+0xdb4>)
 80028e4:	f023 0310 	bic.w	r3, r3, #16
 80028e8:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ea:	f7fe fb13 	bl	8000f14 <HAL_GetTick>
 80028ee:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 80028f0:	bf00      	nop
 80028f2:	f7fe fb0f 	bl	8000f14 <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d0f9      	beq.n	80028f2 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002902:	4a07      	ldr	r2, [pc, #28]	@ (8002920 <HAL_RCC_OscConfig+0xdb4>)
 8002904:	00db      	lsls	r3, r3, #3
 8002906:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8002908:	4b05      	ldr	r3, [pc, #20]	@ (8002920 <HAL_RCC_OscConfig+0xdb4>)
 800290a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800290c:	4a04      	ldr	r2, [pc, #16]	@ (8002920 <HAL_RCC_OscConfig+0xdb4>)
 800290e:	f043 0310 	orr.w	r3, r3, #16
 8002912:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3738      	adds	r7, #56	@ 0x38
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	46020c00 	.word	0x46020c00

08002924 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b086      	sub	sp, #24
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d101      	bne.n	8002938 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e1d9      	b.n	8002cec <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002938:	4b9b      	ldr	r3, [pc, #620]	@ (8002ba8 <HAL_RCC_ClockConfig+0x284>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 030f 	and.w	r3, r3, #15
 8002940:	683a      	ldr	r2, [r7, #0]
 8002942:	429a      	cmp	r2, r3
 8002944:	d910      	bls.n	8002968 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002946:	4b98      	ldr	r3, [pc, #608]	@ (8002ba8 <HAL_RCC_ClockConfig+0x284>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f023 020f 	bic.w	r2, r3, #15
 800294e:	4996      	ldr	r1, [pc, #600]	@ (8002ba8 <HAL_RCC_ClockConfig+0x284>)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	4313      	orrs	r3, r2
 8002954:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002956:	4b94      	ldr	r3, [pc, #592]	@ (8002ba8 <HAL_RCC_ClockConfig+0x284>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 030f 	and.w	r3, r3, #15
 800295e:	683a      	ldr	r2, [r7, #0]
 8002960:	429a      	cmp	r2, r3
 8002962:	d001      	beq.n	8002968 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e1c1      	b.n	8002cec <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0310 	and.w	r3, r3, #16
 8002970:	2b00      	cmp	r3, #0
 8002972:	d010      	beq.n	8002996 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	695a      	ldr	r2, [r3, #20]
 8002978:	4b8c      	ldr	r3, [pc, #560]	@ (8002bac <HAL_RCC_ClockConfig+0x288>)
 800297a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800297c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002980:	429a      	cmp	r2, r3
 8002982:	d908      	bls.n	8002996 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8002984:	4b89      	ldr	r3, [pc, #548]	@ (8002bac <HAL_RCC_ClockConfig+0x288>)
 8002986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002988:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	695b      	ldr	r3, [r3, #20]
 8002990:	4986      	ldr	r1, [pc, #536]	@ (8002bac <HAL_RCC_ClockConfig+0x288>)
 8002992:	4313      	orrs	r3, r2
 8002994:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0308 	and.w	r3, r3, #8
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d012      	beq.n	80029c8 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	691a      	ldr	r2, [r3, #16]
 80029a6:	4b81      	ldr	r3, [pc, #516]	@ (8002bac <HAL_RCC_ClockConfig+0x288>)
 80029a8:	6a1b      	ldr	r3, [r3, #32]
 80029aa:	091b      	lsrs	r3, r3, #4
 80029ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d909      	bls.n	80029c8 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80029b4:	4b7d      	ldr	r3, [pc, #500]	@ (8002bac <HAL_RCC_ClockConfig+0x288>)
 80029b6:	6a1b      	ldr	r3, [r3, #32]
 80029b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	691b      	ldr	r3, [r3, #16]
 80029c0:	011b      	lsls	r3, r3, #4
 80029c2:	497a      	ldr	r1, [pc, #488]	@ (8002bac <HAL_RCC_ClockConfig+0x288>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0304 	and.w	r3, r3, #4
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d010      	beq.n	80029f6 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	68da      	ldr	r2, [r3, #12]
 80029d8:	4b74      	ldr	r3, [pc, #464]	@ (8002bac <HAL_RCC_ClockConfig+0x288>)
 80029da:	6a1b      	ldr	r3, [r3, #32]
 80029dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d908      	bls.n	80029f6 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80029e4:	4b71      	ldr	r3, [pc, #452]	@ (8002bac <HAL_RCC_ClockConfig+0x288>)
 80029e6:	6a1b      	ldr	r3, [r3, #32]
 80029e8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	496e      	ldr	r1, [pc, #440]	@ (8002bac <HAL_RCC_ClockConfig+0x288>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d010      	beq.n	8002a24 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	689a      	ldr	r2, [r3, #8]
 8002a06:	4b69      	ldr	r3, [pc, #420]	@ (8002bac <HAL_RCC_ClockConfig+0x288>)
 8002a08:	6a1b      	ldr	r3, [r3, #32]
 8002a0a:	f003 030f 	and.w	r3, r3, #15
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d908      	bls.n	8002a24 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8002a12:	4b66      	ldr	r3, [pc, #408]	@ (8002bac <HAL_RCC_ClockConfig+0x288>)
 8002a14:	6a1b      	ldr	r3, [r3, #32]
 8002a16:	f023 020f 	bic.w	r2, r3, #15
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	4963      	ldr	r1, [pc, #396]	@ (8002bac <HAL_RCC_ClockConfig+0x288>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f000 80d2 	beq.w	8002bd6 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8002a32:	2300      	movs	r3, #0
 8002a34:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	2b03      	cmp	r3, #3
 8002a3c:	d143      	bne.n	8002ac6 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a3e:	4b5b      	ldr	r3, [pc, #364]	@ (8002bac <HAL_RCC_ClockConfig+0x288>)
 8002a40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a44:	f003 0304 	and.w	r3, r3, #4
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d110      	bne.n	8002a6e <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002a4c:	4b57      	ldr	r3, [pc, #348]	@ (8002bac <HAL_RCC_ClockConfig+0x288>)
 8002a4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a52:	4a56      	ldr	r2, [pc, #344]	@ (8002bac <HAL_RCC_ClockConfig+0x288>)
 8002a54:	f043 0304 	orr.w	r3, r3, #4
 8002a58:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002a5c:	4b53      	ldr	r3, [pc, #332]	@ (8002bac <HAL_RCC_ClockConfig+0x288>)
 8002a5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a62:	f003 0304 	and.w	r3, r3, #4
 8002a66:	60bb      	str	r3, [r7, #8]
 8002a68:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8002a6e:	f7fe fa51 	bl	8000f14 <HAL_GetTick>
 8002a72:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8002a74:	4b4e      	ldr	r3, [pc, #312]	@ (8002bb0 <HAL_RCC_ClockConfig+0x28c>)
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d00f      	beq.n	8002aa0 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8002a80:	e008      	b.n	8002a94 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8002a82:	f7fe fa47 	bl	8000f14 <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d901      	bls.n	8002a94 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e12b      	b.n	8002cec <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8002a94:	4b46      	ldr	r3, [pc, #280]	@ (8002bb0 <HAL_RCC_ClockConfig+0x28c>)
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d0f0      	beq.n	8002a82 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002aa0:	7dfb      	ldrb	r3, [r7, #23]
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d107      	bne.n	8002ab6 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002aa6:	4b41      	ldr	r3, [pc, #260]	@ (8002bac <HAL_RCC_ClockConfig+0x288>)
 8002aa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002aac:	4a3f      	ldr	r2, [pc, #252]	@ (8002bac <HAL_RCC_ClockConfig+0x288>)
 8002aae:	f023 0304 	bic.w	r3, r3, #4
 8002ab2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002ab6:	4b3d      	ldr	r3, [pc, #244]	@ (8002bac <HAL_RCC_ClockConfig+0x288>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d121      	bne.n	8002b06 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e112      	b.n	8002cec <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d107      	bne.n	8002ade <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ace:	4b37      	ldr	r3, [pc, #220]	@ (8002bac <HAL_RCC_ClockConfig+0x288>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d115      	bne.n	8002b06 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e106      	b.n	8002cec <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d107      	bne.n	8002af6 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002ae6:	4b31      	ldr	r3, [pc, #196]	@ (8002bac <HAL_RCC_ClockConfig+0x288>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0304 	and.w	r3, r3, #4
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d109      	bne.n	8002b06 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e0fa      	b.n	8002cec <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002af6:	4b2d      	ldr	r3, [pc, #180]	@ (8002bac <HAL_RCC_ClockConfig+0x288>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e0f2      	b.n	8002cec <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8002b06:	4b29      	ldr	r3, [pc, #164]	@ (8002bac <HAL_RCC_ClockConfig+0x288>)
 8002b08:	69db      	ldr	r3, [r3, #28]
 8002b0a:	f023 0203 	bic.w	r2, r3, #3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	4926      	ldr	r1, [pc, #152]	@ (8002bac <HAL_RCC_ClockConfig+0x288>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8002b18:	f7fe f9fc 	bl	8000f14 <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	2b03      	cmp	r3, #3
 8002b24:	d112      	bne.n	8002b4c <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b26:	e00a      	b.n	8002b3e <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b28:	f7fe f9f4 	bl	8000f14 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e0d6      	b.n	8002cec <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b3e:	4b1b      	ldr	r3, [pc, #108]	@ (8002bac <HAL_RCC_ClockConfig+0x288>)
 8002b40:	69db      	ldr	r3, [r3, #28]
 8002b42:	f003 030c 	and.w	r3, r3, #12
 8002b46:	2b0c      	cmp	r3, #12
 8002b48:	d1ee      	bne.n	8002b28 <HAL_RCC_ClockConfig+0x204>
 8002b4a:	e044      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d112      	bne.n	8002b7a <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b54:	e00a      	b.n	8002b6c <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b56:	f7fe f9dd 	bl	8000f14 <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d901      	bls.n	8002b6c <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e0bf      	b.n	8002cec <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b6c:	4b0f      	ldr	r3, [pc, #60]	@ (8002bac <HAL_RCC_ClockConfig+0x288>)
 8002b6e:	69db      	ldr	r3, [r3, #28]
 8002b70:	f003 030c 	and.w	r3, r3, #12
 8002b74:	2b08      	cmp	r3, #8
 8002b76:	d1ee      	bne.n	8002b56 <HAL_RCC_ClockConfig+0x232>
 8002b78:	e02d      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d123      	bne.n	8002bca <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002b82:	e00a      	b.n	8002b9a <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b84:	f7fe f9c6 	bl	8000f14 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e0a8      	b.n	8002cec <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002b9a:	4b04      	ldr	r3, [pc, #16]	@ (8002bac <HAL_RCC_ClockConfig+0x288>)
 8002b9c:	69db      	ldr	r3, [r3, #28]
 8002b9e:	f003 030c 	and.w	r3, r3, #12
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1ee      	bne.n	8002b84 <HAL_RCC_ClockConfig+0x260>
 8002ba6:	e016      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x2b2>
 8002ba8:	40022000 	.word	0x40022000
 8002bac:	46020c00 	.word	0x46020c00
 8002bb0:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bb4:	f7fe f9ae 	bl	8000f14 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e090      	b.n	8002cec <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bca:	4b4a      	ldr	r3, [pc, #296]	@ (8002cf4 <HAL_RCC_ClockConfig+0x3d0>)
 8002bcc:	69db      	ldr	r3, [r3, #28]
 8002bce:	f003 030c 	and.w	r3, r3, #12
 8002bd2:	2b04      	cmp	r3, #4
 8002bd4:	d1ee      	bne.n	8002bb4 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d010      	beq.n	8002c04 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	689a      	ldr	r2, [r3, #8]
 8002be6:	4b43      	ldr	r3, [pc, #268]	@ (8002cf4 <HAL_RCC_ClockConfig+0x3d0>)
 8002be8:	6a1b      	ldr	r3, [r3, #32]
 8002bea:	f003 030f 	and.w	r3, r3, #15
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d208      	bcs.n	8002c04 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8002bf2:	4b40      	ldr	r3, [pc, #256]	@ (8002cf4 <HAL_RCC_ClockConfig+0x3d0>)
 8002bf4:	6a1b      	ldr	r3, [r3, #32]
 8002bf6:	f023 020f 	bic.w	r2, r3, #15
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	493d      	ldr	r1, [pc, #244]	@ (8002cf4 <HAL_RCC_ClockConfig+0x3d0>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c04:	4b3c      	ldr	r3, [pc, #240]	@ (8002cf8 <HAL_RCC_ClockConfig+0x3d4>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 030f 	and.w	r3, r3, #15
 8002c0c:	683a      	ldr	r2, [r7, #0]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d210      	bcs.n	8002c34 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c12:	4b39      	ldr	r3, [pc, #228]	@ (8002cf8 <HAL_RCC_ClockConfig+0x3d4>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f023 020f 	bic.w	r2, r3, #15
 8002c1a:	4937      	ldr	r1, [pc, #220]	@ (8002cf8 <HAL_RCC_ClockConfig+0x3d4>)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c22:	4b35      	ldr	r3, [pc, #212]	@ (8002cf8 <HAL_RCC_ClockConfig+0x3d4>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 030f 	and.w	r3, r3, #15
 8002c2a:	683a      	ldr	r2, [r7, #0]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d001      	beq.n	8002c34 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e05b      	b.n	8002cec <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0304 	and.w	r3, r3, #4
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d010      	beq.n	8002c62 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	68da      	ldr	r2, [r3, #12]
 8002c44:	4b2b      	ldr	r3, [pc, #172]	@ (8002cf4 <HAL_RCC_ClockConfig+0x3d0>)
 8002c46:	6a1b      	ldr	r3, [r3, #32]
 8002c48:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d208      	bcs.n	8002c62 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8002c50:	4b28      	ldr	r3, [pc, #160]	@ (8002cf4 <HAL_RCC_ClockConfig+0x3d0>)
 8002c52:	6a1b      	ldr	r3, [r3, #32]
 8002c54:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	4925      	ldr	r1, [pc, #148]	@ (8002cf4 <HAL_RCC_ClockConfig+0x3d0>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0308 	and.w	r3, r3, #8
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d012      	beq.n	8002c94 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	691a      	ldr	r2, [r3, #16]
 8002c72:	4b20      	ldr	r3, [pc, #128]	@ (8002cf4 <HAL_RCC_ClockConfig+0x3d0>)
 8002c74:	6a1b      	ldr	r3, [r3, #32]
 8002c76:	091b      	lsrs	r3, r3, #4
 8002c78:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d209      	bcs.n	8002c94 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8002c80:	4b1c      	ldr	r3, [pc, #112]	@ (8002cf4 <HAL_RCC_ClockConfig+0x3d0>)
 8002c82:	6a1b      	ldr	r3, [r3, #32]
 8002c84:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	691b      	ldr	r3, [r3, #16]
 8002c8c:	011b      	lsls	r3, r3, #4
 8002c8e:	4919      	ldr	r1, [pc, #100]	@ (8002cf4 <HAL_RCC_ClockConfig+0x3d0>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0310 	and.w	r3, r3, #16
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d010      	beq.n	8002cc2 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	695a      	ldr	r2, [r3, #20]
 8002ca4:	4b13      	ldr	r3, [pc, #76]	@ (8002cf4 <HAL_RCC_ClockConfig+0x3d0>)
 8002ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d208      	bcs.n	8002cc2 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8002cb0:	4b10      	ldr	r3, [pc, #64]	@ (8002cf4 <HAL_RCC_ClockConfig+0x3d0>)
 8002cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	695b      	ldr	r3, [r3, #20]
 8002cbc:	490d      	ldr	r1, [pc, #52]	@ (8002cf4 <HAL_RCC_ClockConfig+0x3d0>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002cc2:	f000 f821 	bl	8002d08 <HAL_RCC_GetSysClockFreq>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	4b0a      	ldr	r3, [pc, #40]	@ (8002cf4 <HAL_RCC_ClockConfig+0x3d0>)
 8002cca:	6a1b      	ldr	r3, [r3, #32]
 8002ccc:	f003 030f 	and.w	r3, r3, #15
 8002cd0:	490a      	ldr	r1, [pc, #40]	@ (8002cfc <HAL_RCC_ClockConfig+0x3d8>)
 8002cd2:	5ccb      	ldrb	r3, [r1, r3]
 8002cd4:	fa22 f303 	lsr.w	r3, r2, r3
 8002cd8:	4a09      	ldr	r2, [pc, #36]	@ (8002d00 <HAL_RCC_ClockConfig+0x3dc>)
 8002cda:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002cdc:	4b09      	ldr	r3, [pc, #36]	@ (8002d04 <HAL_RCC_ClockConfig+0x3e0>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7fe f88d 	bl	8000e00 <HAL_InitTick>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	73fb      	strb	r3, [r7, #15]

  return status;
 8002cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3718      	adds	r7, #24
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	46020c00 	.word	0x46020c00
 8002cf8:	40022000 	.word	0x40022000
 8002cfc:	08008230 	.word	0x08008230
 8002d00:	20000068 	.word	0x20000068
 8002d04:	20000088 	.word	0x20000088

08002d08 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b08b      	sub	sp, #44	@ 0x2c
 8002d0c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8002d12:	2300      	movs	r3, #0
 8002d14:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d16:	4b78      	ldr	r3, [pc, #480]	@ (8002ef8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002d18:	69db      	ldr	r3, [r3, #28]
 8002d1a:	f003 030c 	and.w	r3, r3, #12
 8002d1e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d20:	4b75      	ldr	r3, [pc, #468]	@ (8002ef8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d24:	f003 0303 	and.w	r3, r3, #3
 8002d28:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d005      	beq.n	8002d3c <HAL_RCC_GetSysClockFreq+0x34>
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	2b0c      	cmp	r3, #12
 8002d34:	d121      	bne.n	8002d7a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d11e      	bne.n	8002d7a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8002d3c:	4b6e      	ldr	r3, [pc, #440]	@ (8002ef8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d107      	bne.n	8002d58 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8002d48:	4b6b      	ldr	r3, [pc, #428]	@ (8002ef8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002d4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002d4e:	0b1b      	lsrs	r3, r3, #12
 8002d50:	f003 030f 	and.w	r3, r3, #15
 8002d54:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d56:	e005      	b.n	8002d64 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8002d58:	4b67      	ldr	r3, [pc, #412]	@ (8002ef8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	0f1b      	lsrs	r3, r3, #28
 8002d5e:	f003 030f 	and.w	r3, r3, #15
 8002d62:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002d64:	4a65      	ldr	r2, [pc, #404]	@ (8002efc <HAL_RCC_GetSysClockFreq+0x1f4>)
 8002d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d6c:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d110      	bne.n	8002d96 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d76:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002d78:	e00d      	b.n	8002d96 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d7a:	4b5f      	ldr	r3, [pc, #380]	@ (8002ef8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002d7c:	69db      	ldr	r3, [r3, #28]
 8002d7e:	f003 030c 	and.w	r3, r3, #12
 8002d82:	2b04      	cmp	r3, #4
 8002d84:	d102      	bne.n	8002d8c <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d86:	4b5e      	ldr	r3, [pc, #376]	@ (8002f00 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8002d88:	623b      	str	r3, [r7, #32]
 8002d8a:	e004      	b.n	8002d96 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	2b08      	cmp	r3, #8
 8002d90:	d101      	bne.n	8002d96 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d92:	4b5c      	ldr	r3, [pc, #368]	@ (8002f04 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002d94:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	2b0c      	cmp	r3, #12
 8002d9a:	f040 80a5 	bne.w	8002ee8 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002d9e:	4b56      	ldr	r3, [pc, #344]	@ (8002ef8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002da0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002da2:	f003 0303 	and.w	r3, r3, #3
 8002da6:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8002da8:	4b53      	ldr	r3, [pc, #332]	@ (8002ef8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002daa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dac:	0a1b      	lsrs	r3, r3, #8
 8002dae:	f003 030f 	and.w	r3, r3, #15
 8002db2:	3301      	adds	r3, #1
 8002db4:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002db6:	4b50      	ldr	r3, [pc, #320]	@ (8002ef8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002db8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dba:	091b      	lsrs	r3, r3, #4
 8002dbc:	f003 0301 	and.w	r3, r3, #1
 8002dc0:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8002dc2:	4b4d      	ldr	r3, [pc, #308]	@ (8002ef8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002dc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dc6:	08db      	lsrs	r3, r3, #3
 8002dc8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002dcc:	68ba      	ldr	r2, [r7, #8]
 8002dce:	fb02 f303 	mul.w	r3, r2, r3
 8002dd2:	ee07 3a90 	vmov	s15, r3
 8002dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dda:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d003      	beq.n	8002dec <HAL_RCC_GetSysClockFreq+0xe4>
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	2b03      	cmp	r3, #3
 8002de8:	d022      	beq.n	8002e30 <HAL_RCC_GetSysClockFreq+0x128>
 8002dea:	e043      	b.n	8002e74 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	ee07 3a90 	vmov	s15, r3
 8002df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002df6:	eddf 6a44 	vldr	s13, [pc, #272]	@ 8002f08 <HAL_RCC_GetSysClockFreq+0x200>
 8002dfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002dfe:	4b3e      	ldr	r3, [pc, #248]	@ (8002ef8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002e00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e06:	ee07 3a90 	vmov	s15, r3
 8002e0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002e0e:	ed97 6a01 	vldr	s12, [r7, #4]
 8002e12:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8002f0c <HAL_RCC_GetSysClockFreq+0x204>
 8002e16:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002e1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e22:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002e2e:	e046      	b.n	8002ebe <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	ee07 3a90 	vmov	s15, r3
 8002e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e3a:	eddf 6a35 	vldr	s13, [pc, #212]	@ 8002f10 <HAL_RCC_GetSysClockFreq+0x208>
 8002e3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e42:	4b2d      	ldr	r3, [pc, #180]	@ (8002ef8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002e44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e4a:	ee07 3a90 	vmov	s15, r3
 8002e4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002e52:	ed97 6a01 	vldr	s12, [r7, #4]
 8002e56:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8002f0c <HAL_RCC_GetSysClockFreq+0x204>
 8002e5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002e62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e66:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002e72:	e024      	b.n	8002ebe <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e76:	ee07 3a90 	vmov	s15, r3
 8002e7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	ee07 3a90 	vmov	s15, r3
 8002e84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e8c:	4b1a      	ldr	r3, [pc, #104]	@ (8002ef8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002e8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e94:	ee07 3a90 	vmov	s15, r3
 8002e98:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002e9c:	ed97 6a01 	vldr	s12, [r7, #4]
 8002ea0:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 8002f0c <HAL_RCC_GetSysClockFreq+0x204>
 8002ea4:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002ea8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002eac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002eb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002eb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eb8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002ebc:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8002ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8002ef8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002ec0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ec2:	0e1b      	lsrs	r3, r3, #24
 8002ec4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ec8:	3301      	adds	r3, #1
 8002eca:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	ee07 3a90 	vmov	s15, r3
 8002ed2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ed6:	edd7 6a07 	vldr	s13, [r7, #28]
 8002eda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ede:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ee2:	ee17 3a90 	vmov	r3, s15
 8002ee6:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8002ee8:	6a3b      	ldr	r3, [r7, #32]
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	372c      	adds	r7, #44	@ 0x2c
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	46020c00 	.word	0x46020c00
 8002efc:	08008248 	.word	0x08008248
 8002f00:	00f42400 	.word	0x00f42400
 8002f04:	007a1200 	.word	0x007a1200
 8002f08:	4b742400 	.word	0x4b742400
 8002f0c:	46000000 	.word	0x46000000
 8002f10:	4af42400 	.word	0x4af42400

08002f14 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002f18:	f7ff fef6 	bl	8002d08 <HAL_RCC_GetSysClockFreq>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	4b07      	ldr	r3, [pc, #28]	@ (8002f3c <HAL_RCC_GetHCLKFreq+0x28>)
 8002f20:	6a1b      	ldr	r3, [r3, #32]
 8002f22:	f003 030f 	and.w	r3, r3, #15
 8002f26:	4906      	ldr	r1, [pc, #24]	@ (8002f40 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002f28:	5ccb      	ldrb	r3, [r1, r3]
 8002f2a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f2e:	4a05      	ldr	r2, [pc, #20]	@ (8002f44 <HAL_RCC_GetHCLKFreq+0x30>)
 8002f30:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8002f32:	4b04      	ldr	r3, [pc, #16]	@ (8002f44 <HAL_RCC_GetHCLKFreq+0x30>)
 8002f34:	681b      	ldr	r3, [r3, #0]
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	46020c00 	.word	0x46020c00
 8002f40:	08008230 	.word	0x08008230
 8002f44:	20000068 	.word	0x20000068

08002f48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8002f4c:	f7ff ffe2 	bl	8002f14 <HAL_RCC_GetHCLKFreq>
 8002f50:	4602      	mov	r2, r0
 8002f52:	4b05      	ldr	r3, [pc, #20]	@ (8002f68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f54:	6a1b      	ldr	r3, [r3, #32]
 8002f56:	091b      	lsrs	r3, r3, #4
 8002f58:	f003 0307 	and.w	r3, r3, #7
 8002f5c:	4903      	ldr	r1, [pc, #12]	@ (8002f6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f5e:	5ccb      	ldrb	r3, [r1, r3]
 8002f60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	46020c00 	.word	0x46020c00
 8002f6c:	08008240 	.word	0x08008240

08002f70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8002f74:	f7ff ffce 	bl	8002f14 <HAL_RCC_GetHCLKFreq>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	4b05      	ldr	r3, [pc, #20]	@ (8002f90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	0a1b      	lsrs	r3, r3, #8
 8002f80:	f003 0307 	and.w	r3, r3, #7
 8002f84:	4903      	ldr	r1, [pc, #12]	@ (8002f94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f86:	5ccb      	ldrb	r3, [r1, r3]
 8002f88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	46020c00 	.word	0x46020c00
 8002f94:	08008240 	.word	0x08008240

08002f98 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8002f9c:	f7ff ffba 	bl	8002f14 <HAL_RCC_GetHCLKFreq>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	4b05      	ldr	r3, [pc, #20]	@ (8002fb8 <HAL_RCC_GetPCLK3Freq+0x20>)
 8002fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa6:	091b      	lsrs	r3, r3, #4
 8002fa8:	f003 0307 	and.w	r3, r3, #7
 8002fac:	4903      	ldr	r1, [pc, #12]	@ (8002fbc <HAL_RCC_GetPCLK3Freq+0x24>)
 8002fae:	5ccb      	ldrb	r3, [r1, r3]
 8002fb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	46020c00 	.word	0x46020c00
 8002fbc:	08008240 	.word	0x08008240

08002fc0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002fc8:	4b3e      	ldr	r3, [pc, #248]	@ (80030c4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002fca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fce:	f003 0304 	and.w	r3, r3, #4
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002fd6:	f7fe fd4b 	bl	8001a70 <HAL_PWREx_GetVoltageRange>
 8002fda:	6178      	str	r0, [r7, #20]
 8002fdc:	e019      	b.n	8003012 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002fde:	4b39      	ldr	r3, [pc, #228]	@ (80030c4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002fe0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fe4:	4a37      	ldr	r2, [pc, #220]	@ (80030c4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002fe6:	f043 0304 	orr.w	r3, r3, #4
 8002fea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002fee:	4b35      	ldr	r3, [pc, #212]	@ (80030c4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002ff0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ff4:	f003 0304 	and.w	r3, r3, #4
 8002ff8:	60fb      	str	r3, [r7, #12]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002ffc:	f7fe fd38 	bl	8001a70 <HAL_PWREx_GetVoltageRange>
 8003000:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003002:	4b30      	ldr	r3, [pc, #192]	@ (80030c4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003004:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003008:	4a2e      	ldr	r2, [pc, #184]	@ (80030c4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800300a:	f023 0304 	bic.w	r3, r3, #4
 800300e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003018:	d003      	beq.n	8003022 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003020:	d109      	bne.n	8003036 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003028:	d202      	bcs.n	8003030 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800302a:	2301      	movs	r3, #1
 800302c:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800302e:	e033      	b.n	8003098 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8003030:	2300      	movs	r3, #0
 8003032:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8003034:	e030      	b.n	8003098 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800303c:	d208      	bcs.n	8003050 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003044:	d102      	bne.n	800304c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8003046:	2303      	movs	r3, #3
 8003048:	613b      	str	r3, [r7, #16]
 800304a:	e025      	b.n	8003098 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e035      	b.n	80030bc <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003056:	d90f      	bls.n	8003078 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d109      	bne.n	8003072 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003064:	d902      	bls.n	800306c <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8003066:	2300      	movs	r3, #0
 8003068:	613b      	str	r3, [r7, #16]
 800306a:	e015      	b.n	8003098 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800306c:	2301      	movs	r3, #1
 800306e:	613b      	str	r3, [r7, #16]
 8003070:	e012      	b.n	8003098 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8003072:	2300      	movs	r3, #0
 8003074:	613b      	str	r3, [r7, #16]
 8003076:	e00f      	b.n	8003098 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800307e:	d109      	bne.n	8003094 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003086:	d102      	bne.n	800308e <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8003088:	2301      	movs	r3, #1
 800308a:	613b      	str	r3, [r7, #16]
 800308c:	e004      	b.n	8003098 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800308e:	2302      	movs	r3, #2
 8003090:	613b      	str	r3, [r7, #16]
 8003092:	e001      	b.n	8003098 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8003094:	2301      	movs	r3, #1
 8003096:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003098:	4b0b      	ldr	r3, [pc, #44]	@ (80030c8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f023 020f 	bic.w	r2, r3, #15
 80030a0:	4909      	ldr	r1, [pc, #36]	@ (80030c8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80030a8:	4b07      	ldr	r3, [pc, #28]	@ (80030c8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 030f 	and.w	r3, r3, #15
 80030b0:	693a      	ldr	r2, [r7, #16]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d001      	beq.n	80030ba <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e000      	b.n	80030bc <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3718      	adds	r7, #24
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	46020c00 	.word	0x46020c00
 80030c8:	40022000 	.word	0x40022000

080030cc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b089      	sub	sp, #36	@ 0x24
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80030d4:	4ba6      	ldr	r3, [pc, #664]	@ (8003370 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80030d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030dc:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80030de:	4ba4      	ldr	r3, [pc, #656]	@ (8003370 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80030e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030e2:	f003 0303 	and.w	r3, r3, #3
 80030e6:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80030e8:	4ba1      	ldr	r3, [pc, #644]	@ (8003370 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80030ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ec:	0a1b      	lsrs	r3, r3, #8
 80030ee:	f003 030f 	and.w	r3, r3, #15
 80030f2:	3301      	adds	r3, #1
 80030f4:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80030f6:	4b9e      	ldr	r3, [pc, #632]	@ (8003370 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80030f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030fa:	091b      	lsrs	r3, r3, #4
 80030fc:	f003 0301 	and.w	r3, r3, #1
 8003100:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003102:	4b9b      	ldr	r3, [pc, #620]	@ (8003370 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003104:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003106:	08db      	lsrs	r3, r3, #3
 8003108:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800310c:	68fa      	ldr	r2, [r7, #12]
 800310e:	fb02 f303 	mul.w	r3, r2, r3
 8003112:	ee07 3a90 	vmov	s15, r3
 8003116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800311a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	2b03      	cmp	r3, #3
 8003122:	d062      	beq.n	80031ea <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	2b03      	cmp	r3, #3
 8003128:	f200 8081 	bhi.w	800322e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d024      	beq.n	800317c <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	2b02      	cmp	r3, #2
 8003136:	d17a      	bne.n	800322e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	ee07 3a90 	vmov	s15, r3
 800313e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003142:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8003374 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8003146:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800314a:	4b89      	ldr	r3, [pc, #548]	@ (8003370 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800314c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800314e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003152:	ee07 3a90 	vmov	s15, r3
 8003156:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800315a:	ed97 6a02 	vldr	s12, [r7, #8]
 800315e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8003378 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8003162:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003166:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800316a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800316e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003172:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003176:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800317a:	e08f      	b.n	800329c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800317c:	4b7c      	ldr	r3, [pc, #496]	@ (8003370 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d005      	beq.n	8003194 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8003188:	4b79      	ldr	r3, [pc, #484]	@ (8003370 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	0f1b      	lsrs	r3, r3, #28
 800318e:	f003 030f 	and.w	r3, r3, #15
 8003192:	e006      	b.n	80031a2 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8003194:	4b76      	ldr	r3, [pc, #472]	@ (8003370 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003196:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800319a:	041b      	lsls	r3, r3, #16
 800319c:	0f1b      	lsrs	r3, r3, #28
 800319e:	f003 030f 	and.w	r3, r3, #15
 80031a2:	4a76      	ldr	r2, [pc, #472]	@ (800337c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80031a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031a8:	ee07 3a90 	vmov	s15, r3
 80031ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	ee07 3a90 	vmov	s15, r3
 80031b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	ee07 3a90 	vmov	s15, r3
 80031c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031c8:	ed97 6a02 	vldr	s12, [r7, #8]
 80031cc:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8003378 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80031d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80031e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031e4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80031e8:	e058      	b.n	800329c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	ee07 3a90 	vmov	s15, r3
 80031f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031f4:	eddf 6a62 	vldr	s13, [pc, #392]	@ 8003380 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
 80031f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031fc:	4b5c      	ldr	r3, [pc, #368]	@ (8003370 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80031fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003200:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003204:	ee07 3a90 	vmov	s15, r3
 8003208:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800320c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003210:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8003378 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8003214:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003218:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800321c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003220:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003224:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003228:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800322c:	e036      	b.n	800329c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800322e:	4b50      	ldr	r3, [pc, #320]	@ (8003370 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d005      	beq.n	8003246 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800323a:	4b4d      	ldr	r3, [pc, #308]	@ (8003370 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	0f1b      	lsrs	r3, r3, #28
 8003240:	f003 030f 	and.w	r3, r3, #15
 8003244:	e006      	b.n	8003254 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8003246:	4b4a      	ldr	r3, [pc, #296]	@ (8003370 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003248:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800324c:	041b      	lsls	r3, r3, #16
 800324e:	0f1b      	lsrs	r3, r3, #28
 8003250:	f003 030f 	and.w	r3, r3, #15
 8003254:	4a49      	ldr	r2, [pc, #292]	@ (800337c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8003256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800325a:	ee07 3a90 	vmov	s15, r3
 800325e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	ee07 3a90 	vmov	s15, r3
 8003268:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800326c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	ee07 3a90 	vmov	s15, r3
 8003276:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800327a:	ed97 6a02 	vldr	s12, [r7, #8]
 800327e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8003378 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8003282:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003286:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800328a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800328e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003292:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003296:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800329a:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800329c:	4b34      	ldr	r3, [pc, #208]	@ (8003370 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800329e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d017      	beq.n	80032d8 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80032a8:	4b31      	ldr	r3, [pc, #196]	@ (8003370 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80032aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032ac:	0a5b      	lsrs	r3, r3, #9
 80032ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80032b2:	ee07 3a90 	vmov	s15, r3
 80032b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 80032ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80032be:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80032c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80032c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032ce:	ee17 2a90 	vmov	r2, s15
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	601a      	str	r2, [r3, #0]
 80032d6:	e002      	b.n	80032de <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80032de:	4b24      	ldr	r3, [pc, #144]	@ (8003370 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80032e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d017      	beq.n	800331a <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80032ea:	4b21      	ldr	r3, [pc, #132]	@ (8003370 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80032ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032ee:	0c1b      	lsrs	r3, r3, #16
 80032f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80032f4:	ee07 3a90 	vmov	s15, r3
 80032f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 80032fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003300:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003304:	edd7 6a07 	vldr	s13, [r7, #28]
 8003308:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800330c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003310:	ee17 2a90 	vmov	r2, s15
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	605a      	str	r2, [r3, #4]
 8003318:	e002      	b.n	8003320 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8003320:	4b13      	ldr	r3, [pc, #76]	@ (8003370 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003324:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d017      	beq.n	800335c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800332c:	4b10      	ldr	r3, [pc, #64]	@ (8003370 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800332e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003330:	0e1b      	lsrs	r3, r3, #24
 8003332:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003336:	ee07 3a90 	vmov	s15, r3
 800333a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800333e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003342:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003346:	edd7 6a07 	vldr	s13, [r7, #28]
 800334a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800334e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003352:	ee17 2a90 	vmov	r2, s15
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800335a:	e002      	b.n	8003362 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	609a      	str	r2, [r3, #8]
}
 8003362:	bf00      	nop
 8003364:	3724      	adds	r7, #36	@ 0x24
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	46020c00 	.word	0x46020c00
 8003374:	4b742400 	.word	0x4b742400
 8003378:	46000000 	.word	0x46000000
 800337c:	08008248 	.word	0x08008248
 8003380:	4af42400 	.word	0x4af42400

08003384 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003384:	b480      	push	{r7}
 8003386:	b089      	sub	sp, #36	@ 0x24
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800338c:	4ba6      	ldr	r3, [pc, #664]	@ (8003628 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800338e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003390:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003394:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8003396:	4ba4      	ldr	r3, [pc, #656]	@ (8003628 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800339a:	f003 0303 	and.w	r3, r3, #3
 800339e:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 80033a0:	4ba1      	ldr	r3, [pc, #644]	@ (8003628 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80033a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033a4:	0a1b      	lsrs	r3, r3, #8
 80033a6:	f003 030f 	and.w	r3, r3, #15
 80033aa:	3301      	adds	r3, #1
 80033ac:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 80033ae:	4b9e      	ldr	r3, [pc, #632]	@ (8003628 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80033b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b2:	091b      	lsrs	r3, r3, #4
 80033b4:	f003 0301 	and.w	r3, r3, #1
 80033b8:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80033ba:	4b9b      	ldr	r3, [pc, #620]	@ (8003628 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80033bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033be:	08db      	lsrs	r3, r3, #3
 80033c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	fb02 f303 	mul.w	r3, r2, r3
 80033ca:	ee07 3a90 	vmov	s15, r3
 80033ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033d2:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	2b03      	cmp	r3, #3
 80033da:	d062      	beq.n	80034a2 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	2b03      	cmp	r3, #3
 80033e0:	f200 8081 	bhi.w	80034e6 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d024      	beq.n	8003434 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d17a      	bne.n	80034e6 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	ee07 3a90 	vmov	s15, r3
 80033f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033fa:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800362c <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 80033fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003402:	4b89      	ldr	r3, [pc, #548]	@ (8003628 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003404:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800340a:	ee07 3a90 	vmov	s15, r3
 800340e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8003412:	ed97 6a02 	vldr	s12, [r7, #8]
 8003416:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8003630 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800341a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800341e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8003422:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003426:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800342a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800342e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003432:	e08f      	b.n	8003554 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8003434:	4b7c      	ldr	r3, [pc, #496]	@ (8003628 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d005      	beq.n	800344c <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8003440:	4b79      	ldr	r3, [pc, #484]	@ (8003628 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	0f1b      	lsrs	r3, r3, #28
 8003446:	f003 030f 	and.w	r3, r3, #15
 800344a:	e006      	b.n	800345a <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 800344c:	4b76      	ldr	r3, [pc, #472]	@ (8003628 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800344e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003452:	041b      	lsls	r3, r3, #16
 8003454:	0f1b      	lsrs	r3, r3, #28
 8003456:	f003 030f 	and.w	r3, r3, #15
 800345a:	4a76      	ldr	r2, [pc, #472]	@ (8003634 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800345c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003460:	ee07 3a90 	vmov	s15, r3
 8003464:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	ee07 3a90 	vmov	s15, r3
 800346e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003472:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	ee07 3a90 	vmov	s15, r3
 800347c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003480:	ed97 6a02 	vldr	s12, [r7, #8]
 8003484:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8003630 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8003488:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800348c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003490:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003494:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8003498:	ee67 7a27 	vmul.f32	s15, s14, s15
 800349c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80034a0:	e058      	b.n	8003554 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	ee07 3a90 	vmov	s15, r3
 80034a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034ac:	eddf 6a62 	vldr	s13, [pc, #392]	@ 8003638 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
 80034b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034b4:	4b5c      	ldr	r3, [pc, #368]	@ (8003628 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80034b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034bc:	ee07 3a90 	vmov	s15, r3
 80034c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80034c4:	ed97 6a02 	vldr	s12, [r7, #8]
 80034c8:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8003630 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80034cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80034d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80034d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80034d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80034dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034e0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80034e4:	e036      	b.n	8003554 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80034e6:	4b50      	ldr	r3, [pc, #320]	@ (8003628 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d005      	beq.n	80034fe <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 80034f2:	4b4d      	ldr	r3, [pc, #308]	@ (8003628 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	0f1b      	lsrs	r3, r3, #28
 80034f8:	f003 030f 	and.w	r3, r3, #15
 80034fc:	e006      	b.n	800350c <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 80034fe:	4b4a      	ldr	r3, [pc, #296]	@ (8003628 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003500:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003504:	041b      	lsls	r3, r3, #16
 8003506:	0f1b      	lsrs	r3, r3, #28
 8003508:	f003 030f 	and.w	r3, r3, #15
 800350c:	4a49      	ldr	r2, [pc, #292]	@ (8003634 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800350e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003512:	ee07 3a90 	vmov	s15, r3
 8003516:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	ee07 3a90 	vmov	s15, r3
 8003520:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003524:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	ee07 3a90 	vmov	s15, r3
 800352e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003532:	ed97 6a02 	vldr	s12, [r7, #8]
 8003536:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8003630 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800353a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800353e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003542:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003546:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800354a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800354e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003552:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8003554:	4b34      	ldr	r3, [pc, #208]	@ (8003628 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003558:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d017      	beq.n	8003590 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003560:	4b31      	ldr	r3, [pc, #196]	@ (8003628 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003562:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003564:	0a5b      	lsrs	r3, r3, #9
 8003566:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800356a:	ee07 3a90 	vmov	s15, r3
 800356e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8003572:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003576:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800357a:	edd7 6a07 	vldr	s13, [r7, #28]
 800357e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003582:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003586:	ee17 2a90 	vmov	r2, s15
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	601a      	str	r2, [r3, #0]
 800358e:	e002      	b.n	8003596 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8003596:	4b24      	ldr	r3, [pc, #144]	@ (8003628 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800359a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d017      	beq.n	80035d2 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80035a2:	4b21      	ldr	r3, [pc, #132]	@ (8003628 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80035a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035a6:	0c1b      	lsrs	r3, r3, #16
 80035a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80035ac:	ee07 3a90 	vmov	s15, r3
 80035b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 80035b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80035b8:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80035bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80035c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035c8:	ee17 2a90 	vmov	r2, s15
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	605a      	str	r2, [r3, #4]
 80035d0:	e002      	b.n	80035d8 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80035d8:	4b13      	ldr	r3, [pc, #76]	@ (8003628 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80035da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d017      	beq.n	8003614 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80035e4:	4b10      	ldr	r3, [pc, #64]	@ (8003628 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80035e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035e8:	0e1b      	lsrs	r3, r3, #24
 80035ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80035ee:	ee07 3a90 	vmov	s15, r3
 80035f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 80035f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80035fa:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80035fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8003602:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003606:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800360a:	ee17 2a90 	vmov	r2, s15
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003612:	e002      	b.n	800361a <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	609a      	str	r2, [r3, #8]
}
 800361a:	bf00      	nop
 800361c:	3724      	adds	r7, #36	@ 0x24
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	46020c00 	.word	0x46020c00
 800362c:	4b742400 	.word	0x4b742400
 8003630:	46000000 	.word	0x46000000
 8003634:	08008248 	.word	0x08008248
 8003638:	4af42400 	.word	0x4af42400

0800363c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800363c:	b480      	push	{r7}
 800363e:	b089      	sub	sp, #36	@ 0x24
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8003644:	4ba6      	ldr	r3, [pc, #664]	@ (80038e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003646:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003648:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800364c:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800364e:	4ba4      	ldr	r3, [pc, #656]	@ (80038e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003652:	f003 0303 	and.w	r3, r3, #3
 8003656:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8003658:	4ba1      	ldr	r3, [pc, #644]	@ (80038e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800365a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800365c:	0a1b      	lsrs	r3, r3, #8
 800365e:	f003 030f 	and.w	r3, r3, #15
 8003662:	3301      	adds	r3, #1
 8003664:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8003666:	4b9e      	ldr	r3, [pc, #632]	@ (80038e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800366a:	091b      	lsrs	r3, r3, #4
 800366c:	f003 0301 	and.w	r3, r3, #1
 8003670:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8003672:	4b9b      	ldr	r3, [pc, #620]	@ (80038e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003674:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003676:	08db      	lsrs	r3, r3, #3
 8003678:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800367c:	68fa      	ldr	r2, [r7, #12]
 800367e:	fb02 f303 	mul.w	r3, r2, r3
 8003682:	ee07 3a90 	vmov	s15, r3
 8003686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800368a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	2b03      	cmp	r3, #3
 8003692:	d062      	beq.n	800375a <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	2b03      	cmp	r3, #3
 8003698:	f200 8081 	bhi.w	800379e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d024      	beq.n	80036ec <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d17a      	bne.n	800379e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	ee07 3a90 	vmov	s15, r3
 80036ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036b2:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80038e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 80036b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036ba:	4b89      	ldr	r3, [pc, #548]	@ (80038e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80036bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036c2:	ee07 3a90 	vmov	s15, r3
 80036c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80036ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80036ce:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80038e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80036d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80036d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80036da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80036de:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80036e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036e6:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 80036ea:	e08f      	b.n	800380c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80036ec:	4b7c      	ldr	r3, [pc, #496]	@ (80038e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d005      	beq.n	8003704 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 80036f8:	4b79      	ldr	r3, [pc, #484]	@ (80038e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	0f1b      	lsrs	r3, r3, #28
 80036fe:	f003 030f 	and.w	r3, r3, #15
 8003702:	e006      	b.n	8003712 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8003704:	4b76      	ldr	r3, [pc, #472]	@ (80038e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003706:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800370a:	041b      	lsls	r3, r3, #16
 800370c:	0f1b      	lsrs	r3, r3, #28
 800370e:	f003 030f 	and.w	r3, r3, #15
 8003712:	4a76      	ldr	r2, [pc, #472]	@ (80038ec <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8003714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003718:	ee07 3a90 	vmov	s15, r3
 800371c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	ee07 3a90 	vmov	s15, r3
 8003726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800372a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	ee07 3a90 	vmov	s15, r3
 8003734:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003738:	ed97 6a02 	vldr	s12, [r7, #8]
 800373c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80038e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8003740:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003744:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003748:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800374c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8003750:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003754:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003758:	e058      	b.n	800380c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	ee07 3a90 	vmov	s15, r3
 8003760:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003764:	eddf 6a62 	vldr	s13, [pc, #392]	@ 80038f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
 8003768:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800376c:	4b5c      	ldr	r3, [pc, #368]	@ (80038e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800376e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003770:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003774:	ee07 3a90 	vmov	s15, r3
 8003778:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800377c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003780:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80038e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8003784:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003788:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800378c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003790:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003794:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003798:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800379c:	e036      	b.n	800380c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800379e:	4b50      	ldr	r3, [pc, #320]	@ (80038e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d005      	beq.n	80037b6 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 80037aa:	4b4d      	ldr	r3, [pc, #308]	@ (80038e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	0f1b      	lsrs	r3, r3, #28
 80037b0:	f003 030f 	and.w	r3, r3, #15
 80037b4:	e006      	b.n	80037c4 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 80037b6:	4b4a      	ldr	r3, [pc, #296]	@ (80038e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80037b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80037bc:	041b      	lsls	r3, r3, #16
 80037be:	0f1b      	lsrs	r3, r3, #28
 80037c0:	f003 030f 	and.w	r3, r3, #15
 80037c4:	4a49      	ldr	r2, [pc, #292]	@ (80038ec <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 80037c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037ca:	ee07 3a90 	vmov	s15, r3
 80037ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	ee07 3a90 	vmov	s15, r3
 80037d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	ee07 3a90 	vmov	s15, r3
 80037e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80037ee:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80038e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80037f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80037fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8003802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003806:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800380a:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800380c:	4b34      	ldr	r3, [pc, #208]	@ (80038e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800380e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003810:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d017      	beq.n	8003848 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003818:	4b31      	ldr	r3, [pc, #196]	@ (80038e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800381a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800381c:	0a5b      	lsrs	r3, r3, #9
 800381e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003822:	ee07 3a90 	vmov	s15, r3
 8003826:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800382a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800382e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003832:	edd7 6a07 	vldr	s13, [r7, #28]
 8003836:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800383a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800383e:	ee17 2a90 	vmov	r2, s15
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	601a      	str	r2, [r3, #0]
 8003846:	e002      	b.n	800384e <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800384e:	4b24      	ldr	r3, [pc, #144]	@ (80038e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003852:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d017      	beq.n	800388a <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800385a:	4b21      	ldr	r3, [pc, #132]	@ (80038e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800385c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800385e:	0c1b      	lsrs	r3, r3, #16
 8003860:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003864:	ee07 3a90 	vmov	s15, r3
 8003868:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800386c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003870:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003874:	edd7 6a07 	vldr	s13, [r7, #28]
 8003878:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800387c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003880:	ee17 2a90 	vmov	r2, s15
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	605a      	str	r2, [r3, #4]
 8003888:	e002      	b.n	8003890 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8003890:	4b13      	ldr	r3, [pc, #76]	@ (80038e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003894:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d017      	beq.n	80038cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800389c:	4b10      	ldr	r3, [pc, #64]	@ (80038e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800389e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038a0:	0e1b      	lsrs	r3, r3, #24
 80038a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80038a6:	ee07 3a90 	vmov	s15, r3
 80038aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 80038ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80038b2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80038b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80038ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038c2:	ee17 2a90 	vmov	r2, s15
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80038ca:	e002      	b.n	80038d2 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	609a      	str	r2, [r3, #8]
}
 80038d2:	bf00      	nop
 80038d4:	3724      	adds	r7, #36	@ 0x24
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	46020c00 	.word	0x46020c00
 80038e4:	4b742400 	.word	0x4b742400
 80038e8:	46000000 	.word	0x46000000
 80038ec:	08008248 	.word	0x08008248
 80038f0:	4af42400 	.word	0x4af42400

080038f4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b08e      	sub	sp, #56	@ 0x38
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80038fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003902:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8003906:	430b      	orrs	r3, r1
 8003908:	d145      	bne.n	8003996 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800390a:	4ba7      	ldr	r3, [pc, #668]	@ (8003ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800390c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003910:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003914:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8003916:	4ba4      	ldr	r3, [pc, #656]	@ (8003ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8003918:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800391c:	f003 0302 	and.w	r3, r3, #2
 8003920:	2b02      	cmp	r3, #2
 8003922:	d108      	bne.n	8003936 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8003924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003926:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800392a:	d104      	bne.n	8003936 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800392c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003930:	637b      	str	r3, [r7, #52]	@ 0x34
 8003932:	f001 bb35 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8003936:	4b9c      	ldr	r3, [pc, #624]	@ (8003ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8003938:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800393c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003940:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003944:	d114      	bne.n	8003970 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8003946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003948:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800394c:	d110      	bne.n	8003970 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800394e:	4b96      	ldr	r3, [pc, #600]	@ (8003ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8003950:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003954:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003958:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800395c:	d103      	bne.n	8003966 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800395e:	23fa      	movs	r3, #250	@ 0xfa
 8003960:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8003962:	f001 bb1d 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = LSI_VALUE;
 8003966:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800396a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800396c:	f001 bb18 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8003970:	4b8d      	ldr	r3, [pc, #564]	@ (8003ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003978:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800397c:	d107      	bne.n	800398e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800397e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003980:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003984:	d103      	bne.n	800398e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8003986:	4b89      	ldr	r3, [pc, #548]	@ (8003bac <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8003988:	637b      	str	r3, [r7, #52]	@ 0x34
 800398a:	f001 bb09 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800398e:	2300      	movs	r3, #0
 8003990:	637b      	str	r3, [r7, #52]	@ 0x34
 8003992:	f001 bb05 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8003996:	e9d7 2300 	ldrd	r2, r3, [r7]
 800399a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800399e:	430b      	orrs	r3, r1
 80039a0:	d151      	bne.n	8003a46 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80039a2:	4b81      	ldr	r3, [pc, #516]	@ (8003ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80039a4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80039a8:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 80039ac:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80039ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039b0:	2b80      	cmp	r3, #128	@ 0x80
 80039b2:	d035      	beq.n	8003a20 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 80039b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039b6:	2b80      	cmp	r3, #128	@ 0x80
 80039b8:	d841      	bhi.n	8003a3e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80039ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039bc:	2b60      	cmp	r3, #96	@ 0x60
 80039be:	d02a      	beq.n	8003a16 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 80039c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039c2:	2b60      	cmp	r3, #96	@ 0x60
 80039c4:	d83b      	bhi.n	8003a3e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80039c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039c8:	2b40      	cmp	r3, #64	@ 0x40
 80039ca:	d009      	beq.n	80039e0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80039cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ce:	2b40      	cmp	r3, #64	@ 0x40
 80039d0:	d835      	bhi.n	8003a3e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80039d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d00c      	beq.n	80039f2 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 80039d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039da:	2b20      	cmp	r3, #32
 80039dc:	d012      	beq.n	8003a04 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80039de:	e02e      	b.n	8003a3e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80039e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7ff fb71 	bl	80030cc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80039ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80039ee:	f001 bad7 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80039f2:	f107 0318 	add.w	r3, r7, #24
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7ff fcc4 	bl	8003384 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003a00:	f001 bace 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003a04:	f107 030c 	add.w	r3, r7, #12
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7ff fe17 	bl	800363c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003a12:	f001 bac5 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8003a16:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8003a1a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003a1c:	f001 bac0 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003a20:	4b61      	ldr	r3, [pc, #388]	@ (8003ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a2c:	d103      	bne.n	8003a36 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8003a2e:	4b60      	ldr	r3, [pc, #384]	@ (8003bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8003a30:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8003a32:	f001 bab5 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8003a36:	2300      	movs	r3, #0
 8003a38:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003a3a:	f001 bab1 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default :
      {
        frequency = 0U;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003a42:	f001 baad 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8003a46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a4a:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8003a4e:	430b      	orrs	r3, r1
 8003a50:	d158      	bne.n	8003b04 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8003a52:	4b55      	ldr	r3, [pc, #340]	@ (8003ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8003a54:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003a58:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003a5c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8003a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a64:	d03b      	beq.n	8003ade <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8003a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a6c:	d846      	bhi.n	8003afc <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8003a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a70:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a74:	d02e      	beq.n	8003ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8003a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a78:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a7c:	d83e      	bhi.n	8003afc <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8003a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a84:	d00b      	beq.n	8003a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8003a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a8c:	d836      	bhi.n	8003afc <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8003a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d00d      	beq.n	8003ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8003a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a9a:	d012      	beq.n	8003ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8003a9c:	e02e      	b.n	8003afc <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003a9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7ff fb12 	bl	80030cc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8003aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aaa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003aac:	f001 ba78 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003ab0:	f107 0318 	add.w	r3, r7, #24
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7ff fc65 	bl	8003384 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003abe:	f001 ba6f 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003ac2:	f107 030c 	add.w	r3, r7, #12
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7ff fdb8 	bl	800363c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003ad0:	f001 ba66 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8003ad4:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8003ad8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003ada:	f001 ba61 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003ade:	4b32      	ldr	r3, [pc, #200]	@ (8003ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ae6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003aea:	d103      	bne.n	8003af4 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8003aec:	4b30      	ldr	r3, [pc, #192]	@ (8003bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8003aee:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8003af0:	f001 ba56 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8003af4:	2300      	movs	r3, #0
 8003af6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003af8:	f001 ba52 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default :

        frequency = 0U;
 8003afc:	2300      	movs	r3, #0
 8003afe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003b00:	f001 ba4e 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8003b04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b08:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8003b0c:	430b      	orrs	r3, r1
 8003b0e:	d126      	bne.n	8003b5e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8003b10:	4b25      	ldr	r3, [pc, #148]	@ (8003ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8003b12:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003b16:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b1a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8003b1c:	4b22      	ldr	r3, [pc, #136]	@ (8003ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b28:	d106      	bne.n	8003b38 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8003b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d103      	bne.n	8003b38 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8003b30:	4b1f      	ldr	r3, [pc, #124]	@ (8003bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8003b32:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b34:	f001 ba34 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8003b38:	4b1b      	ldr	r3, [pc, #108]	@ (8003ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b44:	d107      	bne.n	8003b56 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 8003b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b4c:	d103      	bne.n	8003b56 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8003b4e:	4b19      	ldr	r3, [pc, #100]	@ (8003bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8003b50:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b52:	f001 ba25 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8003b56:	2300      	movs	r3, #0
 8003b58:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b5a:	f001 ba21 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8003b5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b62:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8003b66:	430b      	orrs	r3, r1
 8003b68:	d16e      	bne.n	8003c48 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8003b6a:	4b0f      	ldr	r3, [pc, #60]	@ (8003ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8003b6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b70:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8003b74:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8003b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b78:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003b7c:	d03d      	beq.n	8003bfa <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8003b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b80:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003b84:	d85c      	bhi.n	8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8003b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b8c:	d014      	beq.n	8003bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8003b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b90:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b94:	d854      	bhi.n	8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8003b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d01f      	beq.n	8003bdc <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8003b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b9e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003ba2:	d012      	beq.n	8003bca <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8003ba4:	e04c      	b.n	8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8003ba6:	bf00      	nop
 8003ba8:	46020c00 	.word	0x46020c00
 8003bac:	0003d090 	.word	0x0003d090
 8003bb0:	00f42400 	.word	0x00f42400
 8003bb4:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003bb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7ff fa85 	bl	80030cc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8003bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bc4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003bc6:	f001 b9eb 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003bca:	f107 0318 	add.w	r3, r7, #24
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7ff fbd8 	bl	8003384 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003bd8:	f001 b9e2 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8003bdc:	4ba7      	ldr	r3, [pc, #668]	@ (8003e7c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003be4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003be8:	d103      	bne.n	8003bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8003bea:	4ba5      	ldr	r3, [pc, #660]	@ (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003bec:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8003bee:	f001 b9d7 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003bf6:	f001 b9d3 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8003bfa:	4ba0      	ldr	r3, [pc, #640]	@ (8003e7c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0320 	and.w	r3, r3, #32
 8003c02:	2b20      	cmp	r3, #32
 8003c04:	d118      	bne.n	8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8003c06:	4b9d      	ldr	r3, [pc, #628]	@ (8003e7c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d005      	beq.n	8003c1e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8003c12:	4b9a      	ldr	r3, [pc, #616]	@ (8003e7c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	0e1b      	lsrs	r3, r3, #24
 8003c18:	f003 030f 	and.w	r3, r3, #15
 8003c1c:	e006      	b.n	8003c2c <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8003c1e:	4b97      	ldr	r3, [pc, #604]	@ (8003e7c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8003c20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003c24:	041b      	lsls	r3, r3, #16
 8003c26:	0e1b      	lsrs	r3, r3, #24
 8003c28:	f003 030f 	and.w	r3, r3, #15
 8003c2c:	4a95      	ldr	r2, [pc, #596]	@ (8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8003c2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c32:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8003c34:	f001 b9b4 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003c3c:	f001 b9b0 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default :

        frequency = 0U;
 8003c40:	2300      	movs	r3, #0
 8003c42:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003c44:	f001 b9ac 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8003c48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c4c:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8003c50:	430b      	orrs	r3, r1
 8003c52:	d17f      	bne.n	8003d54 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8003c54:	4b89      	ldr	r3, [pc, #548]	@ (8003e7c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8003c56:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003c5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c5e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8003c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d165      	bne.n	8003d32 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8003c66:	4b85      	ldr	r3, [pc, #532]	@ (8003e7c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8003c68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c6c:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8003c70:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8003c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c74:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003c78:	d034      	beq.n	8003ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 8003c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c7c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003c80:	d853      	bhi.n	8003d2a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8003c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c84:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c88:	d00b      	beq.n	8003ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 8003c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c8c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c90:	d84b      	bhi.n	8003d2a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8003c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d016      	beq.n	8003cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 8003c98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c9a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003c9e:	d009      	beq.n	8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8003ca0:	e043      	b.n	8003d2a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003ca2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f7ff fa10 	bl	80030cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cae:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8003cb0:	f001 b976 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003cb4:	f107 0318 	add.w	r3, r7, #24
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7ff fb63 	bl	8003384 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8003cc2:	f001 b96d 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8003cc6:	4b6d      	ldr	r3, [pc, #436]	@ (8003e7c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003cce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cd2:	d103      	bne.n	8003cdc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 8003cd4:	4b6a      	ldr	r3, [pc, #424]	@ (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003cd6:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8003cd8:	f001 b962 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
            frequency = 0U;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8003ce0:	f001 b95e 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8003ce4:	4b65      	ldr	r3, [pc, #404]	@ (8003e7c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0320 	and.w	r3, r3, #32
 8003cec:	2b20      	cmp	r3, #32
 8003cee:	d118      	bne.n	8003d22 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8003cf0:	4b62      	ldr	r3, [pc, #392]	@ (8003e7c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d005      	beq.n	8003d08 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8003cfc:	4b5f      	ldr	r3, [pc, #380]	@ (8003e7c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	0e1b      	lsrs	r3, r3, #24
 8003d02:	f003 030f 	and.w	r3, r3, #15
 8003d06:	e006      	b.n	8003d16 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8003d08:	4b5c      	ldr	r3, [pc, #368]	@ (8003e7c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8003d0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003d0e:	041b      	lsls	r3, r3, #16
 8003d10:	0e1b      	lsrs	r3, r3, #24
 8003d12:	f003 030f 	and.w	r3, r3, #15
 8003d16:	4a5b      	ldr	r2, [pc, #364]	@ (8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8003d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d1c:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8003d1e:	f001 b93f 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
            frequency = 0U;
 8003d22:	2300      	movs	r3, #0
 8003d24:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8003d26:	f001 b93b 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
        }
        default :
        {
          frequency = 0U;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8003d2e:	f001 b937 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8003d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d34:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d38:	d108      	bne.n	8003d4c <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003d3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7ff f9c4 	bl	80030cc <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8003d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d46:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d48:	f001 b92a 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else
    {
      frequency = 0U;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d50:	f001 b926 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8003d54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d58:	1e51      	subs	r1, r2, #1
 8003d5a:	430b      	orrs	r3, r1
 8003d5c:	d136      	bne.n	8003dcc <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8003d5e:	4b47      	ldr	r3, [pc, #284]	@ (8003e7c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8003d60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d64:	f003 0303 	and.w	r3, r3, #3
 8003d68:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8003d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d104      	bne.n	8003d7a <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8003d70:	f7ff f8fe 	bl	8002f70 <HAL_RCC_GetPCLK2Freq>
 8003d74:	6378      	str	r0, [r7, #52]	@ 0x34
 8003d76:	f001 b913 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8003d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d104      	bne.n	8003d8a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8003d80:	f7fe ffc2 	bl	8002d08 <HAL_RCC_GetSysClockFreq>
 8003d84:	6378      	str	r0, [r7, #52]	@ 0x34
 8003d86:	f001 b90b 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8003d8a:	4b3c      	ldr	r3, [pc, #240]	@ (8003e7c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d96:	d106      	bne.n	8003da6 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8003d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d103      	bne.n	8003da6 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 8003d9e:	4b3a      	ldr	r3, [pc, #232]	@ (8003e88 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8003da0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003da2:	f001 b8fd 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8003da6:	4b35      	ldr	r3, [pc, #212]	@ (8003e7c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8003da8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003dac:	f003 0302 	and.w	r3, r3, #2
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d107      	bne.n	8003dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8003db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003db6:	2b03      	cmp	r3, #3
 8003db8:	d104      	bne.n	8003dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 8003dba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003dbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8003dc0:	f001 b8ee 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8003dc8:	f001 b8ea 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8003dcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003dd0:	1e91      	subs	r1, r2, #2
 8003dd2:	430b      	orrs	r3, r1
 8003dd4:	d136      	bne.n	8003e44 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8003dd6:	4b29      	ldr	r3, [pc, #164]	@ (8003e7c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8003dd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003ddc:	f003 030c 	and.w	r3, r3, #12
 8003de0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8003de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d104      	bne.n	8003df2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8003de8:	f7ff f8ae 	bl	8002f48 <HAL_RCC_GetPCLK1Freq>
 8003dec:	6378      	str	r0, [r7, #52]	@ 0x34
 8003dee:	f001 b8d7 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8003df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003df4:	2b04      	cmp	r3, #4
 8003df6:	d104      	bne.n	8003e02 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8003df8:	f7fe ff86 	bl	8002d08 <HAL_RCC_GetSysClockFreq>
 8003dfc:	6378      	str	r0, [r7, #52]	@ 0x34
 8003dfe:	f001 b8cf 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8003e02:	4b1e      	ldr	r3, [pc, #120]	@ (8003e7c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e0e:	d106      	bne.n	8003e1e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8003e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e12:	2b08      	cmp	r3, #8
 8003e14:	d103      	bne.n	8003e1e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 8003e16:	4b1c      	ldr	r3, [pc, #112]	@ (8003e88 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8003e18:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e1a:	f001 b8c1 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8003e1e:	4b17      	ldr	r3, [pc, #92]	@ (8003e7c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8003e20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e24:	f003 0302 	and.w	r3, r3, #2
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d107      	bne.n	8003e3c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8003e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e2e:	2b0c      	cmp	r3, #12
 8003e30:	d104      	bne.n	8003e3c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 8003e32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e36:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e38:	f001 b8b2 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e40:	f001 b8ae 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8003e44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e48:	1f11      	subs	r1, r2, #4
 8003e4a:	430b      	orrs	r3, r1
 8003e4c:	d13f      	bne.n	8003ece <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8003e4e:	4b0b      	ldr	r3, [pc, #44]	@ (8003e7c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8003e50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003e54:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003e58:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8003e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d104      	bne.n	8003e6a <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8003e60:	f7ff f872 	bl	8002f48 <HAL_RCC_GetPCLK1Freq>
 8003e64:	6378      	str	r0, [r7, #52]	@ 0x34
 8003e66:	f001 b89b 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8003e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e6c:	2b10      	cmp	r3, #16
 8003e6e:	d10d      	bne.n	8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8003e70:	f7fe ff4a 	bl	8002d08 <HAL_RCC_GetSysClockFreq>
 8003e74:	6378      	str	r0, [r7, #52]	@ 0x34
 8003e76:	f001 b893 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
 8003e7a:	bf00      	nop
 8003e7c:	46020c00 	.word	0x46020c00
 8003e80:	02dc6c00 	.word	0x02dc6c00
 8003e84:	08008248 	.word	0x08008248
 8003e88:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8003e8c:	4ba8      	ldr	r3, [pc, #672]	@ (8004130 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e98:	d106      	bne.n	8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 8003e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e9c:	2b20      	cmp	r3, #32
 8003e9e:	d103      	bne.n	8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 8003ea0:	4ba4      	ldr	r3, [pc, #656]	@ (8004134 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003ea2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ea4:	f001 b87c 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8003ea8:	4ba1      	ldr	r3, [pc, #644]	@ (8004130 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003eaa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d107      	bne.n	8003ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8003eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eb8:	2b30      	cmp	r3, #48	@ 0x30
 8003eba:	d104      	bne.n	8003ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 8003ebc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ec0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ec2:	f001 b86d 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003eca:	f001 b869 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8003ece:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ed2:	f1a2 0108 	sub.w	r1, r2, #8
 8003ed6:	430b      	orrs	r3, r1
 8003ed8:	d136      	bne.n	8003f48 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8003eda:	4b95      	ldr	r3, [pc, #596]	@ (8004130 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003edc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003ee0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003ee4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8003ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d104      	bne.n	8003ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8003eec:	f7ff f82c 	bl	8002f48 <HAL_RCC_GetPCLK1Freq>
 8003ef0:	6378      	str	r0, [r7, #52]	@ 0x34
 8003ef2:	f001 b855 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8003ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ef8:	2b40      	cmp	r3, #64	@ 0x40
 8003efa:	d104      	bne.n	8003f06 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8003efc:	f7fe ff04 	bl	8002d08 <HAL_RCC_GetSysClockFreq>
 8003f00:	6378      	str	r0, [r7, #52]	@ 0x34
 8003f02:	f001 b84d 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8003f06:	4b8a      	ldr	r3, [pc, #552]	@ (8004130 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f12:	d106      	bne.n	8003f22 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 8003f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f16:	2b80      	cmp	r3, #128	@ 0x80
 8003f18:	d103      	bne.n	8003f22 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 8003f1a:	4b86      	ldr	r3, [pc, #536]	@ (8004134 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003f1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f1e:	f001 b83f 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8003f22:	4b83      	ldr	r3, [pc, #524]	@ (8004130 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003f24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f28:	f003 0302 	and.w	r3, r3, #2
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d107      	bne.n	8003f40 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8003f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f32:	2bc0      	cmp	r3, #192	@ 0xc0
 8003f34:	d104      	bne.n	8003f40 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 8003f36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f3c:	f001 b830 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8003f40:	2300      	movs	r3, #0
 8003f42:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f44:	f001 b82c 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8003f48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f4c:	f1a2 0110 	sub.w	r1, r2, #16
 8003f50:	430b      	orrs	r3, r1
 8003f52:	d139      	bne.n	8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8003f54:	4b76      	ldr	r3, [pc, #472]	@ (8004130 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003f56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003f5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f5e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8003f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d104      	bne.n	8003f70 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8003f66:	f7fe ffef 	bl	8002f48 <HAL_RCC_GetPCLK1Freq>
 8003f6a:	6378      	str	r0, [r7, #52]	@ 0x34
 8003f6c:	f001 b818 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8003f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f76:	d104      	bne.n	8003f82 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8003f78:	f7fe fec6 	bl	8002d08 <HAL_RCC_GetSysClockFreq>
 8003f7c:	6378      	str	r0, [r7, #52]	@ 0x34
 8003f7e:	f001 b80f 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8003f82:	4b6b      	ldr	r3, [pc, #428]	@ (8004130 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f8e:	d107      	bne.n	8003fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 8003f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f96:	d103      	bne.n	8003fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 8003f98:	4b66      	ldr	r3, [pc, #408]	@ (8004134 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003f9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f9c:	f001 b800 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8003fa0:	4b63      	ldr	r3, [pc, #396]	@ (8004130 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003fa2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d108      	bne.n	8003fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 8003fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fb0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003fb4:	d104      	bne.n	8003fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 8003fb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003fba:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fbc:	f000 bff0 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fc4:	f000 bfec 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 8003fc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003fcc:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 8003fd0:	430b      	orrs	r3, r1
 8003fd2:	d139      	bne.n	8004048 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8003fd4:	4b56      	ldr	r3, [pc, #344]	@ (8004130 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003fd6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003fda:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003fde:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8003fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d104      	bne.n	8003ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8003fe6:	f7fe ffaf 	bl	8002f48 <HAL_RCC_GetPCLK1Freq>
 8003fea:	6378      	str	r0, [r7, #52]	@ 0x34
 8003fec:	f000 bfd8 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 8003ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ff2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ff6:	d104      	bne.n	8004002 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8003ff8:	f7fe fe86 	bl	8002d08 <HAL_RCC_GetSysClockFreq>
 8003ffc:	6378      	str	r0, [r7, #52]	@ 0x34
 8003ffe:	f000 bfcf 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8004002:	4b4b      	ldr	r3, [pc, #300]	@ (8004130 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800400a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800400e:	d107      	bne.n	8004020 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8004010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004012:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004016:	d103      	bne.n	8004020 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 8004018:	4b46      	ldr	r3, [pc, #280]	@ (8004134 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800401a:	637b      	str	r3, [r7, #52]	@ 0x34
 800401c:	f000 bfc0 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8004020:	4b43      	ldr	r3, [pc, #268]	@ (8004130 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004022:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004026:	f003 0302 	and.w	r3, r3, #2
 800402a:	2b02      	cmp	r3, #2
 800402c:	d108      	bne.n	8004040 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 800402e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004030:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004034:	d104      	bne.n	8004040 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 8004036:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800403a:	637b      	str	r3, [r7, #52]	@ 0x34
 800403c:	f000 bfb0 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8004040:	2300      	movs	r3, #0
 8004042:	637b      	str	r3, [r7, #52]	@ 0x34
 8004044:	f000 bfac 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8004048:	e9d7 2300 	ldrd	r2, r3, [r7]
 800404c:	f1a2 0120 	sub.w	r1, r2, #32
 8004050:	430b      	orrs	r3, r1
 8004052:	d158      	bne.n	8004106 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004054:	4b36      	ldr	r3, [pc, #216]	@ (8004130 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004056:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800405a:	f003 0307 	and.w	r3, r3, #7
 800405e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8004060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004062:	2b00      	cmp	r3, #0
 8004064:	d104      	bne.n	8004070 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8004066:	f7fe ff97 	bl	8002f98 <HAL_RCC_GetPCLK3Freq>
 800406a:	6378      	str	r0, [r7, #52]	@ 0x34
 800406c:	f000 bf98 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8004070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004072:	2b01      	cmp	r3, #1
 8004074:	d104      	bne.n	8004080 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004076:	f7fe fe47 	bl	8002d08 <HAL_RCC_GetSysClockFreq>
 800407a:	6378      	str	r0, [r7, #52]	@ 0x34
 800407c:	f000 bf90 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8004080:	4b2b      	ldr	r3, [pc, #172]	@ (8004130 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004088:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800408c:	d106      	bne.n	800409c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 800408e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004090:	2b02      	cmp	r3, #2
 8004092:	d103      	bne.n	800409c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 8004094:	4b27      	ldr	r3, [pc, #156]	@ (8004134 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004096:	637b      	str	r3, [r7, #52]	@ 0x34
 8004098:	f000 bf82 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800409c:	4b24      	ldr	r3, [pc, #144]	@ (8004130 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800409e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80040a2:	f003 0302 	and.w	r3, r3, #2
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d107      	bne.n	80040ba <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 80040aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ac:	2b03      	cmp	r3, #3
 80040ae:	d104      	bne.n	80040ba <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 80040b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80040b6:	f000 bf73 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 80040ba:	4b1d      	ldr	r3, [pc, #116]	@ (8004130 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0320 	and.w	r3, r3, #32
 80040c2:	2b20      	cmp	r3, #32
 80040c4:	d11b      	bne.n	80040fe <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 80040c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040c8:	2b04      	cmp	r3, #4
 80040ca:	d118      	bne.n	80040fe <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80040cc:	4b18      	ldr	r3, [pc, #96]	@ (8004130 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d005      	beq.n	80040e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 80040d8:	4b15      	ldr	r3, [pc, #84]	@ (8004130 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	0e1b      	lsrs	r3, r3, #24
 80040de:	f003 030f 	and.w	r3, r3, #15
 80040e2:	e006      	b.n	80040f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 80040e4:	4b12      	ldr	r3, [pc, #72]	@ (8004130 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80040e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80040ea:	041b      	lsls	r3, r3, #16
 80040ec:	0e1b      	lsrs	r3, r3, #24
 80040ee:	f003 030f 	and.w	r3, r3, #15
 80040f2:	4a11      	ldr	r2, [pc, #68]	@ (8004138 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80040f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80040fa:	f000 bf51 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 80040fe:	2300      	movs	r3, #0
 8004100:	637b      	str	r3, [r7, #52]	@ 0x34
 8004102:	f000 bf4d 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8004106:	e9d7 2300 	ldrd	r2, r3, [r7]
 800410a:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800410e:	430b      	orrs	r3, r1
 8004110:	d172      	bne.n	80041f8 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8004112:	4b07      	ldr	r3, [pc, #28]	@ (8004130 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004114:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004118:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800411c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800411e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004120:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004124:	d10a      	bne.n	800413c <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004126:	f7fe fdef 	bl	8002d08 <HAL_RCC_GetSysClockFreq>
 800412a:	6378      	str	r0, [r7, #52]	@ 0x34
 800412c:	f000 bf38 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
 8004130:	46020c00 	.word	0x46020c00
 8004134:	00f42400 	.word	0x00f42400
 8004138:	08008248 	.word	0x08008248
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800413c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800413e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004142:	d108      	bne.n	8004156 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004144:	f107 0318 	add.w	r3, r7, #24
 8004148:	4618      	mov	r0, r3
 800414a:	f7ff f91b 	bl	8003384 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800414e:	6a3b      	ldr	r3, [r7, #32]
 8004150:	637b      	str	r3, [r7, #52]	@ 0x34
 8004152:	f000 bf25 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8004156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004158:	2b00      	cmp	r3, #0
 800415a:	d104      	bne.n	8004166 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800415c:	f7fe feda 	bl	8002f14 <HAL_RCC_GetHCLKFreq>
 8004160:	6378      	str	r0, [r7, #52]	@ 0x34
 8004162:	f000 bf1d 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8004166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004168:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800416c:	d122      	bne.n	80041b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800416e:	4bb0      	ldr	r3, [pc, #704]	@ (8004430 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0320 	and.w	r3, r3, #32
 8004176:	2b20      	cmp	r3, #32
 8004178:	d118      	bne.n	80041ac <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800417a:	4bad      	ldr	r3, [pc, #692]	@ (8004430 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d005      	beq.n	8004192 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 8004186:	4baa      	ldr	r3, [pc, #680]	@ (8004430 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	0e1b      	lsrs	r3, r3, #24
 800418c:	f003 030f 	and.w	r3, r3, #15
 8004190:	e006      	b.n	80041a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 8004192:	4ba7      	ldr	r3, [pc, #668]	@ (8004430 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004194:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004198:	041b      	lsls	r3, r3, #16
 800419a:	0e1b      	lsrs	r3, r3, #24
 800419c:	f003 030f 	and.w	r3, r3, #15
 80041a0:	4aa4      	ldr	r2, [pc, #656]	@ (8004434 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 80041a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80041a8:	f000 befa 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = 0U;
 80041ac:	2300      	movs	r3, #0
 80041ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80041b0:	f000 bef6 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80041b4:	4b9e      	ldr	r3, [pc, #632]	@ (8004430 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80041c0:	d107      	bne.n	80041d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 80041c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041c4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80041c8:	d103      	bne.n	80041d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 80041ca:	4b9b      	ldr	r3, [pc, #620]	@ (8004438 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 80041cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80041ce:	f000 bee7 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80041d2:	4b97      	ldr	r3, [pc, #604]	@ (8004430 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041de:	d107      	bne.n	80041f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 80041e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80041e6:	d103      	bne.n	80041f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 80041e8:	4b94      	ldr	r3, [pc, #592]	@ (800443c <HAL_RCCEx_GetPeriphCLKFreq+0xb48>)
 80041ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80041ec:	f000 bed8 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 80041f0:	2300      	movs	r3, #0
 80041f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80041f4:	f000 bed4 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 80041f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041fc:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8004200:	430b      	orrs	r3, r1
 8004202:	d158      	bne.n	80042b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8004204:	4b8a      	ldr	r3, [pc, #552]	@ (8004430 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004206:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800420a:	f003 0307 	and.w	r3, r3, #7
 800420e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8004210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004212:	2b04      	cmp	r3, #4
 8004214:	d84b      	bhi.n	80042ae <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 8004216:	a201      	add	r2, pc, #4	@ (adr r2, 800421c <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 8004218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800421c:	08004255 	.word	0x08004255
 8004220:	08004231 	.word	0x08004231
 8004224:	08004243 	.word	0x08004243
 8004228:	0800425f 	.word	0x0800425f
 800422c:	08004269 	.word	0x08004269
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004230:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004234:	4618      	mov	r0, r3
 8004236:	f7fe ff49 	bl	80030cc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800423a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800423c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800423e:	f000 beaf 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004242:	f107 030c 	add.w	r3, r7, #12
 8004246:	4618      	mov	r0, r3
 8004248:	f7ff f9f8 	bl	800363c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004250:	f000 bea6 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8004254:	f7fe fe5e 	bl	8002f14 <HAL_RCC_GetHCLKFreq>
 8004258:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800425a:	f000 bea1 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800425e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8004262:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004264:	f000 be9c 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004268:	4b71      	ldr	r3, [pc, #452]	@ (8004430 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0320 	and.w	r3, r3, #32
 8004270:	2b20      	cmp	r3, #32
 8004272:	d118      	bne.n	80042a6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004274:	4b6e      	ldr	r3, [pc, #440]	@ (8004430 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d005      	beq.n	800428c <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8004280:	4b6b      	ldr	r3, [pc, #428]	@ (8004430 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	0e1b      	lsrs	r3, r3, #24
 8004286:	f003 030f 	and.w	r3, r3, #15
 800428a:	e006      	b.n	800429a <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800428c:	4b68      	ldr	r3, [pc, #416]	@ (8004430 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800428e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004292:	041b      	lsls	r3, r3, #16
 8004294:	0e1b      	lsrs	r3, r3, #24
 8004296:	f003 030f 	and.w	r3, r3, #15
 800429a:	4a66      	ldr	r2, [pc, #408]	@ (8004434 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800429c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042a0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80042a2:	f000 be7d 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 80042a6:	2300      	movs	r3, #0
 80042a8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80042aa:	f000 be79 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 80042ae:	2300      	movs	r3, #0
 80042b0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80042b2:	f000 be75 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 80042b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042ba:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 80042be:	430b      	orrs	r3, r1
 80042c0:	d167      	bne.n	8004392 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 80042c2:	4b5b      	ldr	r3, [pc, #364]	@ (8004430 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80042c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80042c8:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80042cc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80042ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042d0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80042d4:	d036      	beq.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 80042d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042d8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80042dc:	d855      	bhi.n	800438a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 80042de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042e0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80042e4:	d029      	beq.n	800433a <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 80042e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042e8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80042ec:	d84d      	bhi.n	800438a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 80042ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80042f4:	d013      	beq.n	800431e <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 80042f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80042fc:	d845      	bhi.n	800438a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 80042fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004300:	2b00      	cmp	r3, #0
 8004302:	d015      	beq.n	8004330 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 8004304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004306:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800430a:	d13e      	bne.n	800438a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800430c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004310:	4618      	mov	r0, r3
 8004312:	f7fe fedb 	bl	80030cc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004318:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800431a:	f000 be41 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800431e:	f107 030c 	add.w	r3, r7, #12
 8004322:	4618      	mov	r0, r3
 8004324:	f7ff f98a 	bl	800363c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800432c:	f000 be38 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8004330:	f7fe fdf0 	bl	8002f14 <HAL_RCC_GetHCLKFreq>
 8004334:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004336:	f000 be33 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800433a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800433e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004340:	f000 be2e 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004344:	4b3a      	ldr	r3, [pc, #232]	@ (8004430 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0320 	and.w	r3, r3, #32
 800434c:	2b20      	cmp	r3, #32
 800434e:	d118      	bne.n	8004382 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004350:	4b37      	ldr	r3, [pc, #220]	@ (8004430 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004358:	2b00      	cmp	r3, #0
 800435a:	d005      	beq.n	8004368 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800435c:	4b34      	ldr	r3, [pc, #208]	@ (8004430 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	0e1b      	lsrs	r3, r3, #24
 8004362:	f003 030f 	and.w	r3, r3, #15
 8004366:	e006      	b.n	8004376 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8004368:	4b31      	ldr	r3, [pc, #196]	@ (8004430 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800436a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800436e:	041b      	lsls	r3, r3, #16
 8004370:	0e1b      	lsrs	r3, r3, #24
 8004372:	f003 030f 	and.w	r3, r3, #15
 8004376:	4a2f      	ldr	r2, [pc, #188]	@ (8004434 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8004378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800437c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800437e:	f000 be0f 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8004382:	2300      	movs	r3, #0
 8004384:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004386:	f000 be0b 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 800438a:	2300      	movs	r3, #0
 800438c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800438e:	f000 be07 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8004392:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004396:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800439a:	430b      	orrs	r3, r1
 800439c:	d154      	bne.n	8004448 <HAL_RCCEx_GetPeriphCLKFreq+0xb54>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800439e:	4b24      	ldr	r3, [pc, #144]	@ (8004430 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80043a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80043a4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80043a8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80043aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d104      	bne.n	80043ba <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80043b0:	f7fe fdca 	bl	8002f48 <HAL_RCC_GetPCLK1Freq>
 80043b4:	6378      	str	r0, [r7, #52]	@ 0x34
 80043b6:	f000 bdf3 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80043ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043c0:	d104      	bne.n	80043cc <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80043c2:	f7fe fca1 	bl	8002d08 <HAL_RCC_GetSysClockFreq>
 80043c6:	6378      	str	r0, [r7, #52]	@ 0x34
 80043c8:	f000 bdea 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80043cc:	4b18      	ldr	r3, [pc, #96]	@ (8004430 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043d8:	d107      	bne.n	80043ea <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 80043da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043e0:	d103      	bne.n	80043ea <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 80043e2:	4b16      	ldr	r3, [pc, #88]	@ (800443c <HAL_RCCEx_GetPeriphCLKFreq+0xb48>)
 80043e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80043e6:	f000 bddb 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 80043ea:	4b11      	ldr	r3, [pc, #68]	@ (8004430 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0320 	and.w	r3, r3, #32
 80043f2:	2b20      	cmp	r3, #32
 80043f4:	d124      	bne.n	8004440 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 80043f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043f8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80043fc:	d120      	bne.n	8004440 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80043fe:	4b0c      	ldr	r3, [pc, #48]	@ (8004430 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d005      	beq.n	8004416 <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 800440a:	4b09      	ldr	r3, [pc, #36]	@ (8004430 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	0e1b      	lsrs	r3, r3, #24
 8004410:	f003 030f 	and.w	r3, r3, #15
 8004414:	e006      	b.n	8004424 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 8004416:	4b06      	ldr	r3, [pc, #24]	@ (8004430 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004418:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800441c:	041b      	lsls	r3, r3, #16
 800441e:	0e1b      	lsrs	r3, r3, #24
 8004420:	f003 030f 	and.w	r3, r3, #15
 8004424:	4a03      	ldr	r2, [pc, #12]	@ (8004434 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8004426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800442a:	637b      	str	r3, [r7, #52]	@ 0x34
 800442c:	f000 bdb8 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
 8004430:	46020c00 	.word	0x46020c00
 8004434:	08008248 	.word	0x08008248
 8004438:	007a1200 	.word	0x007a1200
 800443c:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8004440:	2300      	movs	r3, #0
 8004442:	637b      	str	r3, [r7, #52]	@ 0x34
 8004444:	f000 bdac 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8004448:	e9d7 2300 	ldrd	r2, r3, [r7]
 800444c:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8004450:	430b      	orrs	r3, r1
 8004452:	d14c      	bne.n	80044ee <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004454:	4ba8      	ldr	r3, [pc, #672]	@ (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8004456:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800445a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800445e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8004460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004462:	2b00      	cmp	r3, #0
 8004464:	d104      	bne.n	8004470 <HAL_RCCEx_GetPeriphCLKFreq+0xb7c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004466:	f7fe fd6f 	bl	8002f48 <HAL_RCC_GetPCLK1Freq>
 800446a:	6378      	str	r0, [r7, #52]	@ 0x34
 800446c:	f000 bd98 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8004470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004472:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004476:	d104      	bne.n	8004482 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004478:	f7fe fc46 	bl	8002d08 <HAL_RCC_GetSysClockFreq>
 800447c:	6378      	str	r0, [r7, #52]	@ 0x34
 800447e:	f000 bd8f 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8004482:	4b9d      	ldr	r3, [pc, #628]	@ (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800448a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800448e:	d107      	bne.n	80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0xbac>
 8004490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004492:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004496:	d103      	bne.n	80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0xbac>
    {
      frequency = HSI_VALUE;
 8004498:	4b98      	ldr	r3, [pc, #608]	@ (80046fc <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800449a:	637b      	str	r3, [r7, #52]	@ 0x34
 800449c:	f000 bd80 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 80044a0:	4b95      	ldr	r3, [pc, #596]	@ (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0320 	and.w	r3, r3, #32
 80044a8:	2b20      	cmp	r3, #32
 80044aa:	d11c      	bne.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
 80044ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80044b2:	d118      	bne.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80044b4:	4b90      	ldr	r3, [pc, #576]	@ (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d005      	beq.n	80044cc <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
 80044c0:	4b8d      	ldr	r3, [pc, #564]	@ (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	0e1b      	lsrs	r3, r3, #24
 80044c6:	f003 030f 	and.w	r3, r3, #15
 80044ca:	e006      	b.n	80044da <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 80044cc:	4b8a      	ldr	r3, [pc, #552]	@ (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80044ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80044d2:	041b      	lsls	r3, r3, #16
 80044d4:	0e1b      	lsrs	r3, r3, #24
 80044d6:	f003 030f 	and.w	r3, r3, #15
 80044da:	4a89      	ldr	r2, [pc, #548]	@ (8004700 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>)
 80044dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80044e2:	f000 bd5d 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 80044e6:	2300      	movs	r3, #0
 80044e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80044ea:	f000 bd59 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 80044ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044f2:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80044f6:	430b      	orrs	r3, r1
 80044f8:	d158      	bne.n	80045ac <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80044fa:	4b7f      	ldr	r3, [pc, #508]	@ (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80044fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004500:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004504:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8004506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004508:	2bc0      	cmp	r3, #192	@ 0xc0
 800450a:	d028      	beq.n	800455e <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
 800450c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800450e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004510:	d848      	bhi.n	80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>
 8004512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004514:	2b80      	cmp	r3, #128	@ 0x80
 8004516:	d00e      	beq.n	8004536 <HAL_RCCEx_GetPeriphCLKFreq+0xc42>
 8004518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800451a:	2b80      	cmp	r3, #128	@ 0x80
 800451c:	d842      	bhi.n	80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>
 800451e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004520:	2b00      	cmp	r3, #0
 8004522:	d003      	beq.n	800452c <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
 8004524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004526:	2b40      	cmp	r3, #64	@ 0x40
 8004528:	d014      	beq.n	8004554 <HAL_RCCEx_GetPeriphCLKFreq+0xc60>
 800452a:	e03b      	b.n	80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800452c:	f7fe fd34 	bl	8002f98 <HAL_RCC_GetPCLK3Freq>
 8004530:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004532:	f000 bd35 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004536:	4b70      	ldr	r3, [pc, #448]	@ (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800453e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004542:	d103      	bne.n	800454c <HAL_RCCEx_GetPeriphCLKFreq+0xc58>
        {
          frequency = HSI_VALUE;
 8004544:	4b6d      	ldr	r3, [pc, #436]	@ (80046fc <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8004546:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004548:	f000 bd2a 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 800454c:	2300      	movs	r3, #0
 800454e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004550:	f000 bd26 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8004554:	f7fe fbd8 	bl	8002d08 <HAL_RCC_GetSysClockFreq>
 8004558:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800455a:	f000 bd21 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800455e:	4b66      	ldr	r3, [pc, #408]	@ (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0320 	and.w	r3, r3, #32
 8004566:	2b20      	cmp	r3, #32
 8004568:	d118      	bne.n	800459c <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800456a:	4b63      	ldr	r3, [pc, #396]	@ (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d005      	beq.n	8004582 <HAL_RCCEx_GetPeriphCLKFreq+0xc8e>
 8004576:	4b60      	ldr	r3, [pc, #384]	@ (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	0e1b      	lsrs	r3, r3, #24
 800457c:	f003 030f 	and.w	r3, r3, #15
 8004580:	e006      	b.n	8004590 <HAL_RCCEx_GetPeriphCLKFreq+0xc9c>
 8004582:	4b5d      	ldr	r3, [pc, #372]	@ (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8004584:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004588:	041b      	lsls	r3, r3, #16
 800458a:	0e1b      	lsrs	r3, r3, #24
 800458c:	f003 030f 	and.w	r3, r3, #15
 8004590:	4a5b      	ldr	r2, [pc, #364]	@ (8004700 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>)
 8004592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004596:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004598:	f000 bd02 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 800459c:	2300      	movs	r3, #0
 800459e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80045a0:	f000 bcfe 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      default:
      {
        frequency = 0U;
 80045a4:	2300      	movs	r3, #0
 80045a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80045a8:	f000 bcfa 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 80045ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045b0:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 80045b4:	430b      	orrs	r3, r1
 80045b6:	d14c      	bne.n	8004652 <HAL_RCCEx_GetPeriphCLKFreq+0xd5e>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80045b8:	4b4f      	ldr	r3, [pc, #316]	@ (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80045ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80045be:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80045c2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 80045c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d104      	bne.n	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0xce0>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80045ca:	f7fe fcbd 	bl	8002f48 <HAL_RCC_GetPCLK1Freq>
 80045ce:	6378      	str	r0, [r7, #52]	@ 0x34
 80045d0:	f000 bce6 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 80045d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80045da:	d104      	bne.n	80045e6 <HAL_RCCEx_GetPeriphCLKFreq+0xcf2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80045dc:	f7fe fb94 	bl	8002d08 <HAL_RCC_GetSysClockFreq>
 80045e0:	6378      	str	r0, [r7, #52]	@ 0x34
 80045e2:	f000 bcdd 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80045e6:	4b44      	ldr	r3, [pc, #272]	@ (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045f2:	d107      	bne.n	8004604 <HAL_RCCEx_GetPeriphCLKFreq+0xd10>
 80045f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045fa:	d103      	bne.n	8004604 <HAL_RCCEx_GetPeriphCLKFreq+0xd10>
    {
      frequency = HSI_VALUE;
 80045fc:	4b3f      	ldr	r3, [pc, #252]	@ (80046fc <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 80045fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8004600:	f000 bcce 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8004604:	4b3c      	ldr	r3, [pc, #240]	@ (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0320 	and.w	r3, r3, #32
 800460c:	2b20      	cmp	r3, #32
 800460e:	d11c      	bne.n	800464a <HAL_RCCEx_GetPeriphCLKFreq+0xd56>
 8004610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004612:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004616:	d118      	bne.n	800464a <HAL_RCCEx_GetPeriphCLKFreq+0xd56>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004618:	4b37      	ldr	r3, [pc, #220]	@ (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d005      	beq.n	8004630 <HAL_RCCEx_GetPeriphCLKFreq+0xd3c>
 8004624:	4b34      	ldr	r3, [pc, #208]	@ (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	0e1b      	lsrs	r3, r3, #24
 800462a:	f003 030f 	and.w	r3, r3, #15
 800462e:	e006      	b.n	800463e <HAL_RCCEx_GetPeriphCLKFreq+0xd4a>
 8004630:	4b31      	ldr	r3, [pc, #196]	@ (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8004632:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004636:	041b      	lsls	r3, r3, #16
 8004638:	0e1b      	lsrs	r3, r3, #24
 800463a:	f003 030f 	and.w	r3, r3, #15
 800463e:	4a30      	ldr	r2, [pc, #192]	@ (8004700 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>)
 8004640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004644:	637b      	str	r3, [r7, #52]	@ 0x34
 8004646:	f000 bcab 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800464a:	2300      	movs	r3, #0
 800464c:	637b      	str	r3, [r7, #52]	@ 0x34
 800464e:	f000 bca7 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 8004652:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004656:	f102 4140 	add.w	r1, r2, #3221225472	@ 0xc0000000
 800465a:	430b      	orrs	r3, r1
 800465c:	d152      	bne.n	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 800465e:	4b26      	ldr	r3, [pc, #152]	@ (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8004660:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004664:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8004668:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 800466a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800466c:	2b00      	cmp	r3, #0
 800466e:	d104      	bne.n	800467a <HAL_RCCEx_GetPeriphCLKFreq+0xd86>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004670:	f7fe fc6a 	bl	8002f48 <HAL_RCC_GetPCLK1Freq>
 8004674:	6378      	str	r0, [r7, #52]	@ 0x34
 8004676:	f000 bc93 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 800467a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800467c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004680:	d104      	bne.n	800468c <HAL_RCCEx_GetPeriphCLKFreq+0xd98>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004682:	f7fe fb41 	bl	8002d08 <HAL_RCC_GetSysClockFreq>
 8004686:	6378      	str	r0, [r7, #52]	@ 0x34
 8004688:	f000 bc8a 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 800468c:	4b1a      	ldr	r3, [pc, #104]	@ (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004694:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004698:	d107      	bne.n	80046aa <HAL_RCCEx_GetPeriphCLKFreq+0xdb6>
 800469a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800469c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80046a0:	d103      	bne.n	80046aa <HAL_RCCEx_GetPeriphCLKFreq+0xdb6>
    {
      frequency = HSI_VALUE;
 80046a2:	4b16      	ldr	r3, [pc, #88]	@ (80046fc <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 80046a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80046a6:	f000 bc7b 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 80046aa:	4b13      	ldr	r3, [pc, #76]	@ (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0320 	and.w	r3, r3, #32
 80046b2:	2b20      	cmp	r3, #32
 80046b4:	d11c      	bne.n	80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
 80046b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046b8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80046bc:	d118      	bne.n	80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80046be:	4b0e      	ldr	r3, [pc, #56]	@ (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d005      	beq.n	80046d6 <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 80046ca:	4b0b      	ldr	r3, [pc, #44]	@ (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	0e1b      	lsrs	r3, r3, #24
 80046d0:	f003 030f 	and.w	r3, r3, #15
 80046d4:	e006      	b.n	80046e4 <HAL_RCCEx_GetPeriphCLKFreq+0xdf0>
 80046d6:	4b08      	ldr	r3, [pc, #32]	@ (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80046d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80046dc:	041b      	lsls	r3, r3, #16
 80046de:	0e1b      	lsrs	r3, r3, #24
 80046e0:	f003 030f 	and.w	r3, r3, #15
 80046e4:	4a06      	ldr	r2, [pc, #24]	@ (8004700 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>)
 80046e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80046ec:	f000 bc58 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 80046f0:	2300      	movs	r3, #0
 80046f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80046f4:	f000 bc54 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
 80046f8:	46020c00 	.word	0x46020c00
 80046fc:	00f42400 	.word	0x00f42400
 8004700:	08008248 	.word	0x08008248
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 8004704:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004708:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 800470c:	430b      	orrs	r3, r1
 800470e:	d14a      	bne.n	80047a6 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 8004710:	4ba5      	ldr	r3, [pc, #660]	@ (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8004712:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004716:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800471a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 800471c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800471e:	2b00      	cmp	r3, #0
 8004720:	d104      	bne.n	800472c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004722:	f7fe fc11 	bl	8002f48 <HAL_RCC_GetPCLK1Freq>
 8004726:	6378      	str	r0, [r7, #52]	@ 0x34
 8004728:	f000 bc3a 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 800472c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800472e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004732:	d104      	bne.n	800473e <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004734:	f7fe fae8 	bl	8002d08 <HAL_RCC_GetSysClockFreq>
 8004738:	6378      	str	r0, [r7, #52]	@ 0x34
 800473a:	f000 bc31 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 800473e:	4b9a      	ldr	r3, [pc, #616]	@ (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004746:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800474a:	d107      	bne.n	800475c <HAL_RCCEx_GetPeriphCLKFreq+0xe68>
 800474c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800474e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004752:	d103      	bne.n	800475c <HAL_RCCEx_GetPeriphCLKFreq+0xe68>
    {
      frequency = HSI_VALUE;
 8004754:	4b95      	ldr	r3, [pc, #596]	@ (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 8004756:	637b      	str	r3, [r7, #52]	@ 0x34
 8004758:	f000 bc22 	b.w	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 800475c:	4b92      	ldr	r3, [pc, #584]	@ (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0320 	and.w	r3, r3, #32
 8004764:	2b20      	cmp	r3, #32
 8004766:	d11b      	bne.n	80047a0 <HAL_RCCEx_GetPeriphCLKFreq+0xeac>
 8004768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800476a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800476e:	d117      	bne.n	80047a0 <HAL_RCCEx_GetPeriphCLKFreq+0xeac>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004770:	4b8d      	ldr	r3, [pc, #564]	@ (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d005      	beq.n	8004788 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
 800477c:	4b8a      	ldr	r3, [pc, #552]	@ (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	0e1b      	lsrs	r3, r3, #24
 8004782:	f003 030f 	and.w	r3, r3, #15
 8004786:	e006      	b.n	8004796 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
 8004788:	4b87      	ldr	r3, [pc, #540]	@ (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800478a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800478e:	041b      	lsls	r3, r3, #16
 8004790:	0e1b      	lsrs	r3, r3, #24
 8004792:	f003 030f 	and.w	r3, r3, #15
 8004796:	4a86      	ldr	r2, [pc, #536]	@ (80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 8004798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800479c:	637b      	str	r3, [r7, #52]	@ 0x34
 800479e:	e3ff      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 80047a0:	2300      	movs	r3, #0
 80047a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80047a4:	e3fc      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 80047a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047aa:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80047ae:	430b      	orrs	r3, r1
 80047b0:	d164      	bne.n	800487c <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 80047b2:	4b7d      	ldr	r3, [pc, #500]	@ (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80047b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80047b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047bc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 80047be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d120      	bne.n	8004806 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80047c4:	4b78      	ldr	r3, [pc, #480]	@ (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0320 	and.w	r3, r3, #32
 80047cc:	2b20      	cmp	r3, #32
 80047ce:	d117      	bne.n	8004800 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80047d0:	4b75      	ldr	r3, [pc, #468]	@ (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d005      	beq.n	80047e8 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 80047dc:	4b72      	ldr	r3, [pc, #456]	@ (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	0e1b      	lsrs	r3, r3, #24
 80047e2:	f003 030f 	and.w	r3, r3, #15
 80047e6:	e006      	b.n	80047f6 <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 80047e8:	4b6f      	ldr	r3, [pc, #444]	@ (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80047ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80047ee:	041b      	lsls	r3, r3, #16
 80047f0:	0e1b      	lsrs	r3, r3, #24
 80047f2:	f003 030f 	and.w	r3, r3, #15
 80047f6:	4a6e      	ldr	r2, [pc, #440]	@ (80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 80047f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80047fe:	e3cf      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = 0U;
 8004800:	2300      	movs	r3, #0
 8004802:	637b      	str	r3, [r7, #52]	@ 0x34
 8004804:	e3cc      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8004806:	4b68      	ldr	r3, [pc, #416]	@ (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8004808:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800480c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004810:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004814:	d112      	bne.n	800483c <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
 8004816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004818:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800481c:	d10e      	bne.n	800483c <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800481e:	4b62      	ldr	r3, [pc, #392]	@ (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8004820:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004824:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004828:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800482c:	d102      	bne.n	8004834 <HAL_RCCEx_GetPeriphCLKFreq+0xf40>
      {
        frequency = LSI_VALUE / 128U;
 800482e:	23fa      	movs	r3, #250	@ 0xfa
 8004830:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004832:	e3b5      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = LSI_VALUE;
 8004834:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004838:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800483a:	e3b1      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800483c:	4b5a      	ldr	r3, [pc, #360]	@ (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004844:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004848:	d106      	bne.n	8004858 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
 800484a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800484c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004850:	d102      	bne.n	8004858 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
    {
      frequency = HSI_VALUE;
 8004852:	4b56      	ldr	r3, [pc, #344]	@ (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 8004854:	637b      	str	r3, [r7, #52]	@ 0x34
 8004856:	e3a3      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8004858:	4b53      	ldr	r3, [pc, #332]	@ (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800485a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800485e:	f003 0302 	and.w	r3, r3, #2
 8004862:	2b02      	cmp	r3, #2
 8004864:	d107      	bne.n	8004876 <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
 8004866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004868:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800486c:	d103      	bne.n	8004876 <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
    {
      frequency = LSE_VALUE;
 800486e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004872:	637b      	str	r3, [r7, #52]	@ 0x34
 8004874:	e394      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8004876:	2300      	movs	r3, #0
 8004878:	637b      	str	r3, [r7, #52]	@ 0x34
 800487a:	e391      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800487c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004880:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8004884:	430b      	orrs	r3, r1
 8004886:	d164      	bne.n	8004952 <HAL_RCCEx_GetPeriphCLKFreq+0x105e>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004888:	4b47      	ldr	r3, [pc, #284]	@ (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800488a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800488e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004892:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8004894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004896:	2b00      	cmp	r3, #0
 8004898:	d120      	bne.n	80048dc <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800489a:	4b43      	ldr	r3, [pc, #268]	@ (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0320 	and.w	r3, r3, #32
 80048a2:	2b20      	cmp	r3, #32
 80048a4:	d117      	bne.n	80048d6 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80048a6:	4b40      	ldr	r3, [pc, #256]	@ (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d005      	beq.n	80048be <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
 80048b2:	4b3d      	ldr	r3, [pc, #244]	@ (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	0e1b      	lsrs	r3, r3, #24
 80048b8:	f003 030f 	and.w	r3, r3, #15
 80048bc:	e006      	b.n	80048cc <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 80048be:	4b3a      	ldr	r3, [pc, #232]	@ (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80048c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80048c4:	041b      	lsls	r3, r3, #16
 80048c6:	0e1b      	lsrs	r3, r3, #24
 80048c8:	f003 030f 	and.w	r3, r3, #15
 80048cc:	4a38      	ldr	r2, [pc, #224]	@ (80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 80048ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80048d4:	e364      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = 0U;
 80048d6:	2300      	movs	r3, #0
 80048d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80048da:	e361      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80048dc:	4b32      	ldr	r3, [pc, #200]	@ (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80048de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80048ea:	d112      	bne.n	8004912 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 80048ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048f2:	d10e      	bne.n	8004912 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80048f4:	4b2c      	ldr	r3, [pc, #176]	@ (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80048f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004902:	d102      	bne.n	800490a <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
      {
        frequency = LSI_VALUE / 128U;
 8004904:	23fa      	movs	r3, #250	@ 0xfa
 8004906:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004908:	e34a      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = LSI_VALUE;
 800490a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800490e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004910:	e346      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8004912:	4b25      	ldr	r3, [pc, #148]	@ (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800491a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800491e:	d106      	bne.n	800492e <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
 8004920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004922:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004926:	d102      	bne.n	800492e <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
    {
      frequency = HSI_VALUE;
 8004928:	4b20      	ldr	r3, [pc, #128]	@ (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800492a:	637b      	str	r3, [r7, #52]	@ 0x34
 800492c:	e338      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800492e:	4b1e      	ldr	r3, [pc, #120]	@ (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8004930:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004934:	f003 0302 	and.w	r3, r3, #2
 8004938:	2b02      	cmp	r3, #2
 800493a:	d107      	bne.n	800494c <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
 800493c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800493e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004942:	d103      	bne.n	800494c <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
    {
      frequency = LSE_VALUE;
 8004944:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004948:	637b      	str	r3, [r7, #52]	@ 0x34
 800494a:	e329      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800494c:	2300      	movs	r3, #0
 800494e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004950:	e326      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8004952:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004956:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800495a:	430b      	orrs	r3, r1
 800495c:	d14e      	bne.n	80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x1108>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800495e:	4b12      	ldr	r3, [pc, #72]	@ (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8004960:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004964:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004968:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800496a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800496c:	2b00      	cmp	r3, #0
 800496e:	d103      	bne.n	8004978 <HAL_RCCEx_GetPeriphCLKFreq+0x1084>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004970:	f7fe faea 	bl	8002f48 <HAL_RCC_GetPCLK1Freq>
 8004974:	6378      	str	r0, [r7, #52]	@ 0x34
 8004976:	e313      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8004978:	4b0b      	ldr	r3, [pc, #44]	@ (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800497a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800497e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004982:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004986:	d119      	bne.n	80049bc <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
 8004988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800498a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800498e:	d115      	bne.n	80049bc <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004990:	4b05      	ldr	r3, [pc, #20]	@ (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8004992:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004996:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800499a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800499e:	d109      	bne.n	80049b4 <HAL_RCCEx_GetPeriphCLKFreq+0x10c0>
      {
        frequency = LSI_VALUE / 128U;
 80049a0:	23fa      	movs	r3, #250	@ 0xfa
 80049a2:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80049a4:	e2fc      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
 80049a6:	bf00      	nop
 80049a8:	46020c00 	.word	0x46020c00
 80049ac:	00f42400 	.word	0x00f42400
 80049b0:	08008248 	.word	0x08008248
      }
      else
      {
        frequency = LSI_VALUE;
 80049b4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80049b8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80049ba:	e2f1      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80049bc:	4ba8      	ldr	r3, [pc, #672]	@ (8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049c8:	d106      	bne.n	80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
 80049ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049cc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80049d0:	d102      	bne.n	80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
    {
      frequency = HSI_VALUE;
 80049d2:	4ba4      	ldr	r3, [pc, #656]	@ (8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 80049d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80049d6:	e2e3      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 80049d8:	4ba1      	ldr	r3, [pc, #644]	@ (8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80049da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80049de:	f003 0302 	and.w	r3, r3, #2
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	d107      	bne.n	80049f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 80049e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049e8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80049ec:	d103      	bne.n	80049f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
    {
      frequency = LSE_VALUE;
 80049ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80049f4:	e2d4      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 80049f6:	2300      	movs	r3, #0
 80049f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80049fa:	e2d1      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 80049fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a00:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8004a04:	430b      	orrs	r3, r1
 8004a06:	d12d      	bne.n	8004a64 <HAL_RCCEx_GetPeriphCLKFreq+0x1170>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8004a08:	4b95      	ldr	r3, [pc, #596]	@ (8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8004a0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a0e:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8004a12:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8004a14:	4b92      	ldr	r3, [pc, #584]	@ (8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a1c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004a20:	d105      	bne.n	8004a2e <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 8004a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d102      	bne.n	8004a2e <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
    {
      frequency = HSE_VALUE;
 8004a28:	4b8f      	ldr	r3, [pc, #572]	@ (8004c68 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 8004a2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a2c:	e2b8      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8004a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a34:	d107      	bne.n	8004a46 <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004a36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f7fe fb46 	bl	80030cc <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8004a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a42:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a44:	e2ac      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8004a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a48:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a4c:	d107      	bne.n	8004a5e <HAL_RCCEx_GetPeriphCLKFreq+0x116a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a4e:	f107 0318 	add.w	r3, r7, #24
 8004a52:	4618      	mov	r0, r3
 8004a54:	f7fe fc96 	bl	8003384 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a5c:	e2a0      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a62:	e29d      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8004a64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a68:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8004a6c:	430b      	orrs	r3, r1
 8004a6e:	d156      	bne.n	8004b1e <HAL_RCCEx_GetPeriphCLKFreq+0x122a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8004a70:	4b7b      	ldr	r3, [pc, #492]	@ (8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8004a72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a76:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004a7a:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8004a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a7e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004a82:	d028      	beq.n	8004ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 8004a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a86:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004a8a:	d845      	bhi.n	8004b18 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 8004a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a8e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a92:	d013      	beq.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 8004a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a96:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a9a:	d83d      	bhi.n	8004b18 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 8004a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d004      	beq.n	8004aac <HAL_RCCEx_GetPeriphCLKFreq+0x11b8>
 8004aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aa4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004aa8:	d004      	beq.n	8004ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 8004aaa:	e035      	b.n	8004b18 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8004aac:	f7fe fa60 	bl	8002f70 <HAL_RCC_GetPCLK2Freq>
 8004ab0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004ab2:	e275      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8004ab4:	f7fe f928 	bl	8002d08 <HAL_RCC_GetSysClockFreq>
 8004ab8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004aba:	e271      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004abc:	4b68      	ldr	r3, [pc, #416]	@ (8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ac4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ac8:	d102      	bne.n	8004ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x11dc>
        {
          frequency = HSI_VALUE;
 8004aca:	4b66      	ldr	r3, [pc, #408]	@ (8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 8004acc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004ace:	e267      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004ad4:	e264      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004ad6:	4b62      	ldr	r3, [pc, #392]	@ (8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0320 	and.w	r3, r3, #32
 8004ade:	2b20      	cmp	r3, #32
 8004ae0:	d117      	bne.n	8004b12 <HAL_RCCEx_GetPeriphCLKFreq+0x121e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004ae2:	4b5f      	ldr	r3, [pc, #380]	@ (8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d005      	beq.n	8004afa <HAL_RCCEx_GetPeriphCLKFreq+0x1206>
 8004aee:	4b5c      	ldr	r3, [pc, #368]	@ (8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	0e1b      	lsrs	r3, r3, #24
 8004af4:	f003 030f 	and.w	r3, r3, #15
 8004af8:	e006      	b.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>
 8004afa:	4b59      	ldr	r3, [pc, #356]	@ (8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8004afc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004b00:	041b      	lsls	r3, r3, #16
 8004b02:	0e1b      	lsrs	r3, r3, #24
 8004b04:	f003 030f 	and.w	r3, r3, #15
 8004b08:	4a58      	ldr	r2, [pc, #352]	@ (8004c6c <HAL_RCCEx_GetPeriphCLKFreq+0x1378>)
 8004b0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b0e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004b10:	e246      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8004b12:	2300      	movs	r3, #0
 8004b14:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004b16:	e243      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004b1c:	e240      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8004b1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b22:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8004b26:	430b      	orrs	r3, r1
 8004b28:	d156      	bne.n	8004bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8004b2a:	4b4d      	ldr	r3, [pc, #308]	@ (8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8004b2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b30:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004b34:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8004b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b38:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004b3c:	d028      	beq.n	8004b90 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>
 8004b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b40:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004b44:	d845      	bhi.n	8004bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 8004b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b4c:	d013      	beq.n	8004b76 <HAL_RCCEx_GetPeriphCLKFreq+0x1282>
 8004b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b54:	d83d      	bhi.n	8004bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 8004b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d004      	beq.n	8004b66 <HAL_RCCEx_GetPeriphCLKFreq+0x1272>
 8004b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b62:	d004      	beq.n	8004b6e <HAL_RCCEx_GetPeriphCLKFreq+0x127a>
 8004b64:	e035      	b.n	8004bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8004b66:	f7fe f9ef 	bl	8002f48 <HAL_RCC_GetPCLK1Freq>
 8004b6a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004b6c:	e218      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8004b6e:	f7fe f8cb 	bl	8002d08 <HAL_RCC_GetSysClockFreq>
 8004b72:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004b74:	e214      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004b76:	4b3a      	ldr	r3, [pc, #232]	@ (8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b82:	d102      	bne.n	8004b8a <HAL_RCCEx_GetPeriphCLKFreq+0x1296>
        {
          frequency = HSI_VALUE;
 8004b84:	4b37      	ldr	r3, [pc, #220]	@ (8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 8004b86:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004b88:	e20a      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004b8e:	e207      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004b90:	4b33      	ldr	r3, [pc, #204]	@ (8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0320 	and.w	r3, r3, #32
 8004b98:	2b20      	cmp	r3, #32
 8004b9a:	d117      	bne.n	8004bcc <HAL_RCCEx_GetPeriphCLKFreq+0x12d8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004b9c:	4b30      	ldr	r3, [pc, #192]	@ (8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d005      	beq.n	8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 8004ba8:	4b2d      	ldr	r3, [pc, #180]	@ (8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	0e1b      	lsrs	r3, r3, #24
 8004bae:	f003 030f 	and.w	r3, r3, #15
 8004bb2:	e006      	b.n	8004bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 8004bb4:	4b2a      	ldr	r3, [pc, #168]	@ (8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8004bb6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004bba:	041b      	lsls	r3, r3, #16
 8004bbc:	0e1b      	lsrs	r3, r3, #24
 8004bbe:	f003 030f 	and.w	r3, r3, #15
 8004bc2:	4a2a      	ldr	r2, [pc, #168]	@ (8004c6c <HAL_RCCEx_GetPeriphCLKFreq+0x1378>)
 8004bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bc8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004bca:	e1e9      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004bd0:	e1e6      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004bd6:	e1e3      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8004bd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004bdc:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8004be0:	430b      	orrs	r3, r1
 8004be2:	d17e      	bne.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x13ee>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8004be4:	4b1e      	ldr	r3, [pc, #120]	@ (8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8004be6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004bea:	f003 0318 	and.w	r3, r3, #24
 8004bee:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8004bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bf2:	2b18      	cmp	r3, #24
 8004bf4:	d872      	bhi.n	8004cdc <HAL_RCCEx_GetPeriphCLKFreq+0x13e8>
 8004bf6:	a201      	add	r2, pc, #4	@ (adr r2, 8004bfc <HAL_RCCEx_GetPeriphCLKFreq+0x1308>)
 8004bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bfc:	08004c71 	.word	0x08004c71
 8004c00:	08004cdd 	.word	0x08004cdd
 8004c04:	08004cdd 	.word	0x08004cdd
 8004c08:	08004cdd 	.word	0x08004cdd
 8004c0c:	08004cdd 	.word	0x08004cdd
 8004c10:	08004cdd 	.word	0x08004cdd
 8004c14:	08004cdd 	.word	0x08004cdd
 8004c18:	08004cdd 	.word	0x08004cdd
 8004c1c:	08004c79 	.word	0x08004c79
 8004c20:	08004cdd 	.word	0x08004cdd
 8004c24:	08004cdd 	.word	0x08004cdd
 8004c28:	08004cdd 	.word	0x08004cdd
 8004c2c:	08004cdd 	.word	0x08004cdd
 8004c30:	08004cdd 	.word	0x08004cdd
 8004c34:	08004cdd 	.word	0x08004cdd
 8004c38:	08004cdd 	.word	0x08004cdd
 8004c3c:	08004c81 	.word	0x08004c81
 8004c40:	08004cdd 	.word	0x08004cdd
 8004c44:	08004cdd 	.word	0x08004cdd
 8004c48:	08004cdd 	.word	0x08004cdd
 8004c4c:	08004cdd 	.word	0x08004cdd
 8004c50:	08004cdd 	.word	0x08004cdd
 8004c54:	08004cdd 	.word	0x08004cdd
 8004c58:	08004cdd 	.word	0x08004cdd
 8004c5c:	08004c9b 	.word	0x08004c9b
 8004c60:	46020c00 	.word	0x46020c00
 8004c64:	00f42400 	.word	0x00f42400
 8004c68:	007a1200 	.word	0x007a1200
 8004c6c:	08008248 	.word	0x08008248
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8004c70:	f7fe f992 	bl	8002f98 <HAL_RCC_GetPCLK3Freq>
 8004c74:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004c76:	e193      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8004c78:	f7fe f846 	bl	8002d08 <HAL_RCC_GetSysClockFreq>
 8004c7c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004c7e:	e18f      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004c80:	4b9f      	ldr	r3, [pc, #636]	@ (8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c8c:	d102      	bne.n	8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0x13a0>
        {
          frequency = HSI_VALUE;
 8004c8e:	4b9d      	ldr	r3, [pc, #628]	@ (8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 8004c90:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004c92:	e185      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8004c94:	2300      	movs	r3, #0
 8004c96:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004c98:	e182      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004c9a:	4b99      	ldr	r3, [pc, #612]	@ (8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0320 	and.w	r3, r3, #32
 8004ca2:	2b20      	cmp	r3, #32
 8004ca4:	d117      	bne.n	8004cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004ca6:	4b96      	ldr	r3, [pc, #600]	@ (8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d005      	beq.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0x13ca>
 8004cb2:	4b93      	ldr	r3, [pc, #588]	@ (8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	0e1b      	lsrs	r3, r3, #24
 8004cb8:	f003 030f 	and.w	r3, r3, #15
 8004cbc:	e006      	b.n	8004ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
 8004cbe:	4b90      	ldr	r3, [pc, #576]	@ (8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8004cc0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004cc4:	041b      	lsls	r3, r3, #16
 8004cc6:	0e1b      	lsrs	r3, r3, #24
 8004cc8:	f003 030f 	and.w	r3, r3, #15
 8004ccc:	4a8e      	ldr	r2, [pc, #568]	@ (8004f08 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 8004cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cd2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004cd4:	e164      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004cda:	e161      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004ce0:	e15e      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8004ce2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ce6:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8004cea:	430b      	orrs	r3, r1
 8004cec:	d155      	bne.n	8004d9a <HAL_RCCEx_GetPeriphCLKFreq+0x14a6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8004cee:	4b84      	ldr	r3, [pc, #528]	@ (8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8004cf0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004cf4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004cf8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8004cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cfc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004d00:	d013      	beq.n	8004d2a <HAL_RCCEx_GetPeriphCLKFreq+0x1436>
 8004d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d04:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004d08:	d844      	bhi.n	8004d94 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>
 8004d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d0c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004d10:	d013      	beq.n	8004d3a <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
 8004d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d14:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004d18:	d83c      	bhi.n	8004d94 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>
 8004d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d014      	beq.n	8004d4a <HAL_RCCEx_GetPeriphCLKFreq+0x1456>
 8004d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d26:	d014      	beq.n	8004d52 <HAL_RCCEx_GetPeriphCLKFreq+0x145e>
 8004d28:	e034      	b.n	8004d94 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d2a:	f107 0318 	add.w	r3, r7, #24
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f7fe fb28 	bl	8003384 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004d38:	e132      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004d3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f7fe f9c4 	bl	80030cc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8004d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d46:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004d48:	e12a      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8004d4a:	f7fd ffdd 	bl	8002d08 <HAL_RCC_GetSysClockFreq>
 8004d4e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004d50:	e126      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004d52:	4b6b      	ldr	r3, [pc, #428]	@ (8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 0320 	and.w	r3, r3, #32
 8004d5a:	2b20      	cmp	r3, #32
 8004d5c:	d117      	bne.n	8004d8e <HAL_RCCEx_GetPeriphCLKFreq+0x149a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004d5e:	4b68      	ldr	r3, [pc, #416]	@ (8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d005      	beq.n	8004d76 <HAL_RCCEx_GetPeriphCLKFreq+0x1482>
 8004d6a:	4b65      	ldr	r3, [pc, #404]	@ (8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	0e1b      	lsrs	r3, r3, #24
 8004d70:	f003 030f 	and.w	r3, r3, #15
 8004d74:	e006      	b.n	8004d84 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>
 8004d76:	4b62      	ldr	r3, [pc, #392]	@ (8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8004d78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004d7c:	041b      	lsls	r3, r3, #16
 8004d7e:	0e1b      	lsrs	r3, r3, #24
 8004d80:	f003 030f 	and.w	r3, r3, #15
 8004d84:	4a60      	ldr	r2, [pc, #384]	@ (8004f08 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 8004d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d8a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004d8c:	e108      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004d92:	e105      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 8004d94:	2300      	movs	r3, #0
 8004d96:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004d98:	e102      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 8004d9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d9e:	1e59      	subs	r1, r3, #1
 8004da0:	ea52 0301 	orrs.w	r3, r2, r1
 8004da4:	d13c      	bne.n	8004e20 <HAL_RCCEx_GetPeriphCLKFreq+0x152c>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 8004da6:	4b56      	ldr	r3, [pc, #344]	@ (8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8004da8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004dac:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8004db0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8004db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004db4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004db8:	d027      	beq.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1516>
 8004dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dbc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004dc0:	d82b      	bhi.n	8004e1a <HAL_RCCEx_GetPeriphCLKFreq+0x1526>
 8004dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dc4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004dc8:	d017      	beq.n	8004dfa <HAL_RCCEx_GetPeriphCLKFreq+0x1506>
 8004dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dcc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004dd0:	d823      	bhi.n	8004e1a <HAL_RCCEx_GetPeriphCLKFreq+0x1526>
 8004dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d004      	beq.n	8004de2 <HAL_RCCEx_GetPeriphCLKFreq+0x14ee>
 8004dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dda:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004dde:	d004      	beq.n	8004dea <HAL_RCCEx_GetPeriphCLKFreq+0x14f6>
 8004de0:	e01b      	b.n	8004e1a <HAL_RCCEx_GetPeriphCLKFreq+0x1526>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8004de2:	f7fd ff91 	bl	8002d08 <HAL_RCC_GetSysClockFreq>
 8004de6:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004de8:	e0da      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004dea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004dee:	4618      	mov	r0, r3
 8004df0:	f7fe f96c 	bl	80030cc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8004df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004df6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004df8:	e0d2      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004dfa:	f107 0318 	add.w	r3, r7, #24
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f7fe fac0 	bl	8003384 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004e08:	e0ca      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004e0a:	f107 030c 	add.w	r3, r7, #12
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7fe fc14 	bl	800363c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004e18:	e0c2      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004e1e:	e0bf      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8004e20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e24:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8004e28:	430b      	orrs	r3, r1
 8004e2a:	d131      	bne.n	8004e90 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8004e2c:	4b34      	ldr	r3, [pc, #208]	@ (8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8004e2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004e32:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e36:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8004e38:	4b31      	ldr	r3, [pc, #196]	@ (8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8004e3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e3e:	f003 0302 	and.w	r3, r3, #2
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d106      	bne.n	8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0x1560>
 8004e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d103      	bne.n	8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0x1560>
    {
      frequency = LSE_VALUE;
 8004e4c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e50:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e52:	e0a5      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8004e54:	4b2a      	ldr	r3, [pc, #168]	@ (8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8004e56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e5a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e5e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e62:	d112      	bne.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x1596>
 8004e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e6a:	d10e      	bne.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x1596>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004e6c:	4b24      	ldr	r3, [pc, #144]	@ (8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8004e6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e76:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e7a:	d102      	bne.n	8004e82 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
      {
        frequency = LSI_VALUE / 128U;
 8004e7c:	23fa      	movs	r3, #250	@ 0xfa
 8004e7e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004e80:	e08e      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = LSI_VALUE;
 8004e82:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004e86:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004e88:	e08a      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e8e:	e087      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8004e90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e94:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8004e98:	430b      	orrs	r3, r1
 8004e9a:	d13b      	bne.n	8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0x1620>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8004e9c:	4b18      	ldr	r3, [pc, #96]	@ (8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8004e9e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004ea2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004ea6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8004ea8:	4b15      	ldr	r3, [pc, #84]	@ (8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004eb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004eb4:	d105      	bne.n	8004ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
 8004eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d102      	bne.n	8004ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
    {
      frequency = HSI48_VALUE;
 8004ebc:	4b13      	ldr	r3, [pc, #76]	@ (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x1618>)
 8004ebe:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ec0:	e06e      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8004ec2:	4b0f      	ldr	r3, [pc, #60]	@ (8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004eca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ece:	d106      	bne.n	8004ede <HAL_RCCEx_GetPeriphCLKFreq+0x15ea>
 8004ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ed2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ed6:	d102      	bne.n	8004ede <HAL_RCCEx_GetPeriphCLKFreq+0x15ea>
    {
      frequency = HSI48_VALUE >> 1U ;
 8004ed8:	4b0d      	ldr	r3, [pc, #52]	@ (8004f10 <HAL_RCCEx_GetPeriphCLKFreq+0x161c>)
 8004eda:	637b      	str	r3, [r7, #52]	@ 0x34
 8004edc:	e060      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8004ede:	4b08      	ldr	r3, [pc, #32]	@ (8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ee6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004eea:	d106      	bne.n	8004efa <HAL_RCCEx_GetPeriphCLKFreq+0x1606>
 8004eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ef2:	d102      	bne.n	8004efa <HAL_RCCEx_GetPeriphCLKFreq+0x1606>
    {
      frequency = HSI_VALUE;
 8004ef4:	4b03      	ldr	r3, [pc, #12]	@ (8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 8004ef6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ef8:	e052      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8004efa:	2300      	movs	r3, #0
 8004efc:	637b      	str	r3, [r7, #52]	@ 0x34
 8004efe:	e04f      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
 8004f00:	46020c00 	.word	0x46020c00
 8004f04:	00f42400 	.word	0x00f42400
 8004f08:	08008248 	.word	0x08008248
 8004f0c:	02dc6c00 	.word	0x02dc6c00
 8004f10:	016e3600 	.word	0x016e3600
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 8004f14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f18:	f1a3 0108 	sub.w	r1, r3, #8
 8004f1c:	ea52 0301 	orrs.w	r3, r2, r1
 8004f20:	d13c      	bne.n	8004f9c <HAL_RCCEx_GetPeriphCLKFreq+0x16a8>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 8004f22:	4b22      	ldr	r3, [pc, #136]	@ (8004fac <HAL_RCCEx_GetPeriphCLKFreq+0x16b8>)
 8004f24:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004f28:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004f2c:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 8004f2e:	4b1f      	ldr	r3, [pc, #124]	@ (8004fac <HAL_RCCEx_GetPeriphCLKFreq+0x16b8>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f36:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f3a:	d105      	bne.n	8004f48 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
 8004f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d102      	bne.n	8004f48 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
    {
      frequency = HSE_VALUE;
 8004f42:	4b1b      	ldr	r3, [pc, #108]	@ (8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x16bc>)
 8004f44:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f46:	e02b      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 8004f48:	4b18      	ldr	r3, [pc, #96]	@ (8004fac <HAL_RCCEx_GetPeriphCLKFreq+0x16b8>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f54:	d106      	bne.n	8004f64 <HAL_RCCEx_GetPeriphCLKFreq+0x1670>
 8004f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f58:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f5c:	d102      	bne.n	8004f64 <HAL_RCCEx_GetPeriphCLKFreq+0x1670>
    {
      frequency = HSE_VALUE >> 1U ;
 8004f5e:	4b15      	ldr	r3, [pc, #84]	@ (8004fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x16c0>)
 8004f60:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f62:	e01d      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 8004f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f6a:	d107      	bne.n	8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0x1688>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004f6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004f70:	4618      	mov	r0, r3
 8004f72:	f7fe f8ab 	bl	80030cc <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8004f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f78:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f7a:	e011      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 8004f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f7e:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004f82:	d108      	bne.n	8004f96 <HAL_RCCEx_GetPeriphCLKFreq+0x16a2>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004f84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f7fe f89f 	bl	80030cc <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 8004f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f90:	085b      	lsrs	r3, r3, #1
 8004f92:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f94:	e004      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 8004f96:	2300      	movs	r3, #0
 8004f98:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f9a:	e001      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8004fa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3738      	adds	r7, #56	@ 0x38
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	46020c00 	.word	0x46020c00
 8004fb0:	007a1200 	.word	0x007a1200
 8004fb4:	003d0900 	.word	0x003d0900

08004fb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d101      	bne.n	8004fca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e042      	b.n	8005050 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d106      	bne.n	8004fe2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f000 f83b 	bl	8005058 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2224      	movs	r2, #36	@ 0x24
 8004fe6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f022 0201 	bic.w	r2, r2, #1
 8004ff8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d002      	beq.n	8005008 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f000 f9e0 	bl	80053c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f000 f82f 	bl	800506c <UART_SetConfig>
 800500e:	4603      	mov	r3, r0
 8005010:	2b01      	cmp	r3, #1
 8005012:	d101      	bne.n	8005018 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e01b      	b.n	8005050 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	685a      	ldr	r2, [r3, #4]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005026:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	689a      	ldr	r2, [r3, #8]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005036:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f042 0201 	orr.w	r2, r2, #1
 8005046:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f000 fa5f 	bl	800550c <UART_CheckIdleState>
 800504e:	4603      	mov	r3, r0
}
 8005050:	4618      	mov	r0, r3
 8005052:	3708      	adds	r7, #8
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8005060:	bf00      	nop
 8005062:	370c      	adds	r7, #12
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800506c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005070:	b094      	sub	sp, #80	@ 0x50
 8005072:	af00      	add	r7, sp, #0
 8005074:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005076:	2300      	movs	r3, #0
 8005078:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800507c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	4b83      	ldr	r3, [pc, #524]	@ (8005290 <UART_SetConfig+0x224>)
 8005082:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005086:	689a      	ldr	r2, [r3, #8]
 8005088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800508a:	691b      	ldr	r3, [r3, #16]
 800508c:	431a      	orrs	r2, r3
 800508e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005090:	695b      	ldr	r3, [r3, #20]
 8005092:	431a      	orrs	r2, r3
 8005094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005096:	69db      	ldr	r3, [r3, #28]
 8005098:	4313      	orrs	r3, r2
 800509a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800509c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	497c      	ldr	r1, [pc, #496]	@ (8005294 <UART_SetConfig+0x228>)
 80050a4:	4019      	ands	r1, r3
 80050a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050ac:	430b      	orrs	r3, r1
 80050ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80050ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050bc:	68d9      	ldr	r1, [r3, #12]
 80050be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	ea40 0301 	orr.w	r3, r0, r1
 80050c6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80050c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050ca:	699b      	ldr	r3, [r3, #24]
 80050cc:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80050ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	4b6f      	ldr	r3, [pc, #444]	@ (8005290 <UART_SetConfig+0x224>)
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d009      	beq.n	80050ec <UART_SetConfig+0x80>
 80050d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	4b6e      	ldr	r3, [pc, #440]	@ (8005298 <UART_SetConfig+0x22c>)
 80050de:	429a      	cmp	r2, r3
 80050e0:	d004      	beq.n	80050ec <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80050e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050e4:	6a1a      	ldr	r2, [r3, #32]
 80050e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050e8:	4313      	orrs	r3, r2
 80050ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80050ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 80050f6:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 80050fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005100:	430b      	orrs	r3, r1
 8005102:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800510a:	f023 000f 	bic.w	r0, r3, #15
 800510e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005110:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	ea40 0301 	orr.w	r3, r0, r1
 800511a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800511c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	4b5e      	ldr	r3, [pc, #376]	@ (800529c <UART_SetConfig+0x230>)
 8005122:	429a      	cmp	r2, r3
 8005124:	d102      	bne.n	800512c <UART_SetConfig+0xc0>
 8005126:	2301      	movs	r3, #1
 8005128:	64bb      	str	r3, [r7, #72]	@ 0x48
 800512a:	e032      	b.n	8005192 <UART_SetConfig+0x126>
 800512c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	4b5b      	ldr	r3, [pc, #364]	@ (80052a0 <UART_SetConfig+0x234>)
 8005132:	429a      	cmp	r2, r3
 8005134:	d102      	bne.n	800513c <UART_SetConfig+0xd0>
 8005136:	2302      	movs	r3, #2
 8005138:	64bb      	str	r3, [r7, #72]	@ 0x48
 800513a:	e02a      	b.n	8005192 <UART_SetConfig+0x126>
 800513c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	4b58      	ldr	r3, [pc, #352]	@ (80052a4 <UART_SetConfig+0x238>)
 8005142:	429a      	cmp	r2, r3
 8005144:	d102      	bne.n	800514c <UART_SetConfig+0xe0>
 8005146:	2304      	movs	r3, #4
 8005148:	64bb      	str	r3, [r7, #72]	@ 0x48
 800514a:	e022      	b.n	8005192 <UART_SetConfig+0x126>
 800514c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	4b55      	ldr	r3, [pc, #340]	@ (80052a8 <UART_SetConfig+0x23c>)
 8005152:	429a      	cmp	r2, r3
 8005154:	d102      	bne.n	800515c <UART_SetConfig+0xf0>
 8005156:	2308      	movs	r3, #8
 8005158:	64bb      	str	r3, [r7, #72]	@ 0x48
 800515a:	e01a      	b.n	8005192 <UART_SetConfig+0x126>
 800515c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	4b52      	ldr	r3, [pc, #328]	@ (80052ac <UART_SetConfig+0x240>)
 8005162:	429a      	cmp	r2, r3
 8005164:	d102      	bne.n	800516c <UART_SetConfig+0x100>
 8005166:	2310      	movs	r3, #16
 8005168:	64bb      	str	r3, [r7, #72]	@ 0x48
 800516a:	e012      	b.n	8005192 <UART_SetConfig+0x126>
 800516c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	4b4f      	ldr	r3, [pc, #316]	@ (80052b0 <UART_SetConfig+0x244>)
 8005172:	429a      	cmp	r2, r3
 8005174:	d103      	bne.n	800517e <UART_SetConfig+0x112>
 8005176:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800517a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800517c:	e009      	b.n	8005192 <UART_SetConfig+0x126>
 800517e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	4b43      	ldr	r3, [pc, #268]	@ (8005290 <UART_SetConfig+0x224>)
 8005184:	429a      	cmp	r2, r3
 8005186:	d102      	bne.n	800518e <UART_SetConfig+0x122>
 8005188:	2320      	movs	r3, #32
 800518a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800518c:	e001      	b.n	8005192 <UART_SetConfig+0x126>
 800518e:	2300      	movs	r3, #0
 8005190:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005192:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	4b3e      	ldr	r3, [pc, #248]	@ (8005290 <UART_SetConfig+0x224>)
 8005198:	429a      	cmp	r2, r3
 800519a:	d005      	beq.n	80051a8 <UART_SetConfig+0x13c>
 800519c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	4b3d      	ldr	r3, [pc, #244]	@ (8005298 <UART_SetConfig+0x22c>)
 80051a2:	429a      	cmp	r2, r3
 80051a4:	f040 8088 	bne.w	80052b8 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80051a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80051aa:	2200      	movs	r2, #0
 80051ac:	623b      	str	r3, [r7, #32]
 80051ae:	627a      	str	r2, [r7, #36]	@ 0x24
 80051b0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80051b4:	f7fe fb9e 	bl	80038f4 <HAL_RCCEx_GetPeriphCLKFreq>
 80051b8:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80051ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051bc:	2b00      	cmp	r3, #0
 80051be:	f000 80eb 	beq.w	8005398 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80051c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051c6:	4a3b      	ldr	r2, [pc, #236]	@ (80052b4 <UART_SetConfig+0x248>)
 80051c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051cc:	461a      	mov	r2, r3
 80051ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80051d4:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80051d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051d8:	685a      	ldr	r2, [r3, #4]
 80051da:	4613      	mov	r3, r2
 80051dc:	005b      	lsls	r3, r3, #1
 80051de:	4413      	add	r3, r2
 80051e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d305      	bcc.n	80051f2 <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80051e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80051ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d903      	bls.n	80051fa <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80051f8:	e048      	b.n	800528c <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051fc:	2200      	movs	r2, #0
 80051fe:	61bb      	str	r3, [r7, #24]
 8005200:	61fa      	str	r2, [r7, #28]
 8005202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005206:	4a2b      	ldr	r2, [pc, #172]	@ (80052b4 <UART_SetConfig+0x248>)
 8005208:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800520c:	b29b      	uxth	r3, r3
 800520e:	2200      	movs	r2, #0
 8005210:	613b      	str	r3, [r7, #16]
 8005212:	617a      	str	r2, [r7, #20]
 8005214:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005218:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800521c:	f7fb f82a 	bl	8000274 <__aeabi_uldivmod>
 8005220:	4602      	mov	r2, r0
 8005222:	460b      	mov	r3, r1
 8005224:	4610      	mov	r0, r2
 8005226:	4619      	mov	r1, r3
 8005228:	f04f 0200 	mov.w	r2, #0
 800522c:	f04f 0300 	mov.w	r3, #0
 8005230:	020b      	lsls	r3, r1, #8
 8005232:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005236:	0202      	lsls	r2, r0, #8
 8005238:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800523a:	6849      	ldr	r1, [r1, #4]
 800523c:	0849      	lsrs	r1, r1, #1
 800523e:	2000      	movs	r0, #0
 8005240:	460c      	mov	r4, r1
 8005242:	4605      	mov	r5, r0
 8005244:	eb12 0804 	adds.w	r8, r2, r4
 8005248:	eb43 0905 	adc.w	r9, r3, r5
 800524c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	60bb      	str	r3, [r7, #8]
 8005254:	60fa      	str	r2, [r7, #12]
 8005256:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800525a:	4640      	mov	r0, r8
 800525c:	4649      	mov	r1, r9
 800525e:	f7fb f809 	bl	8000274 <__aeabi_uldivmod>
 8005262:	4602      	mov	r2, r0
 8005264:	460b      	mov	r3, r1
 8005266:	4613      	mov	r3, r2
 8005268:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800526a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800526c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005270:	d308      	bcc.n	8005284 <UART_SetConfig+0x218>
 8005272:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005274:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005278:	d204      	bcs.n	8005284 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 800527a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005280:	60da      	str	r2, [r3, #12]
 8005282:	e003      	b.n	800528c <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800528a:	e085      	b.n	8005398 <UART_SetConfig+0x32c>
 800528c:	e084      	b.n	8005398 <UART_SetConfig+0x32c>
 800528e:	bf00      	nop
 8005290:	46002400 	.word	0x46002400
 8005294:	cfff69f3 	.word	0xcfff69f3
 8005298:	56002400 	.word	0x56002400
 800529c:	40013800 	.word	0x40013800
 80052a0:	40004400 	.word	0x40004400
 80052a4:	40004800 	.word	0x40004800
 80052a8:	40004c00 	.word	0x40004c00
 80052ac:	40005000 	.word	0x40005000
 80052b0:	40006400 	.word	0x40006400
 80052b4:	08008314 	.word	0x08008314
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052ba:	69db      	ldr	r3, [r3, #28]
 80052bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052c0:	d13c      	bne.n	800533c <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80052c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80052c4:	2200      	movs	r2, #0
 80052c6:	603b      	str	r3, [r7, #0]
 80052c8:	607a      	str	r2, [r7, #4]
 80052ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80052ce:	f7fe fb11 	bl	80038f4 <HAL_RCCEx_GetPeriphCLKFreq>
 80052d2:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80052d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d05e      	beq.n	8005398 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052de:	4a39      	ldr	r2, [pc, #228]	@ (80053c4 <UART_SetConfig+0x358>)
 80052e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052e4:	461a      	mov	r2, r3
 80052e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80052ec:	005a      	lsls	r2, r3, #1
 80052ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	085b      	lsrs	r3, r3, #1
 80052f4:	441a      	add	r2, r3
 80052f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80052fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005300:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005302:	2b0f      	cmp	r3, #15
 8005304:	d916      	bls.n	8005334 <UART_SetConfig+0x2c8>
 8005306:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005308:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800530c:	d212      	bcs.n	8005334 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800530e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005310:	b29b      	uxth	r3, r3
 8005312:	f023 030f 	bic.w	r3, r3, #15
 8005316:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005318:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800531a:	085b      	lsrs	r3, r3, #1
 800531c:	b29b      	uxth	r3, r3
 800531e:	f003 0307 	and.w	r3, r3, #7
 8005322:	b29a      	uxth	r2, r3
 8005324:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005326:	4313      	orrs	r3, r2
 8005328:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800532a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8005330:	60da      	str	r2, [r3, #12]
 8005332:	e031      	b.n	8005398 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800533a:	e02d      	b.n	8005398 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800533c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800533e:	2200      	movs	r2, #0
 8005340:	469a      	mov	sl, r3
 8005342:	4693      	mov	fp, r2
 8005344:	4650      	mov	r0, sl
 8005346:	4659      	mov	r1, fp
 8005348:	f7fe fad4 	bl	80038f4 <HAL_RCCEx_GetPeriphCLKFreq>
 800534c:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800534e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005350:	2b00      	cmp	r3, #0
 8005352:	d021      	beq.n	8005398 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005358:	4a1a      	ldr	r2, [pc, #104]	@ (80053c4 <UART_SetConfig+0x358>)
 800535a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800535e:	461a      	mov	r2, r3
 8005360:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005362:	fbb3 f2f2 	udiv	r2, r3, r2
 8005366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	085b      	lsrs	r3, r3, #1
 800536c:	441a      	add	r2, r3
 800536e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	fbb2 f3f3 	udiv	r3, r2, r3
 8005376:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005378:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800537a:	2b0f      	cmp	r3, #15
 800537c:	d909      	bls.n	8005392 <UART_SetConfig+0x326>
 800537e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005380:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005384:	d205      	bcs.n	8005392 <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005386:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005388:	b29a      	uxth	r2, r3
 800538a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	60da      	str	r2, [r3, #12]
 8005390:	e002      	b.n	8005398 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800539a:	2201      	movs	r2, #1
 800539c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80053a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053a2:	2201      	movs	r2, #1
 80053a4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053aa:	2200      	movs	r2, #0
 80053ac:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80053ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053b0:	2200      	movs	r2, #0
 80053b2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80053b4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3750      	adds	r7, #80	@ 0x50
 80053bc:	46bd      	mov	sp, r7
 80053be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053c2:	bf00      	nop
 80053c4:	08008314 	.word	0x08008314

080053c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053d4:	f003 0308 	and.w	r3, r3, #8
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d00a      	beq.n	80053f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	430a      	orrs	r2, r1
 80053f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053f6:	f003 0301 	and.w	r3, r3, #1
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00a      	beq.n	8005414 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	430a      	orrs	r2, r1
 8005412:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005418:	f003 0302 	and.w	r3, r3, #2
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00a      	beq.n	8005436 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	430a      	orrs	r2, r1
 8005434:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800543a:	f003 0304 	and.w	r3, r3, #4
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00a      	beq.n	8005458 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	430a      	orrs	r2, r1
 8005456:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800545c:	f003 0310 	and.w	r3, r3, #16
 8005460:	2b00      	cmp	r3, #0
 8005462:	d00a      	beq.n	800547a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	430a      	orrs	r2, r1
 8005478:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800547e:	f003 0320 	and.w	r3, r3, #32
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00a      	beq.n	800549c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	430a      	orrs	r2, r1
 800549a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d01a      	beq.n	80054de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	430a      	orrs	r2, r1
 80054bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80054c6:	d10a      	bne.n	80054de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	430a      	orrs	r2, r1
 80054dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d00a      	beq.n	8005500 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	430a      	orrs	r2, r1
 80054fe:	605a      	str	r2, [r3, #4]
  }
}
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b098      	sub	sp, #96	@ 0x60
 8005510:	af02      	add	r7, sp, #8
 8005512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800551c:	f7fb fcfa 	bl	8000f14 <HAL_GetTick>
 8005520:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 0308 	and.w	r3, r3, #8
 800552c:	2b08      	cmp	r3, #8
 800552e:	d12f      	bne.n	8005590 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005530:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005534:	9300      	str	r3, [sp, #0]
 8005536:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005538:	2200      	movs	r2, #0
 800553a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 f88e 	bl	8005660 <UART_WaitOnFlagUntilTimeout>
 8005544:	4603      	mov	r3, r0
 8005546:	2b00      	cmp	r3, #0
 8005548:	d022      	beq.n	8005590 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005552:	e853 3f00 	ldrex	r3, [r3]
 8005556:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005558:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800555a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800555e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	461a      	mov	r2, r3
 8005566:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005568:	647b      	str	r3, [r7, #68]	@ 0x44
 800556a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800556e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005570:	e841 2300 	strex	r3, r2, [r1]
 8005574:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005576:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005578:	2b00      	cmp	r3, #0
 800557a:	d1e6      	bne.n	800554a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2220      	movs	r2, #32
 8005580:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800558c:	2303      	movs	r3, #3
 800558e:	e063      	b.n	8005658 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0304 	and.w	r3, r3, #4
 800559a:	2b04      	cmp	r3, #4
 800559c:	d149      	bne.n	8005632 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800559e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80055a2:	9300      	str	r3, [sp, #0]
 80055a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055a6:	2200      	movs	r2, #0
 80055a8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f000 f857 	bl	8005660 <UART_WaitOnFlagUntilTimeout>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d03c      	beq.n	8005632 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c0:	e853 3f00 	ldrex	r3, [r3]
 80055c4:	623b      	str	r3, [r7, #32]
   return(result);
 80055c6:	6a3b      	ldr	r3, [r7, #32]
 80055c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	461a      	mov	r2, r3
 80055d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80055d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055de:	e841 2300 	strex	r3, r2, [r1]
 80055e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80055e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d1e6      	bne.n	80055b8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	3308      	adds	r3, #8
 80055f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	e853 3f00 	ldrex	r3, [r3]
 80055f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f023 0301 	bic.w	r3, r3, #1
 8005600:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	3308      	adds	r3, #8
 8005608:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800560a:	61fa      	str	r2, [r7, #28]
 800560c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800560e:	69b9      	ldr	r1, [r7, #24]
 8005610:	69fa      	ldr	r2, [r7, #28]
 8005612:	e841 2300 	strex	r3, r2, [r1]
 8005616:	617b      	str	r3, [r7, #20]
   return(result);
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d1e5      	bne.n	80055ea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2220      	movs	r2, #32
 8005622:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800562e:	2303      	movs	r3, #3
 8005630:	e012      	b.n	8005658 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2220      	movs	r2, #32
 8005636:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2220      	movs	r2, #32
 800563e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005656:	2300      	movs	r3, #0
}
 8005658:	4618      	mov	r0, r3
 800565a:	3758      	adds	r7, #88	@ 0x58
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	603b      	str	r3, [r7, #0]
 800566c:	4613      	mov	r3, r2
 800566e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005670:	e04f      	b.n	8005712 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005672:	69bb      	ldr	r3, [r7, #24]
 8005674:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005678:	d04b      	beq.n	8005712 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800567a:	f7fb fc4b 	bl	8000f14 <HAL_GetTick>
 800567e:	4602      	mov	r2, r0
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	1ad3      	subs	r3, r2, r3
 8005684:	69ba      	ldr	r2, [r7, #24]
 8005686:	429a      	cmp	r2, r3
 8005688:	d302      	bcc.n	8005690 <UART_WaitOnFlagUntilTimeout+0x30>
 800568a:	69bb      	ldr	r3, [r7, #24]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d101      	bne.n	8005694 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005690:	2303      	movs	r3, #3
 8005692:	e04e      	b.n	8005732 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 0304 	and.w	r3, r3, #4
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d037      	beq.n	8005712 <UART_WaitOnFlagUntilTimeout+0xb2>
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	2b80      	cmp	r3, #128	@ 0x80
 80056a6:	d034      	beq.n	8005712 <UART_WaitOnFlagUntilTimeout+0xb2>
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	2b40      	cmp	r3, #64	@ 0x40
 80056ac:	d031      	beq.n	8005712 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	69db      	ldr	r3, [r3, #28]
 80056b4:	f003 0308 	and.w	r3, r3, #8
 80056b8:	2b08      	cmp	r3, #8
 80056ba:	d110      	bne.n	80056de <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2208      	movs	r2, #8
 80056c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80056c4:	68f8      	ldr	r0, [r7, #12]
 80056c6:	f000 f838 	bl	800573a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2208      	movs	r2, #8
 80056ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e029      	b.n	8005732 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	69db      	ldr	r3, [r3, #28]
 80056e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056ec:	d111      	bne.n	8005712 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80056f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80056f8:	68f8      	ldr	r0, [r7, #12]
 80056fa:	f000 f81e 	bl	800573a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2220      	movs	r2, #32
 8005702:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2200      	movs	r2, #0
 800570a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e00f      	b.n	8005732 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	69da      	ldr	r2, [r3, #28]
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	4013      	ands	r3, r2
 800571c:	68ba      	ldr	r2, [r7, #8]
 800571e:	429a      	cmp	r2, r3
 8005720:	bf0c      	ite	eq
 8005722:	2301      	moveq	r3, #1
 8005724:	2300      	movne	r3, #0
 8005726:	b2db      	uxtb	r3, r3
 8005728:	461a      	mov	r2, r3
 800572a:	79fb      	ldrb	r3, [r7, #7]
 800572c:	429a      	cmp	r2, r3
 800572e:	d0a0      	beq.n	8005672 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005730:	2300      	movs	r3, #0
}
 8005732:	4618      	mov	r0, r3
 8005734:	3710      	adds	r7, #16
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}

0800573a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800573a:	b480      	push	{r7}
 800573c:	b095      	sub	sp, #84	@ 0x54
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005748:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800574a:	e853 3f00 	ldrex	r3, [r3]
 800574e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005752:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005756:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	461a      	mov	r2, r3
 800575e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005760:	643b      	str	r3, [r7, #64]	@ 0x40
 8005762:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005764:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005766:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005768:	e841 2300 	strex	r3, r2, [r1]
 800576c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800576e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005770:	2b00      	cmp	r3, #0
 8005772:	d1e6      	bne.n	8005742 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	3308      	adds	r3, #8
 800577a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800577c:	6a3b      	ldr	r3, [r7, #32]
 800577e:	e853 3f00 	ldrex	r3, [r3]
 8005782:	61fb      	str	r3, [r7, #28]
   return(result);
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800578a:	f023 0301 	bic.w	r3, r3, #1
 800578e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	3308      	adds	r3, #8
 8005796:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005798:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800579a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800579c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800579e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057a0:	e841 2300 	strex	r3, r2, [r1]
 80057a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80057a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d1e3      	bne.n	8005774 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d118      	bne.n	80057e6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	e853 3f00 	ldrex	r3, [r3]
 80057c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	f023 0310 	bic.w	r3, r3, #16
 80057c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	461a      	mov	r2, r3
 80057d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057d2:	61bb      	str	r3, [r7, #24]
 80057d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d6:	6979      	ldr	r1, [r7, #20]
 80057d8:	69ba      	ldr	r2, [r7, #24]
 80057da:	e841 2300 	strex	r3, r2, [r1]
 80057de:	613b      	str	r3, [r7, #16]
   return(result);
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d1e6      	bne.n	80057b4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2220      	movs	r2, #32
 80057ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2200      	movs	r2, #0
 80057f2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80057fa:	bf00      	nop
 80057fc:	3754      	adds	r7, #84	@ 0x54
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr

08005806 <prng_fill>:
 8005806:	f890 c000 	ldrb.w	ip, [r0]
 800580a:	2300      	movs	r3, #0
 800580c:	4293      	cmp	r3, r2
 800580e:	d20d      	bcs.n	800582c <prng_fill+0x26>
 8005810:	b500      	push	{lr}
 8005812:	f10c 0e01 	add.w	lr, ip, #1
 8005816:	f801 c003 	strb.w	ip, [r1, r3]
 800581a:	3301      	adds	r3, #1
 800581c:	fa5f fc8e 	uxtb.w	ip, lr
 8005820:	4293      	cmp	r3, r2
 8005822:	d3f6      	bcc.n	8005812 <prng_fill+0xc>
 8005824:	f880 c000 	strb.w	ip, [r0]
 8005828:	f85d fb04 	ldr.w	pc, [sp], #4
 800582c:	f880 c000 	strb.w	ip, [r0]
 8005830:	4770      	bx	lr
	...

08005834 <stateful_prng_fill>:
 8005834:	b508      	push	{r3, lr}
 8005836:	460a      	mov	r2, r1
 8005838:	4601      	mov	r1, r0
 800583a:	4802      	ldr	r0, [pc, #8]	@ (8005844 <stateful_prng_fill+0x10>)
 800583c:	f7ff ffe3 	bl	8005806 <prng_fill>
 8005840:	bd08      	pop	{r3, pc}
 8005842:	bf00      	nop
 8005844:	200003c0 	.word	0x200003c0

08005848 <write_func_using_transaction>:
 8005848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800584c:	af00      	add	r7, sp, #0
 800584e:	4604      	mov	r4, r0
 8005850:	460d      	mov	r5, r1
 8005852:	4616      	mov	r6, r2
 8005854:	4698      	mov	r8, r3
 8005856:	6803      	ldr	r3, [r0, #0]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	6902      	ldr	r2, [r0, #16]
 800585c:	eb02 0c03 	add.w	ip, r2, r3
 8005860:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8005864:	fbbc fcf3 	udiv	ip, ip, r3
 8005868:	f10c 0c07 	add.w	ip, ip, #7
 800586c:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8005870:	f10c 0c07 	add.w	ip, ip, #7
 8005874:	f02c 0c07 	bic.w	ip, ip, #7
 8005878:	ebad 0d0c 	sub.w	sp, sp, ip
 800587c:	4b09      	ldr	r3, [pc, #36]	@ (80058a4 <write_func_using_transaction+0x5c>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4669      	mov	r1, sp
 8005882:	4798      	blx	r3
 8005884:	4b08      	ldr	r3, [pc, #32]	@ (80058a8 <write_func_using_transaction+0x60>)
 8005886:	f8d3 9000 	ldr.w	r9, [r3]
 800588a:	4643      	mov	r3, r8
 800588c:	4632      	mov	r2, r6
 800588e:	4629      	mov	r1, r5
 8005890:	4620      	mov	r0, r4
 8005892:	47c8      	blx	r9
 8005894:	4b05      	ldr	r3, [pc, #20]	@ (80058ac <write_func_using_transaction+0x64>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4620      	mov	r0, r4
 800589a:	4798      	blx	r3
 800589c:	46bd      	mov	sp, r7
 800589e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058a2:	bf00      	nop
 80058a4:	200003d4 	.word	0x200003d4
 80058a8:	200003cc 	.word	0x200003cc
 80058ac:	200003c8 	.word	0x200003c8

080058b0 <throw_exception>:
 80058b0:	b508      	push	{r3, lr}
 80058b2:	4601      	mov	r1, r0
 80058b4:	4801      	ldr	r0, [pc, #4]	@ (80058bc <throw_exception+0xc>)
 80058b6:	f7fa fcd3 	bl	8000260 <longjmp>
 80058ba:	bf00      	nop
 80058bc:	200003f0 	.word	0x200003f0

080058c0 <ui_led1_blink_ms>:
 80058c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058c2:	2863      	cmp	r0, #99	@ 0x63
 80058c4:	d909      	bls.n	80058da <ui_led1_blink_ms+0x1a>
 80058c6:	0907      	lsrs	r7, r0, #4
 80058c8:	fb01 f707 	mul.w	r7, r1, r7
 80058cc:	1bc6      	subs	r6, r0, r7
 80058ce:	2001      	movs	r0, #1
 80058d0:	f7fa fde0 	bl	8000494 <led1>
 80058d4:	2500      	movs	r5, #0
 80058d6:	462c      	mov	r4, r5
 80058d8:	e006      	b.n	80058e8 <ui_led1_blink_ms+0x28>
 80058da:	2005      	movs	r0, #5
 80058dc:	f7ff ffe8 	bl	80058b0 <throw_exception>
 80058e0:	2c02      	cmp	r4, #2
 80058e2:	d800      	bhi.n	80058e6 <ui_led1_blink_ms+0x26>
 80058e4:	2400      	movs	r4, #0
 80058e6:	3501      	adds	r5, #1
 80058e8:	2d03      	cmp	r5, #3
 80058ea:	d808      	bhi.n	80058fe <ui_led1_blink_ms+0x3e>
 80058ec:	08b8      	lsrs	r0, r7, #2
 80058ee:	f7fa fdfb 	bl	80004e8 <delay_ms>
 80058f2:	f7fa fde7 	bl	80004c4 <button>
 80058f6:	2800      	cmp	r0, #0
 80058f8:	d0f2      	beq.n	80058e0 <ui_led1_blink_ms+0x20>
 80058fa:	3401      	adds	r4, #1
 80058fc:	e7f3      	b.n	80058e6 <ui_led1_blink_ms+0x26>
 80058fe:	2000      	movs	r0, #0
 8005900:	f7fa fdc8 	bl	8000494 <led1>
 8005904:	2500      	movs	r5, #0
 8005906:	e003      	b.n	8005910 <ui_led1_blink_ms+0x50>
 8005908:	2c02      	cmp	r4, #2
 800590a:	d800      	bhi.n	800590e <ui_led1_blink_ms+0x4e>
 800590c:	2400      	movs	r4, #0
 800590e:	3501      	adds	r5, #1
 8005910:	2d03      	cmp	r5, #3
 8005912:	d808      	bhi.n	8005926 <ui_led1_blink_ms+0x66>
 8005914:	08b0      	lsrs	r0, r6, #2
 8005916:	f7fa fde7 	bl	80004e8 <delay_ms>
 800591a:	f7fa fdd3 	bl	80004c4 <button>
 800591e:	2800      	cmp	r0, #0
 8005920:	d0f2      	beq.n	8005908 <ui_led1_blink_ms+0x48>
 8005922:	3401      	adds	r4, #1
 8005924:	e7f3      	b.n	800590e <ui_led1_blink_ms+0x4e>
 8005926:	2c02      	cmp	r4, #2
 8005928:	bf94      	ite	ls
 800592a:	2000      	movls	r0, #0
 800592c:	2001      	movhi	r0, #1
 800592e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005930 <ui_wait_button>:
 8005930:	b508      	push	{r3, lr}
 8005932:	f7fa fdc7 	bl	80004c4 <button>
 8005936:	b988      	cbnz	r0, 800595c <ui_wait_button+0x2c>
 8005938:	2108      	movs	r1, #8
 800593a:	20c8      	movs	r0, #200	@ 0xc8
 800593c:	f7ff ffc0 	bl	80058c0 <ui_led1_blink_ms>
 8005940:	2800      	cmp	r0, #0
 8005942:	d0f9      	beq.n	8005938 <ui_wait_button+0x8>
 8005944:	f7fa fdbe 	bl	80004c4 <button>
 8005948:	2800      	cmp	r0, #0
 800594a:	d1fb      	bne.n	8005944 <ui_wait_button+0x14>
 800594c:	20c8      	movs	r0, #200	@ 0xc8
 800594e:	f7fa fdcb 	bl	80004e8 <delay_ms>
 8005952:	f7fa fdb7 	bl	80004c4 <button>
 8005956:	2800      	cmp	r0, #0
 8005958:	d1f4      	bne.n	8005944 <ui_wait_button+0x14>
 800595a:	bd08      	pop	{r3, pc}
 800595c:	2008      	movs	r0, #8
 800595e:	f7ff ffa7 	bl	80058b0 <throw_exception>

08005962 <read_and_check>:
 8005962:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005964:	af00      	add	r7, sp, #0
 8005966:	4615      	mov	r5, r2
 8005968:	461c      	mov	r4, r3
 800596a:	1dda      	adds	r2, r3, #7
 800596c:	f022 0207 	bic.w	r2, r2, #7
 8005970:	ebad 0d02 	sub.w	sp, sp, r2
 8005974:	466e      	mov	r6, sp
 8005976:	460a      	mov	r2, r1
 8005978:	4669      	mov	r1, sp
 800597a:	f001 f885 	bl	8006a88 <lftl_read>
 800597e:	2100      	movs	r1, #0
 8005980:	42a1      	cmp	r1, r4
 8005982:	d209      	bcs.n	8005998 <read_and_check+0x36>
 8005984:	f816 c001 	ldrb.w	ip, [r6, r1]
 8005988:	5c68      	ldrb	r0, [r5, r1]
 800598a:	4584      	cmp	ip, r0
 800598c:	d101      	bne.n	8005992 <read_and_check+0x30>
 800598e:	3101      	adds	r1, #1
 8005990:	e7f6      	b.n	8005980 <read_and_check+0x1e>
 8005992:	200a      	movs	r0, #10
 8005994:	f7ff ff8c 	bl	80058b0 <throw_exception>
 8005998:	46bd      	mov	sp, r7
 800599a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800599c <erase_all_test>:
 800599c:	b570      	push	{r4, r5, r6, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	4c0e      	ldr	r4, [pc, #56]	@ (80059dc <erase_all_test+0x40>)
 80059a2:	4b0f      	ldr	r3, [pc, #60]	@ (80059e0 <erase_all_test+0x44>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4620      	mov	r0, r4
 80059a8:	4798      	blx	r3
 80059aa:	6926      	ldr	r6, [r4, #16]
 80059ac:	3607      	adds	r6, #7
 80059ae:	08f6      	lsrs	r6, r6, #3
 80059b0:	6865      	ldr	r5, [r4, #4]
 80059b2:	2400      	movs	r4, #0
 80059b4:	e00d      	b.n	80059d2 <erase_all_test+0x36>
 80059b6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80059ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80059be:	e9cd 2300 	strd	r2, r3, [sp]
 80059c2:	2308      	movs	r3, #8
 80059c4:	466a      	mov	r2, sp
 80059c6:	4629      	mov	r1, r5
 80059c8:	4804      	ldr	r0, [pc, #16]	@ (80059dc <erase_all_test+0x40>)
 80059ca:	f7ff ffca 	bl	8005962 <read_and_check>
 80059ce:	3508      	adds	r5, #8
 80059d0:	3401      	adds	r4, #1
 80059d2:	42b4      	cmp	r4, r6
 80059d4:	d3ef      	bcc.n	80059b6 <erase_all_test+0x1a>
 80059d6:	b002      	add	sp, #8
 80059d8:	bd70      	pop	{r4, r5, r6, pc}
 80059da:	bf00      	nop
 80059dc:	20000010 	.word	0x20000010
 80059e0:	200003dc 	.word	0x200003dc

080059e4 <read_newer_and_check>:
 80059e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	4615      	mov	r5, r2
 80059ea:	461c      	mov	r4, r3
 80059ec:	1dda      	adds	r2, r3, #7
 80059ee:	f022 0207 	bic.w	r2, r2, #7
 80059f2:	ebad 0d02 	sub.w	sp, sp, r2
 80059f6:	466e      	mov	r6, sp
 80059f8:	460a      	mov	r2, r1
 80059fa:	4669      	mov	r1, sp
 80059fc:	f001 f9da 	bl	8006db4 <lftl_read_newer>
 8005a00:	2100      	movs	r1, #0
 8005a02:	42a1      	cmp	r1, r4
 8005a04:	d209      	bcs.n	8005a1a <read_newer_and_check+0x36>
 8005a06:	f816 c001 	ldrb.w	ip, [r6, r1]
 8005a0a:	5c68      	ldrb	r0, [r5, r1]
 8005a0c:	4584      	cmp	ip, r0
 8005a0e:	d101      	bne.n	8005a14 <read_newer_and_check+0x30>
 8005a10:	3101      	adds	r1, #1
 8005a12:	e7f6      	b.n	8005a02 <read_newer_and_check+0x1e>
 8005a14:	200a      	movs	r0, #10
 8005a16:	f7ff ff4b 	bl	80058b0 <throw_exception>
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005a20 <test_write>:
 8005a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a24:	4604      	mov	r4, r0
 8005a26:	460d      	mov	r5, r1
 8005a28:	4616      	mov	r6, r2
 8005a2a:	461f      	mov	r7, r3
 8005a2c:	f8df c028 	ldr.w	ip, [pc, #40]	@ 8005a58 <test_write+0x38>
 8005a30:	f8dc 8000 	ldr.w	r8, [ip]
 8005a34:	47c0      	blx	r8
 8005a36:	463b      	mov	r3, r7
 8005a38:	4632      	mov	r2, r6
 8005a3a:	4629      	mov	r1, r5
 8005a3c:	4620      	mov	r0, r4
 8005a3e:	f7ff ff90 	bl	8005962 <read_and_check>
 8005a42:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005a46:	60e3      	str	r3, [r4, #12]
 8005a48:	463b      	mov	r3, r7
 8005a4a:	4632      	mov	r2, r6
 8005a4c:	4629      	mov	r1, r5
 8005a4e:	4620      	mov	r0, r4
 8005a50:	f7ff ff87 	bl	8005962 <read_and_check>
 8005a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a58:	200003d8 	.word	0x200003d8

08005a5c <transaction_basic_test>:
 8005a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a60:	b089      	sub	sp, #36	@ 0x24
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	2300      	movs	r3, #0
 8005a66:	77fb      	strb	r3, [r7, #31]
 8005a68:	617b      	str	r3, [r7, #20]
 8005a6a:	e0a0      	b.n	8005bae <transaction_basic_test+0x152>
 8005a6c:	f8c7 d004 	str.w	sp, [r7, #4]
 8005a70:	b0a0      	sub	sp, #128	@ 0x80
 8005a72:	46e9      	mov	r9, sp
 8005a74:	f107 051f 	add.w	r5, r7, #31
 8005a78:	2280      	movs	r2, #128	@ 0x80
 8005a7a:	4669      	mov	r1, sp
 8005a7c:	4628      	mov	r0, r5
 8005a7e:	f7ff fec2 	bl	8005806 <prng_fill>
 8005a82:	f8df 813c 	ldr.w	r8, [pc, #316]	@ 8005bc0 <transaction_basic_test+0x164>
 8005a86:	4c4f      	ldr	r4, [pc, #316]	@ (8005bc4 <transaction_basic_test+0x168>)
 8005a88:	2380      	movs	r3, #128	@ 0x80
 8005a8a:	466a      	mov	r2, sp
 8005a8c:	4641      	mov	r1, r8
 8005a8e:	4620      	mov	r0, r4
 8005a90:	f7ff ffc6 	bl	8005a20 <test_write>
 8005a94:	6923      	ldr	r3, [r4, #16]
 8005a96:	6822      	ldr	r2, [r4, #0]
 8005a98:	6892      	ldr	r2, [r2, #8]
 8005a9a:	4413      	add	r3, r2
 8005a9c:	3b01      	subs	r3, #1
 8005a9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005aa2:	3307      	adds	r3, #7
 8005aa4:	08db      	lsrs	r3, r3, #3
 8005aa6:	3307      	adds	r3, #7
 8005aa8:	f023 0307 	bic.w	r3, r3, #7
 8005aac:	ebad 0d03 	sub.w	sp, sp, r3
 8005ab0:	4b45      	ldr	r3, [pc, #276]	@ (8005bc8 <transaction_basic_test+0x16c>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4669      	mov	r1, sp
 8005ab6:	4620      	mov	r0, r4
 8005ab8:	4798      	blx	r3
 8005aba:	b0a0      	sub	sp, #128	@ 0x80
 8005abc:	2280      	movs	r2, #128	@ 0x80
 8005abe:	4669      	mov	r1, sp
 8005ac0:	4628      	mov	r0, r5
 8005ac2:	f7ff fea0 	bl	8005806 <prng_fill>
 8005ac6:	4b41      	ldr	r3, [pc, #260]	@ (8005bcc <transaction_basic_test+0x170>)
 8005ac8:	689d      	ldr	r5, [r3, #8]
 8005aca:	f8df a104 	ldr.w	sl, [pc, #260]	@ 8005bd0 <transaction_basic_test+0x174>
 8005ace:	f8da 6000 	ldr.w	r6, [sl]
 8005ad2:	462b      	mov	r3, r5
 8005ad4:	466a      	mov	r2, sp
 8005ad6:	4641      	mov	r1, r8
 8005ad8:	4620      	mov	r0, r4
 8005ada:	47b0      	blx	r6
 8005adc:	eb0d 0b05 	add.w	fp, sp, r5
 8005ae0:	f108 0640 	add.w	r6, r8, #64	@ 0x40
 8005ae4:	f8da a000 	ldr.w	sl, [sl]
 8005ae8:	462b      	mov	r3, r5
 8005aea:	465a      	mov	r2, fp
 8005aec:	4631      	mov	r1, r6
 8005aee:	4620      	mov	r0, r4
 8005af0:	47d0      	blx	sl
 8005af2:	462b      	mov	r3, r5
 8005af4:	464a      	mov	r2, r9
 8005af6:	4641      	mov	r1, r8
 8005af8:	4620      	mov	r0, r4
 8005afa:	f7ff ff32 	bl	8005962 <read_and_check>
 8005afe:	462b      	mov	r3, r5
 8005b00:	f109 0240 	add.w	r2, r9, #64	@ 0x40
 8005b04:	4631      	mov	r1, r6
 8005b06:	4620      	mov	r0, r4
 8005b08:	f7ff ff2b 	bl	8005962 <read_and_check>
 8005b0c:	462b      	mov	r3, r5
 8005b0e:	466a      	mov	r2, sp
 8005b10:	4641      	mov	r1, r8
 8005b12:	4620      	mov	r0, r4
 8005b14:	f7ff ff66 	bl	80059e4 <read_newer_and_check>
 8005b18:	462b      	mov	r3, r5
 8005b1a:	465a      	mov	r2, fp
 8005b1c:	4631      	mov	r1, r6
 8005b1e:	4620      	mov	r0, r4
 8005b20:	f7ff ff60 	bl	80059e4 <read_newer_and_check>
 8005b24:	4b2b      	ldr	r3, [pc, #172]	@ (8005bd4 <transaction_basic_test+0x178>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4620      	mov	r0, r4
 8005b2a:	4798      	blx	r3
 8005b2c:	462b      	mov	r3, r5
 8005b2e:	466a      	mov	r2, sp
 8005b30:	4641      	mov	r1, r8
 8005b32:	4620      	mov	r0, r4
 8005b34:	f7ff ff15 	bl	8005962 <read_and_check>
 8005b38:	eb08 0105 	add.w	r1, r8, r5
 8005b3c:	eb09 0305 	add.w	r3, r9, r5
 8005b40:	461a      	mov	r2, r3
 8005b42:	f1c5 0a40 	rsb	sl, r5, #64	@ 0x40
 8005b46:	4653      	mov	r3, sl
 8005b48:	60fa      	str	r2, [r7, #12]
 8005b4a:	6139      	str	r1, [r7, #16]
 8005b4c:	4620      	mov	r0, r4
 8005b4e:	f7ff ff08 	bl	8005962 <read_and_check>
 8005b52:	462b      	mov	r3, r5
 8005b54:	465a      	mov	r2, fp
 8005b56:	4631      	mov	r1, r6
 8005b58:	4620      	mov	r0, r4
 8005b5a:	f7ff ff02 	bl	8005962 <read_and_check>
 8005b5e:	1970      	adds	r0, r6, r5
 8005b60:	f105 0340 	add.w	r3, r5, #64	@ 0x40
 8005b64:	4499      	add	r9, r3
 8005b66:	4653      	mov	r3, sl
 8005b68:	464a      	mov	r2, r9
 8005b6a:	60b8      	str	r0, [r7, #8]
 8005b6c:	4601      	mov	r1, r0
 8005b6e:	4620      	mov	r0, r4
 8005b70:	f7ff fef7 	bl	8005962 <read_and_check>
 8005b74:	462b      	mov	r3, r5
 8005b76:	466a      	mov	r2, sp
 8005b78:	4641      	mov	r1, r8
 8005b7a:	4620      	mov	r0, r4
 8005b7c:	f7ff ff32 	bl	80059e4 <read_newer_and_check>
 8005b80:	4653      	mov	r3, sl
 8005b82:	68fa      	ldr	r2, [r7, #12]
 8005b84:	6939      	ldr	r1, [r7, #16]
 8005b86:	4620      	mov	r0, r4
 8005b88:	f7ff ff2c 	bl	80059e4 <read_newer_and_check>
 8005b8c:	462b      	mov	r3, r5
 8005b8e:	465a      	mov	r2, fp
 8005b90:	4631      	mov	r1, r6
 8005b92:	4620      	mov	r0, r4
 8005b94:	f7ff ff26 	bl	80059e4 <read_newer_and_check>
 8005b98:	4653      	mov	r3, sl
 8005b9a:	464a      	mov	r2, r9
 8005b9c:	68b9      	ldr	r1, [r7, #8]
 8005b9e:	4620      	mov	r0, r4
 8005ba0:	f7ff ff20 	bl	80059e4 <read_newer_and_check>
 8005ba4:	f8d7 d004 	ldr.w	sp, [r7, #4]
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	3301      	adds	r3, #1
 8005bac:	617b      	str	r3, [r7, #20]
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	f67f af5b 	bls.w	8005a6c <transaction_basic_test+0x10>
 8005bb6:	3724      	adds	r7, #36	@ 0x24
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bbe:	bf00      	nop
 8005bc0:	08200000 	.word	0x08200000
 8005bc4:	20000010 	.word	0x20000010
 8005bc8:	200003d4 	.word	0x200003d4
 8005bcc:	20000000 	.word	0x20000000
 8005bd0:	200003d0 	.word	0x200003d0
 8005bd4:	200003c8 	.word	0x200003c8

08005bd8 <transaction_abort_test>:
 8005bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bdc:	b0c3      	sub	sp, #268	@ 0x10c
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	1d3e      	adds	r6, r7, #4
 8005be2:	f04f 0980 	mov.w	r9, #128	@ 0x80
 8005be6:	464a      	mov	r2, r9
 8005be8:	2100      	movs	r1, #0
 8005bea:	4630      	mov	r0, r6
 8005bec:	f001 f9f4 	bl	8006fd8 <memset>
 8005bf0:	4d2b      	ldr	r5, [pc, #172]	@ (8005ca0 <transaction_abort_test+0xc8>)
 8005bf2:	4c2c      	ldr	r4, [pc, #176]	@ (8005ca4 <transaction_abort_test+0xcc>)
 8005bf4:	464b      	mov	r3, r9
 8005bf6:	4632      	mov	r2, r6
 8005bf8:	4629      	mov	r1, r5
 8005bfa:	4620      	mov	r0, r4
 8005bfc:	f7ff ff10 	bl	8005a20 <test_write>
 8005c00:	6923      	ldr	r3, [r4, #16]
 8005c02:	6822      	ldr	r2, [r4, #0]
 8005c04:	6892      	ldr	r2, [r2, #8]
 8005c06:	4413      	add	r3, r2
 8005c08:	3b01      	subs	r3, #1
 8005c0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c0e:	3307      	adds	r3, #7
 8005c10:	08db      	lsrs	r3, r3, #3
 8005c12:	3307      	adds	r3, #7
 8005c14:	f023 0307 	bic.w	r3, r3, #7
 8005c18:	ebad 0d03 	sub.w	sp, sp, r3
 8005c1c:	4b22      	ldr	r3, [pc, #136]	@ (8005ca8 <transaction_abort_test+0xd0>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4669      	mov	r1, sp
 8005c22:	4620      	mov	r0, r4
 8005c24:	4798      	blx	r3
 8005c26:	2300      	movs	r3, #0
 8005c28:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
 8005c2c:	f107 0a84 	add.w	sl, r7, #132	@ 0x84
 8005c30:	464a      	mov	r2, r9
 8005c32:	4651      	mov	r1, sl
 8005c34:	f207 1007 	addw	r0, r7, #263	@ 0x107
 8005c38:	f7ff fde5 	bl	8005806 <prng_fill>
 8005c3c:	4b1b      	ldr	r3, [pc, #108]	@ (8005cac <transaction_abort_test+0xd4>)
 8005c3e:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8005c42:	f8df b06c 	ldr.w	fp, [pc, #108]	@ 8005cb0 <transaction_abort_test+0xd8>
 8005c46:	4643      	mov	r3, r8
 8005c48:	4652      	mov	r2, sl
 8005c4a:	4629      	mov	r1, r5
 8005c4c:	4620      	mov	r0, r4
 8005c4e:	f8db c000 	ldr.w	ip, [fp]
 8005c52:	47e0      	blx	ip
 8005c54:	f8db b000 	ldr.w	fp, [fp]
 8005c58:	4643      	mov	r3, r8
 8005c5a:	eb0a 0208 	add.w	r2, sl, r8
 8005c5e:	f105 0140 	add.w	r1, r5, #64	@ 0x40
 8005c62:	4620      	mov	r0, r4
 8005c64:	47d8      	blx	fp
 8005c66:	4643      	mov	r3, r8
 8005c68:	4632      	mov	r2, r6
 8005c6a:	4629      	mov	r1, r5
 8005c6c:	4620      	mov	r0, r4
 8005c6e:	f7ff fe78 	bl	8005962 <read_and_check>
 8005c72:	4643      	mov	r3, r8
 8005c74:	4632      	mov	r2, r6
 8005c76:	f105 0140 	add.w	r1, r5, #64	@ 0x40
 8005c7a:	4620      	mov	r0, r4
 8005c7c:	f7ff fe71 	bl	8005962 <read_and_check>
 8005c80:	4b0c      	ldr	r3, [pc, #48]	@ (8005cb4 <transaction_abort_test+0xdc>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4620      	mov	r0, r4
 8005c86:	4798      	blx	r3
 8005c88:	464b      	mov	r3, r9
 8005c8a:	4632      	mov	r2, r6
 8005c8c:	4629      	mov	r1, r5
 8005c8e:	4620      	mov	r0, r4
 8005c90:	f7ff fe67 	bl	8005962 <read_and_check>
 8005c94:	f507 7786 	add.w	r7, r7, #268	@ 0x10c
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c9e:	bf00      	nop
 8005ca0:	08200000 	.word	0x08200000
 8005ca4:	20000010 	.word	0x20000010
 8005ca8:	200003d4 	.word	0x200003d4
 8005cac:	20000000 	.word	0x20000000
 8005cb0:	200003d0 	.word	0x200003d0
 8005cb4:	200003c4 	.word	0x200003c4

08005cb8 <test_write2>:
 8005cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	4605      	mov	r5, r0
 8005cc0:	460e      	mov	r6, r1
 8005cc2:	4690      	mov	r8, r2
 8005cc4:	461c      	mov	r4, r3
 8005cc6:	f8d7 9020 	ldr.w	r9, [r7, #32]
 8005cca:	46ea      	mov	sl, sp
 8005ccc:	3307      	adds	r3, #7
 8005cce:	f023 0307 	bic.w	r3, r3, #7
 8005cd2:	ebad 0d03 	sub.w	sp, sp, r3
 8005cd6:	4622      	mov	r2, r4
 8005cd8:	4641      	mov	r1, r8
 8005cda:	4668      	mov	r0, sp
 8005cdc:	f001 f87a 	bl	8006dd4 <lftl_memread>
 8005ce0:	4622      	mov	r2, r4
 8005ce2:	4649      	mov	r1, r9
 8005ce4:	4668      	mov	r0, sp
 8005ce6:	f001 f967 	bl	8006fb8 <memcmp>
 8005cea:	b9d0      	cbnz	r0, 8005d22 <test_write2+0x6a>
 8005cec:	46d5      	mov	sp, sl
 8005cee:	4b0e      	ldr	r3, [pc, #56]	@ (8005d28 <test_write2+0x70>)
 8005cf0:	f8d3 a000 	ldr.w	sl, [r3]
 8005cf4:	4623      	mov	r3, r4
 8005cf6:	4642      	mov	r2, r8
 8005cf8:	4631      	mov	r1, r6
 8005cfa:	4628      	mov	r0, r5
 8005cfc:	47d0      	blx	sl
 8005cfe:	4623      	mov	r3, r4
 8005d00:	464a      	mov	r2, r9
 8005d02:	4631      	mov	r1, r6
 8005d04:	4628      	mov	r0, r5
 8005d06:	f7ff fe2c 	bl	8005962 <read_and_check>
 8005d0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005d0e:	60eb      	str	r3, [r5, #12]
 8005d10:	4623      	mov	r3, r4
 8005d12:	464a      	mov	r2, r9
 8005d14:	4631      	mov	r1, r6
 8005d16:	4628      	mov	r0, r5
 8005d18:	f7ff fe23 	bl	8005962 <read_and_check>
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d22:	200a      	movs	r0, #10
 8005d24:	f7ff fdc4 	bl	80058b0 <throw_exception>
 8005d28:	200003d8 	.word	0x200003d8

08005d2c <randomized_test_write>:
 8005d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	4605      	mov	r5, r0
 8005d32:	460e      	mov	r6, r1
 8005d34:	4614      	mov	r4, r2
 8005d36:	1dd3      	adds	r3, r2, #7
 8005d38:	f023 0307 	bic.w	r3, r3, #7
 8005d3c:	ebad 0d03 	sub.w	sp, sp, r3
 8005d40:	4611      	mov	r1, r2
 8005d42:	4668      	mov	r0, sp
 8005d44:	f7ff fd76 	bl	8005834 <stateful_prng_fill>
 8005d48:	4623      	mov	r3, r4
 8005d4a:	466a      	mov	r2, sp
 8005d4c:	4631      	mov	r1, r6
 8005d4e:	4628      	mov	r0, r5
 8005d50:	f7ff fe66 	bl	8005a20 <test_write>
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005d58 <basic_test>:
 8005d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d5a:	4c15      	ldr	r4, [pc, #84]	@ (8005db0 <basic_test+0x58>)
 8005d5c:	4d15      	ldr	r5, [pc, #84]	@ (8005db4 <basic_test+0x5c>)
 8005d5e:	2210      	movs	r2, #16
 8005d60:	4621      	mov	r1, r4
 8005d62:	4628      	mov	r0, r5
 8005d64:	f7ff ffe2 	bl	8005d2c <randomized_test_write>
 8005d68:	2240      	movs	r2, #64	@ 0x40
 8005d6a:	4621      	mov	r1, r4
 8005d6c:	4628      	mov	r0, r5
 8005d6e:	f7ff ffdd 	bl	8005d2c <randomized_test_write>
 8005d72:	2240      	movs	r2, #64	@ 0x40
 8005d74:	18a1      	adds	r1, r4, r2
 8005d76:	4628      	mov	r0, r5
 8005d78:	f7ff ffd8 	bl	8005d2c <randomized_test_write>
 8005d7c:	f504 4780 	add.w	r7, r4, #16384	@ 0x4000
 8005d80:	4e0d      	ldr	r6, [pc, #52]	@ (8005db8 <basic_test+0x60>)
 8005d82:	2240      	movs	r2, #64	@ 0x40
 8005d84:	4639      	mov	r1, r7
 8005d86:	4630      	mov	r0, r6
 8005d88:	f7ff ffd0 	bl	8005d2c <randomized_test_write>
 8005d8c:	2240      	movs	r2, #64	@ 0x40
 8005d8e:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8005d92:	4630      	mov	r0, r6
 8005d94:	f7ff ffca 	bl	8005d2c <randomized_test_write>
 8005d98:	2280      	movs	r2, #128	@ 0x80
 8005d9a:	4621      	mov	r1, r4
 8005d9c:	4628      	mov	r0, r5
 8005d9e:	f7ff ffc5 	bl	8005d2c <randomized_test_write>
 8005da2:	2280      	movs	r2, #128	@ 0x80
 8005da4:	4639      	mov	r1, r7
 8005da6:	4630      	mov	r0, r6
 8005da8:	f7ff ffc0 	bl	8005d2c <randomized_test_write>
 8005dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005dae:	bf00      	nop
 8005db0:	08200000 	.word	0x08200000
 8005db4:	20000010 	.word	0x20000010
 8005db8:	2000003c 	.word	0x2000003c

08005dbc <write_size_test>:
 8005dbc:	b538      	push	{r3, r4, r5, lr}
 8005dbe:	4b0e      	ldr	r3, [pc, #56]	@ (8005df8 <write_size_test+0x3c>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	689d      	ldr	r5, [r3, #8]
 8005dc4:	462c      	mov	r4, r5
 8005dc6:	e005      	b.n	8005dd4 <write_size_test+0x18>
 8005dc8:	4622      	mov	r2, r4
 8005dca:	490c      	ldr	r1, [pc, #48]	@ (8005dfc <write_size_test+0x40>)
 8005dcc:	480a      	ldr	r0, [pc, #40]	@ (8005df8 <write_size_test+0x3c>)
 8005dce:	f7ff ffad 	bl	8005d2c <randomized_test_write>
 8005dd2:	442c      	add	r4, r5
 8005dd4:	2c7f      	cmp	r4, #127	@ 0x7f
 8005dd6:	d9f7      	bls.n	8005dc8 <write_size_test+0xc>
 8005dd8:	2400      	movs	r4, #0
 8005dda:	e007      	b.n	8005dec <write_size_test+0x30>
 8005ddc:	f1c4 0280 	rsb	r2, r4, #128	@ 0x80
 8005de0:	4906      	ldr	r1, [pc, #24]	@ (8005dfc <write_size_test+0x40>)
 8005de2:	4421      	add	r1, r4
 8005de4:	4804      	ldr	r0, [pc, #16]	@ (8005df8 <write_size_test+0x3c>)
 8005de6:	f7ff ffa1 	bl	8005d2c <randomized_test_write>
 8005dea:	442c      	add	r4, r5
 8005dec:	f1c5 0380 	rsb	r3, r5, #128	@ 0x80
 8005df0:	42a3      	cmp	r3, r4
 8005df2:	d8f3      	bhi.n	8005ddc <write_size_test+0x20>
 8005df4:	bd38      	pop	{r3, r4, r5, pc}
 8005df6:	bf00      	nop
 8005df8:	2000003c 	.word	0x2000003c
 8005dfc:	08204000 	.word	0x08204000

08005e00 <write_offset_test>:
 8005e00:	b538      	push	{r3, r4, r5, lr}
 8005e02:	4b08      	ldr	r3, [pc, #32]	@ (8005e24 <write_offset_test+0x24>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	689d      	ldr	r5, [r3, #8]
 8005e08:	2400      	movs	r4, #0
 8005e0a:	e006      	b.n	8005e1a <write_offset_test+0x1a>
 8005e0c:	462a      	mov	r2, r5
 8005e0e:	4906      	ldr	r1, [pc, #24]	@ (8005e28 <write_offset_test+0x28>)
 8005e10:	4421      	add	r1, r4
 8005e12:	4804      	ldr	r0, [pc, #16]	@ (8005e24 <write_offset_test+0x24>)
 8005e14:	f7ff ff8a 	bl	8005d2c <randomized_test_write>
 8005e18:	442c      	add	r4, r5
 8005e1a:	f1c5 0380 	rsb	r3, r5, #128	@ 0x80
 8005e1e:	42a3      	cmp	r3, r4
 8005e20:	d8f4      	bhi.n	8005e0c <write_offset_test+0xc>
 8005e22:	bd38      	pop	{r3, r4, r5, pc}
 8005e24:	2000003c 	.word	0x2000003c
 8005e28:	08204000 	.word	0x08204000

08005e2c <write_nvm_to_nvm_test_core>:
 8005e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e30:	b092      	sub	sp, #72	@ 0x48
 8005e32:	281f      	cmp	r0, #31
 8005e34:	f200 8088 	bhi.w	8005f48 <write_nvm_to_nvm_test_core+0x11c>
 8005e38:	4606      	mov	r6, r0
 8005e3a:	460d      	mov	r5, r1
 8005e3c:	4614      	mov	r4, r2
 8005e3e:	2a20      	cmp	r2, #32
 8005e40:	f200 8085 	bhi.w	8005f4e <write_nvm_to_nvm_test_core+0x122>
 8005e44:	4611      	mov	r1, r2
 8005e46:	4628      	mov	r0, r5
 8005e48:	f7ff fcf4 	bl	8005834 <stateful_prng_fill>
 8005e4c:	4f4b      	ldr	r7, [pc, #300]	@ (8005f7c <write_nvm_to_nvm_test_core+0x150>)
 8005e4e:	4b4c      	ldr	r3, [pc, #304]	@ (8005f80 <write_nvm_to_nvm_test_core+0x154>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	2101      	movs	r1, #1
 8005e54:	4638      	mov	r0, r7
 8005e56:	4798      	blx	r3
 8005e58:	f10d 0808 	add.w	r8, sp, #8
 8005e5c:	f04f 0940 	mov.w	r9, #64	@ 0x40
 8005e60:	464a      	mov	r2, r9
 8005e62:	2100      	movs	r1, #0
 8005e64:	4640      	mov	r0, r8
 8005e66:	f001 f8b7 	bl	8006fd8 <memset>
 8005e6a:	4622      	mov	r2, r4
 8005e6c:	4629      	mov	r1, r5
 8005e6e:	4640      	mov	r0, r8
 8005e70:	f001 f8e4 	bl	800703c <memcpy>
 8005e74:	4b43      	ldr	r3, [pc, #268]	@ (8005f84 <write_nvm_to_nvm_test_core+0x158>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	464a      	mov	r2, r9
 8005e7a:	4641      	mov	r1, r8
 8005e7c:	4638      	mov	r0, r7
 8005e7e:	4798      	blx	r3
 8005e80:	f5a7 4380 	sub.w	r3, r7, #16384	@ 0x4000
 8005e84:	441e      	add	r6, r3
 8005e86:	9500      	str	r5, [sp, #0]
 8005e88:	4623      	mov	r3, r4
 8005e8a:	463a      	mov	r2, r7
 8005e8c:	4631      	mov	r1, r6
 8005e8e:	483e      	ldr	r0, [pc, #248]	@ (8005f88 <write_nvm_to_nvm_test_core+0x15c>)
 8005e90:	f7ff ff12 	bl	8005cb8 <test_write2>
 8005e94:	f005 0701 	and.w	r7, r5, #1
 8005e98:	f087 0201 	eor.w	r2, r7, #1
 8005e9c:	f006 0301 	and.w	r3, r6, #1
 8005ea0:	f083 0801 	eor.w	r8, r3, #1
 8005ea4:	421a      	tst	r2, r3
 8005ea6:	d155      	bne.n	8005f54 <write_nvm_to_nvm_test_core+0x128>
 8005ea8:	ea18 0f07 	tst.w	r8, r7
 8005eac:	d15c      	bne.n	8005f68 <write_nvm_to_nvm_test_core+0x13c>
 8005eae:	f8df a0dc 	ldr.w	sl, [pc, #220]	@ 8005f8c <write_nvm_to_nvm_test_core+0x160>
 8005eb2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005f88 <write_nvm_to_nvm_test_core+0x15c>
 8005eb6:	9500      	str	r5, [sp, #0]
 8005eb8:	4623      	mov	r3, r4
 8005eba:	4632      	mov	r2, r6
 8005ebc:	4651      	mov	r1, sl
 8005ebe:	4640      	mov	r0, r8
 8005ec0:	f7ff fefa 	bl	8005cb8 <test_write2>
 8005ec4:	4f32      	ldr	r7, [pc, #200]	@ (8005f90 <write_nvm_to_nvm_test_core+0x164>)
 8005ec6:	f8df 90cc 	ldr.w	r9, [pc, #204]	@ 8005f94 <write_nvm_to_nvm_test_core+0x168>
 8005eca:	9500      	str	r5, [sp, #0]
 8005ecc:	4623      	mov	r3, r4
 8005ece:	4632      	mov	r2, r6
 8005ed0:	4639      	mov	r1, r7
 8005ed2:	4648      	mov	r0, r9
 8005ed4:	f7ff fef0 	bl	8005cb8 <test_write2>
 8005ed8:	4623      	mov	r3, r4
 8005eda:	462a      	mov	r2, r5
 8005edc:	4651      	mov	r1, sl
 8005ede:	4640      	mov	r0, r8
 8005ee0:	f7ff fd9e 	bl	8005a20 <test_write>
 8005ee4:	9500      	str	r5, [sp, #0]
 8005ee6:	4623      	mov	r3, r4
 8005ee8:	4632      	mov	r2, r6
 8005eea:	4639      	mov	r1, r7
 8005eec:	4648      	mov	r0, r9
 8005eee:	f7ff fee3 	bl	8005cb8 <test_write2>
 8005ef2:	f1c4 0680 	rsb	r6, r4, #128	@ 0x80
 8005ef6:	f507 4a80 	add.w	sl, r7, #16384	@ 0x4000
 8005efa:	4456      	add	r6, sl
 8005efc:	9500      	str	r5, [sp, #0]
 8005efe:	4623      	mov	r3, r4
 8005f00:	f507 4200 	add.w	r2, r7, #32768	@ 0x8000
 8005f04:	4631      	mov	r1, r6
 8005f06:	4640      	mov	r0, r8
 8005f08:	f7ff fed6 	bl	8005cb8 <test_write2>
 8005f0c:	9500      	str	r5, [sp, #0]
 8005f0e:	4623      	mov	r3, r4
 8005f10:	4632      	mov	r2, r6
 8005f12:	4651      	mov	r1, sl
 8005f14:	4640      	mov	r0, r8
 8005f16:	f7ff fecf 	bl	8005cb8 <test_write2>
 8005f1a:	9500      	str	r5, [sp, #0]
 8005f1c:	4623      	mov	r3, r4
 8005f1e:	4632      	mov	r2, r6
 8005f20:	4639      	mov	r1, r7
 8005f22:	4648      	mov	r0, r9
 8005f24:	f7ff fec8 	bl	8005cb8 <test_write2>
 8005f28:	4623      	mov	r3, r4
 8005f2a:	462a      	mov	r2, r5
 8005f2c:	4651      	mov	r1, sl
 8005f2e:	4640      	mov	r0, r8
 8005f30:	f7ff fd76 	bl	8005a20 <test_write>
 8005f34:	9500      	str	r5, [sp, #0]
 8005f36:	4623      	mov	r3, r4
 8005f38:	4632      	mov	r2, r6
 8005f3a:	4639      	mov	r1, r7
 8005f3c:	4648      	mov	r0, r9
 8005f3e:	f7ff febb 	bl	8005cb8 <test_write2>
 8005f42:	b012      	add	sp, #72	@ 0x48
 8005f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f48:	2005      	movs	r0, #5
 8005f4a:	f7ff fcb1 	bl	80058b0 <throw_exception>
 8005f4e:	2005      	movs	r0, #5
 8005f50:	f7ff fcae 	bl	80058b0 <throw_exception>
 8005f54:	4a09      	ldr	r2, [pc, #36]	@ (8005f7c <write_nvm_to_nvm_test_core+0x150>)
 8005f56:	f5a2 4680 	sub.w	r6, r2, #16384	@ 0x4000
 8005f5a:	9500      	str	r5, [sp, #0]
 8005f5c:	4623      	mov	r3, r4
 8005f5e:	4631      	mov	r1, r6
 8005f60:	4809      	ldr	r0, [pc, #36]	@ (8005f88 <write_nvm_to_nvm_test_core+0x15c>)
 8005f62:	f7ff fea9 	bl	8005cb8 <test_write2>
 8005f66:	e79f      	b.n	8005ea8 <write_nvm_to_nvm_test_core+0x7c>
 8005f68:	4e0b      	ldr	r6, [pc, #44]	@ (8005f98 <write_nvm_to_nvm_test_core+0x16c>)
 8005f6a:	9500      	str	r5, [sp, #0]
 8005f6c:	4623      	mov	r3, r4
 8005f6e:	4a03      	ldr	r2, [pc, #12]	@ (8005f7c <write_nvm_to_nvm_test_core+0x150>)
 8005f70:	4631      	mov	r1, r6
 8005f72:	4805      	ldr	r0, [pc, #20]	@ (8005f88 <write_nvm_to_nvm_test_core+0x15c>)
 8005f74:	f7ff fea0 	bl	8005cb8 <test_write2>
 8005f78:	e799      	b.n	8005eae <write_nvm_to_nvm_test_core+0x82>
 8005f7a:	bf00      	nop
 8005f7c:	08208000 	.word	0x08208000
 8005f80:	200003e0 	.word	0x200003e0
 8005f84:	200003e4 	.word	0x200003e4
 8005f88:	2000003c 	.word	0x2000003c
 8005f8c:	08204040 	.word	0x08204040
 8005f90:	08200000 	.word	0x08200000
 8005f94:	20000010 	.word	0x20000010
 8005f98:	08204001 	.word	0x08204001

08005f9c <write_nvm_to_nvm_vs_size>:
 8005f9c:	b530      	push	{r4, r5, lr}
 8005f9e:	b091      	sub	sp, #68	@ 0x44
 8005fa0:	2840      	cmp	r0, #64	@ 0x40
 8005fa2:	d82e      	bhi.n	8006002 <write_nvm_to_nvm_vs_size+0x66>
 8005fa4:	4604      	mov	r4, r0
 8005fa6:	283f      	cmp	r0, #63	@ 0x3f
 8005fa8:	d82e      	bhi.n	8006008 <write_nvm_to_nvm_vs_size+0x6c>
 8005faa:	4602      	mov	r2, r0
 8005fac:	4669      	mov	r1, sp
 8005fae:	2000      	movs	r0, #0
 8005fb0:	f7ff ff3c 	bl	8005e2c <write_nvm_to_nvm_test_core>
 8005fb4:	4622      	mov	r2, r4
 8005fb6:	4669      	mov	r1, sp
 8005fb8:	2001      	movs	r0, #1
 8005fba:	f7ff ff37 	bl	8005e2c <write_nvm_to_nvm_test_core>
 8005fbe:	4622      	mov	r2, r4
 8005fc0:	4669      	mov	r1, sp
 8005fc2:	2010      	movs	r0, #16
 8005fc4:	f7ff ff32 	bl	8005e2c <write_nvm_to_nvm_test_core>
 8005fc8:	4622      	mov	r2, r4
 8005fca:	4669      	mov	r1, sp
 8005fcc:	2011      	movs	r0, #17
 8005fce:	f7ff ff2d 	bl	8005e2c <write_nvm_to_nvm_test_core>
 8005fd2:	f10d 0501 	add.w	r5, sp, #1
 8005fd6:	4622      	mov	r2, r4
 8005fd8:	4629      	mov	r1, r5
 8005fda:	2000      	movs	r0, #0
 8005fdc:	f7ff ff26 	bl	8005e2c <write_nvm_to_nvm_test_core>
 8005fe0:	4622      	mov	r2, r4
 8005fe2:	4629      	mov	r1, r5
 8005fe4:	2001      	movs	r0, #1
 8005fe6:	f7ff ff21 	bl	8005e2c <write_nvm_to_nvm_test_core>
 8005fea:	4622      	mov	r2, r4
 8005fec:	4629      	mov	r1, r5
 8005fee:	2010      	movs	r0, #16
 8005ff0:	f7ff ff1c 	bl	8005e2c <write_nvm_to_nvm_test_core>
 8005ff4:	4622      	mov	r2, r4
 8005ff6:	4629      	mov	r1, r5
 8005ff8:	2011      	movs	r0, #17
 8005ffa:	f7ff ff17 	bl	8005e2c <write_nvm_to_nvm_test_core>
 8005ffe:	b011      	add	sp, #68	@ 0x44
 8006000:	bd30      	pop	{r4, r5, pc}
 8006002:	2005      	movs	r0, #5
 8006004:	f7ff fc54 	bl	80058b0 <throw_exception>
 8006008:	2005      	movs	r0, #5
 800600a:	f7ff fc51 	bl	80058b0 <throw_exception>

0800600e <write_nvm_to_nvm_vs_size_1>:
 800600e:	b508      	push	{r3, lr}
 8006010:	2001      	movs	r0, #1
 8006012:	f7ff ffc3 	bl	8005f9c <write_nvm_to_nvm_vs_size>
 8006016:	bd08      	pop	{r3, pc}

08006018 <write_nvm_to_nvm_vs_size_1wu>:
 8006018:	b508      	push	{r3, lr}
 800601a:	2010      	movs	r0, #16
 800601c:	f7ff ffbe 	bl	8005f9c <write_nvm_to_nvm_vs_size>
 8006020:	bd08      	pop	{r3, pc}

08006022 <write_nvm_to_nvm_vs_size_2wu>:
 8006022:	b508      	push	{r3, lr}
 8006024:	2020      	movs	r0, #32
 8006026:	f7ff ffb9 	bl	8005f9c <write_nvm_to_nvm_vs_size>
 800602a:	bd08      	pop	{r3, pc}

0800602c <write_nvm_to_nvm_vs_size_1wu1>:
 800602c:	b508      	push	{r3, lr}
 800602e:	2011      	movs	r0, #17
 8006030:	f7ff ffb4 	bl	8005f9c <write_nvm_to_nvm_vs_size>
 8006034:	bd08      	pop	{r3, pc}

08006036 <exception_handler>:
 8006036:	b508      	push	{r3, lr}
 8006038:	f7ff fc7a 	bl	8005930 <ui_wait_button>
 800603c:	bd08      	pop	{r3, pc}
	...

08006040 <test_and_simulate_tearing>:
 8006040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006042:	b083      	sub	sp, #12
 8006044:	9001      	str	r0, [sp, #4]
 8006046:	2001      	movs	r0, #1
 8006048:	f7fa fa24 	bl	8000494 <led1>
 800604c:	4815      	ldr	r0, [pc, #84]	@ (80060a4 <test_and_simulate_tearing+0x64>)
 800604e:	f7fa f8ff 	bl	8000250 <setjmp>
 8006052:	4604      	mov	r4, r0
 8006054:	b9e0      	cbnz	r0, 8006090 <test_and_simulate_tearing+0x50>
 8006056:	f000 fcbb 	bl	80069d0 <lftl_init_lib>
 800605a:	4f13      	ldr	r7, [pc, #76]	@ (80060a8 <test_and_simulate_tearing+0x68>)
 800605c:	4638      	mov	r0, r7
 800605e:	f000 fcc7 	bl	80069f0 <lftl_register_area>
 8006062:	4d12      	ldr	r5, [pc, #72]	@ (80060ac <test_and_simulate_tearing+0x6c>)
 8006064:	4628      	mov	r0, r5
 8006066:	f000 fcc3 	bl	80069f0 <lftl_register_area>
 800606a:	4e11      	ldr	r6, [pc, #68]	@ (80060b0 <test_and_simulate_tearing+0x70>)
 800606c:	6833      	ldr	r3, [r6, #0]
 800606e:	4638      	mov	r0, r7
 8006070:	4798      	blx	r3
 8006072:	6833      	ldr	r3, [r6, #0]
 8006074:	4628      	mov	r0, r5
 8006076:	4798      	blx	r3
 8006078:	9b01      	ldr	r3, [sp, #4]
 800607a:	4798      	blx	r3
 800607c:	2000      	movs	r0, #0
 800607e:	f7fa fa09 	bl	8000494 <led1>
 8006082:	4a0c      	ldr	r2, [pc, #48]	@ (80060b4 <test_and_simulate_tearing+0x74>)
 8006084:	6813      	ldr	r3, [r2, #0]
 8006086:	3301      	adds	r3, #1
 8006088:	6013      	str	r3, [r2, #0]
 800608a:	b924      	cbnz	r4, 8006096 <test_and_simulate_tearing+0x56>
 800608c:	b003      	add	sp, #12
 800608e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006090:	f7ff ffd1 	bl	8006036 <exception_handler>
 8006094:	e7f5      	b.n	8006082 <test_and_simulate_tearing+0x42>
 8006096:	f7ff fc4b 	bl	8005930 <ui_wait_button>
 800609a:	2000      	movs	r0, #0
 800609c:	f7fa f9fa 	bl	8000494 <led1>
 80060a0:	e7fe      	b.n	80060a0 <test_and_simulate_tearing+0x60>
 80060a2:	bf00      	nop
 80060a4:	200003f0 	.word	0x200003f0
 80060a8:	20000010 	.word	0x20000010
 80060ac:	2000003c 	.word	0x2000003c
 80060b0:	200003e8 	.word	0x200003e8
 80060b4:	200003bc 	.word	0x200003bc

080060b8 <write_nvm_to_nvm_seq>:
 80060b8:	b508      	push	{r3, lr}
 80060ba:	4806      	ldr	r0, [pc, #24]	@ (80060d4 <write_nvm_to_nvm_seq+0x1c>)
 80060bc:	f7ff ffc0 	bl	8006040 <test_and_simulate_tearing>
 80060c0:	4805      	ldr	r0, [pc, #20]	@ (80060d8 <write_nvm_to_nvm_seq+0x20>)
 80060c2:	f7ff ffbd 	bl	8006040 <test_and_simulate_tearing>
 80060c6:	4805      	ldr	r0, [pc, #20]	@ (80060dc <write_nvm_to_nvm_seq+0x24>)
 80060c8:	f7ff ffba 	bl	8006040 <test_and_simulate_tearing>
 80060cc:	4804      	ldr	r0, [pc, #16]	@ (80060e0 <write_nvm_to_nvm_seq+0x28>)
 80060ce:	f7ff ffb7 	bl	8006040 <test_and_simulate_tearing>
 80060d2:	bd08      	pop	{r3, pc}
 80060d4:	0800600f 	.word	0x0800600f
 80060d8:	08006019 	.word	0x08006019
 80060dc:	08006023 	.word	0x08006023
 80060e0:	0800602d 	.word	0x0800602d

080060e4 <transaction_nvm_to_nvm_seq>:
 80060e4:	b538      	push	{r3, r4, r5, lr}
 80060e6:	4c04      	ldr	r4, [pc, #16]	@ (80060f8 <transaction_nvm_to_nvm_seq+0x14>)
 80060e8:	6825      	ldr	r5, [r4, #0]
 80060ea:	4b04      	ldr	r3, [pc, #16]	@ (80060fc <transaction_nvm_to_nvm_seq+0x18>)
 80060ec:	6023      	str	r3, [r4, #0]
 80060ee:	f7ff ffe3 	bl	80060b8 <write_nvm_to_nvm_seq>
 80060f2:	6025      	str	r5, [r4, #0]
 80060f4:	bd38      	pop	{r3, r4, r5, pc}
 80060f6:	bf00      	nop
 80060f8:	200003d8 	.word	0x200003d8
 80060fc:	08005849 	.word	0x08005849

08006100 <test_main>:
 8006100:	b508      	push	{r3, lr}
 8006102:	4b1e      	ldr	r3, [pc, #120]	@ (800617c <test_main+0x7c>)
 8006104:	4a1e      	ldr	r2, [pc, #120]	@ (8006180 <test_main+0x80>)
 8006106:	601a      	str	r2, [r3, #0]
 8006108:	4b1e      	ldr	r3, [pc, #120]	@ (8006184 <test_main+0x84>)
 800610a:	4a1f      	ldr	r2, [pc, #124]	@ (8006188 <test_main+0x88>)
 800610c:	601a      	str	r2, [r3, #0]
 800610e:	4b1f      	ldr	r3, [pc, #124]	@ (800618c <test_main+0x8c>)
 8006110:	4a1f      	ldr	r2, [pc, #124]	@ (8006190 <test_main+0x90>)
 8006112:	601a      	str	r2, [r3, #0]
 8006114:	4b1f      	ldr	r3, [pc, #124]	@ (8006194 <test_main+0x94>)
 8006116:	4a20      	ldr	r2, [pc, #128]	@ (8006198 <test_main+0x98>)
 8006118:	601a      	str	r2, [r3, #0]
 800611a:	4b20      	ldr	r3, [pc, #128]	@ (800619c <test_main+0x9c>)
 800611c:	4a20      	ldr	r2, [pc, #128]	@ (80061a0 <test_main+0xa0>)
 800611e:	601a      	str	r2, [r3, #0]
 8006120:	4b20      	ldr	r3, [pc, #128]	@ (80061a4 <test_main+0xa4>)
 8006122:	4a21      	ldr	r2, [pc, #132]	@ (80061a8 <test_main+0xa8>)
 8006124:	601a      	str	r2, [r3, #0]
 8006126:	4b21      	ldr	r3, [pc, #132]	@ (80061ac <test_main+0xac>)
 8006128:	4a21      	ldr	r2, [pc, #132]	@ (80061b0 <test_main+0xb0>)
 800612a:	601a      	str	r2, [r3, #0]
 800612c:	4b21      	ldr	r3, [pc, #132]	@ (80061b4 <test_main+0xb4>)
 800612e:	4a22      	ldr	r2, [pc, #136]	@ (80061b8 <test_main+0xb8>)
 8006130:	601a      	str	r2, [r3, #0]
 8006132:	4b22      	ldr	r3, [pc, #136]	@ (80061bc <test_main+0xbc>)
 8006134:	4a22      	ldr	r2, [pc, #136]	@ (80061c0 <test_main+0xc0>)
 8006136:	601a      	str	r2, [r3, #0]
 8006138:	4b22      	ldr	r3, [pc, #136]	@ (80061c4 <test_main+0xc4>)
 800613a:	4a23      	ldr	r2, [pc, #140]	@ (80061c8 <test_main+0xc8>)
 800613c:	601a      	str	r2, [r3, #0]
 800613e:	2001      	movs	r0, #1
 8006140:	f7fa f9a8 	bl	8000494 <led1>
 8006144:	4821      	ldr	r0, [pc, #132]	@ (80061cc <test_main+0xcc>)
 8006146:	f7ff ff7b 	bl	8006040 <test_and_simulate_tearing>
 800614a:	4821      	ldr	r0, [pc, #132]	@ (80061d0 <test_main+0xd0>)
 800614c:	f7ff ff78 	bl	8006040 <test_and_simulate_tearing>
 8006150:	4820      	ldr	r0, [pc, #128]	@ (80061d4 <test_main+0xd4>)
 8006152:	f7ff ff75 	bl	8006040 <test_and_simulate_tearing>
 8006156:	4820      	ldr	r0, [pc, #128]	@ (80061d8 <test_main+0xd8>)
 8006158:	f7ff ff72 	bl	8006040 <test_and_simulate_tearing>
 800615c:	481f      	ldr	r0, [pc, #124]	@ (80061dc <test_main+0xdc>)
 800615e:	f7ff ff6f 	bl	8006040 <test_and_simulate_tearing>
 8006162:	481f      	ldr	r0, [pc, #124]	@ (80061e0 <test_main+0xe0>)
 8006164:	f7ff ff6c 	bl	8006040 <test_and_simulate_tearing>
 8006168:	f7ff ffa6 	bl	80060b8 <write_nvm_to_nvm_seq>
 800616c:	f7ff ffba 	bl	80060e4 <transaction_nvm_to_nvm_seq>
 8006170:	210c      	movs	r1, #12
 8006172:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8006176:	f7ff fba3 	bl	80058c0 <ui_led1_blink_ms>
 800617a:	e7f9      	b.n	8006170 <test_main+0x70>
 800617c:	200003e8 	.word	0x200003e8
 8006180:	08006a2d 	.word	0x08006a2d
 8006184:	200003e4 	.word	0x200003e4
 8006188:	08006f11 	.word	0x08006f11
 800618c:	200003e0 	.word	0x200003e0
 8006190:	08006e7d 	.word	0x08006e7d
 8006194:	200003dc 	.word	0x200003dc
 8006198:	08006a61 	.word	0x08006a61
 800619c:	200003d8 	.word	0x200003d8
 80061a0:	08006d95 	.word	0x08006d95
 80061a4:	200003d4 	.word	0x200003d4
 80061a8:	08006aab 	.word	0x08006aab
 80061ac:	200003d0 	.word	0x200003d0
 80061b0:	08006aeb 	.word	0x08006aeb
 80061b4:	200003cc 	.word	0x200003cc
 80061b8:	08006b6b 	.word	0x08006b6b
 80061bc:	200003c8 	.word	0x200003c8
 80061c0:	08006c15 	.word	0x08006c15
 80061c4:	200003c4 	.word	0x200003c4
 80061c8:	08006d03 	.word	0x08006d03
 80061cc:	08005d59 	.word	0x08005d59
 80061d0:	08005dbd 	.word	0x08005dbd
 80061d4:	08005e01 	.word	0x08005e01
 80061d8:	08005a5d 	.word	0x08005a5d
 80061dc:	08005bd9 	.word	0x08005bd9
 80061e0:	0800599d 	.word	0x0800599d

080061e4 <nvm_erase>:
 80061e4:	b15a      	cbz	r2, 80061fe <nvm_erase+0x1a>
 80061e6:	b510      	push	{r4, lr}
 80061e8:	4604      	mov	r4, r0
 80061ea:	4608      	mov	r0, r1
 80061ec:	4611      	mov	r1, r2
 80061ee:	6963      	ldr	r3, [r4, #20]
 80061f0:	4798      	blx	r3
 80061f2:	b118      	cbz	r0, 80061fc <nvm_erase+0x18>
 80061f4:	6a22      	ldr	r2, [r4, #32]
 80061f6:	f440 7080 	orr.w	r0, r0, #256	@ 0x100
 80061fa:	4790      	blx	r2
 80061fc:	bd10      	pop	{r4, pc}
 80061fe:	4770      	bx	lr

08006200 <nvm_write>:
 8006200:	b163      	cbz	r3, 800621c <nvm_write+0x1c>
 8006202:	b510      	push	{r4, lr}
 8006204:	4604      	mov	r4, r0
 8006206:	4608      	mov	r0, r1
 8006208:	4611      	mov	r1, r2
 800620a:	461a      	mov	r2, r3
 800620c:	69a3      	ldr	r3, [r4, #24]
 800620e:	4798      	blx	r3
 8006210:	b118      	cbz	r0, 800621a <nvm_write+0x1a>
 8006212:	6a22      	ldr	r2, [r4, #32]
 8006214:	f440 7000 	orr.w	r0, r0, #512	@ 0x200
 8006218:	4790      	blx	r2
 800621a:	bd10      	pop	{r4, pc}
 800621c:	4770      	bx	lr

0800621e <nvm_read>:
 800621e:	b163      	cbz	r3, 800623a <nvm_read+0x1c>
 8006220:	b510      	push	{r4, lr}
 8006222:	4604      	mov	r4, r0
 8006224:	4608      	mov	r0, r1
 8006226:	4611      	mov	r1, r2
 8006228:	461a      	mov	r2, r3
 800622a:	69e3      	ldr	r3, [r4, #28]
 800622c:	4798      	blx	r3
 800622e:	b118      	cbz	r0, 8006238 <nvm_read+0x1a>
 8006230:	6a22      	ldr	r2, [r4, #32]
 8006232:	f440 7040 	orr.w	r0, r0, #768	@ 0x300
 8006236:	4790      	blx	r2
 8006238:	bd10      	pop	{r4, pc}
 800623a:	4770      	bx	lr

0800623c <crc32c>:
 800623c:	b302      	cbz	r2, 8006280 <crc32c+0x44>
 800623e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006242:	4058      	eors	r0, r3
 8006244:	f04f 0c00 	mov.w	ip, #0
 8006248:	f1bc 0f07 	cmp.w	ip, #7
 800624c:	d816      	bhi.n	800627c <crc32c+0x40>
 800624e:	b500      	push	{lr}
 8006250:	f340 0e00 	sbfx	lr, r0, #0, #1
 8006254:	4b0b      	ldr	r3, [pc, #44]	@ (8006284 <crc32c+0x48>)
 8006256:	ea0e 0303 	and.w	r3, lr, r3
 800625a:	ea83 0050 	eor.w	r0, r3, r0, lsr #1
 800625e:	f10c 0c01 	add.w	ip, ip, #1
 8006262:	f1bc 0f07 	cmp.w	ip, #7
 8006266:	d9f3      	bls.n	8006250 <crc32c+0x14>
 8006268:	3a01      	subs	r2, #1
 800626a:	b12a      	cbz	r2, 8006278 <crc32c+0x3c>
 800626c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006270:	4058      	eors	r0, r3
 8006272:	f04f 0c00 	mov.w	ip, #0
 8006276:	e7f4      	b.n	8006262 <crc32c+0x26>
 8006278:	f85d fb04 	ldr.w	pc, [sp], #4
 800627c:	3a01      	subs	r2, #1
 800627e:	e7dd      	b.n	800623c <crc32c>
 8006280:	4770      	bx	lr
 8006282:	bf00      	nop
 8006284:	05ec76f1 	.word	0x05ec76f1

08006288 <is_in_range>:
 8006288:	4288      	cmp	r0, r1
 800628a:	d304      	bcc.n	8006296 <is_in_range+0xe>
 800628c:	4411      	add	r1, r2
 800628e:	4281      	cmp	r1, r0
 8006290:	d303      	bcc.n	800629a <is_in_range+0x12>
 8006292:	2001      	movs	r0, #1
 8006294:	4770      	bx	lr
 8006296:	2000      	movs	r0, #0
 8006298:	4770      	bx	lr
 800629a:	2000      	movs	r0, #0
 800629c:	4770      	bx	lr

0800629e <is_in_nvm>:
 800629e:	b508      	push	{r3, lr}
 80062a0:	4603      	mov	r3, r0
 80062a2:	4608      	mov	r0, r1
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	685a      	ldr	r2, [r3, #4]
 80062a8:	6819      	ldr	r1, [r3, #0]
 80062aa:	f7ff ffed 	bl	8006288 <is_in_range>
 80062ae:	bd08      	pop	{r3, pc}

080062b0 <page_size>:
 80062b0:	6803      	ldr	r3, [r0, #0]
 80062b2:	68d8      	ldr	r0, [r3, #12]
 80062b4:	4770      	bx	lr

080062b6 <meta_phy_size>:
 80062b6:	6803      	ldr	r3, [r0, #0]
 80062b8:	6898      	ldr	r0, [r3, #8]
 80062ba:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80062be:	4770      	bx	lr

080062c0 <n_pages_in_slot>:
 80062c0:	b538      	push	{r3, r4, r5, lr}
 80062c2:	4605      	mov	r5, r0
 80062c4:	6904      	ldr	r4, [r0, #16]
 80062c6:	f7ff fff6 	bl	80062b6 <meta_phy_size>
 80062ca:	4404      	add	r4, r0
 80062cc:	4628      	mov	r0, r5
 80062ce:	f7ff ffef 	bl	80062b0 <page_size>
 80062d2:	4404      	add	r4, r0
 80062d4:	3c01      	subs	r4, #1
 80062d6:	fbb4 f0f0 	udiv	r0, r4, r0
 80062da:	bd38      	pop	{r3, r4, r5, pc}

080062dc <slot_size>:
 80062dc:	b538      	push	{r3, r4, r5, lr}
 80062de:	4605      	mov	r5, r0
 80062e0:	f7ff ffee 	bl	80062c0 <n_pages_in_slot>
 80062e4:	4604      	mov	r4, r0
 80062e6:	4628      	mov	r0, r5
 80062e8:	f7ff ffe2 	bl	80062b0 <page_size>
 80062ec:	fb04 f000 	mul.w	r0, r4, r0
 80062f0:	bd38      	pop	{r3, r4, r5, pc}

080062f2 <n_slots>:
 80062f2:	b510      	push	{r4, lr}
 80062f4:	4604      	mov	r4, r0
 80062f6:	f7ff fff1 	bl	80062dc <slot_size>
 80062fa:	68a3      	ldr	r3, [r4, #8]
 80062fc:	fbb3 f0f0 	udiv	r0, r3, r0
 8006300:	bd10      	pop	{r4, pc}

08006302 <slot_base>:
 8006302:	b538      	push	{r3, r4, r5, lr}
 8006304:	460c      	mov	r4, r1
 8006306:	6845      	ldr	r5, [r0, #4]
 8006308:	f7ff ffe8 	bl	80062dc <slot_size>
 800630c:	fb04 5000 	mla	r0, r4, r0, r5
 8006310:	bd38      	pop	{r3, r4, r5, pc}

08006312 <meta_offset>:
 8006312:	b538      	push	{r3, r4, r5, lr}
 8006314:	4605      	mov	r5, r0
 8006316:	f7ff ffe1 	bl	80062dc <slot_size>
 800631a:	4604      	mov	r4, r0
 800631c:	4628      	mov	r0, r5
 800631e:	f7ff ffca 	bl	80062b6 <meta_phy_size>
 8006322:	1a20      	subs	r0, r4, r0
 8006324:	bd38      	pop	{r3, r4, r5, pc}

08006326 <get_slot_meta>:
 8006326:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800632a:	b08c      	sub	sp, #48	@ 0x30
 800632c:	4604      	mov	r4, r0
 800632e:	460e      	mov	r6, r1
 8006330:	6803      	ldr	r3, [r0, #0]
 8006332:	689d      	ldr	r5, [r3, #8]
 8006334:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 8006338:	4611      	mov	r1, r2
 800633a:	f7ff ffe2 	bl	8006302 <slot_base>
 800633e:	4607      	mov	r7, r0
 8006340:	4620      	mov	r0, r4
 8006342:	f7ff ffe6 	bl	8006312 <meta_offset>
 8006346:	4643      	mov	r3, r8
 8006348:	183a      	adds	r2, r7, r0
 800634a:	4669      	mov	r1, sp
 800634c:	4620      	mov	r0, r4
 800634e:	f7ff ff66 	bl	800621e <nvm_read>
 8006352:	2200      	movs	r2, #0
 8006354:	e00a      	b.n	800636c <get_slot_meta+0x46>
 8006356:	fb05 f302 	mul.w	r3, r5, r2
 800635a:	f023 0303 	bic.w	r3, r3, #3
 800635e:	3330      	adds	r3, #48	@ 0x30
 8006360:	446b      	add	r3, sp
 8006362:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8006366:	f846 3022 	str.w	r3, [r6, r2, lsl #2]
 800636a:	3201      	adds	r2, #1
 800636c:	2a02      	cmp	r2, #2
 800636e:	d9f2      	bls.n	8006356 <get_slot_meta+0x30>
 8006370:	b00c      	add	sp, #48	@ 0x30
 8006372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006376 <get_slot_version>:
 8006376:	b500      	push	{lr}
 8006378:	b085      	sub	sp, #20
 800637a:	460a      	mov	r2, r1
 800637c:	a901      	add	r1, sp, #4
 800637e:	f7ff ffd2 	bl	8006326 <get_slot_meta>
 8006382:	9801      	ldr	r0, [sp, #4]
 8006384:	b005      	add	sp, #20
 8006386:	f85d fb04 	ldr.w	pc, [sp], #4

0800638a <get_slot_checksum>:
 800638a:	b500      	push	{lr}
 800638c:	b085      	sub	sp, #20
 800638e:	460a      	mov	r2, r1
 8006390:	a901      	add	r1, sp, #4
 8006392:	f7ff ffc8 	bl	8006326 <get_slot_meta>
 8006396:	9802      	ldr	r0, [sp, #8]
 8006398:	b005      	add	sp, #20
 800639a:	f85d fb04 	ldr.w	pc, [sp], #4

0800639e <write_meta_core>:
 800639e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80063a2:	b08d      	sub	sp, #52	@ 0x34
 80063a4:	4604      	mov	r4, r0
 80063a6:	4616      	mov	r6, r2
 80063a8:	6803      	ldr	r3, [r0, #0]
 80063aa:	689d      	ldr	r5, [r3, #8]
 80063ac:	ea4f 0845 	mov.w	r8, r5, lsl #1
 80063b0:	f7ff ffa7 	bl	8006302 <slot_base>
 80063b4:	4607      	mov	r7, r0
 80063b6:	4620      	mov	r0, r4
 80063b8:	f7ff ffab 	bl	8006312 <meta_offset>
 80063bc:	eb07 0900 	add.w	r9, r7, r0
 80063c0:	2230      	movs	r2, #48	@ 0x30
 80063c2:	2100      	movs	r1, #0
 80063c4:	4668      	mov	r0, sp
 80063c6:	f000 fe07 	bl	8006fd8 <memset>
 80063ca:	2100      	movs	r1, #0
 80063cc:	e00a      	b.n	80063e4 <write_meta_core+0x46>
 80063ce:	fb05 f301 	mul.w	r3, r5, r1
 80063d2:	f856 2021 	ldr.w	r2, [r6, r1, lsl #2]
 80063d6:	f023 0303 	bic.w	r3, r3, #3
 80063da:	3330      	adds	r3, #48	@ 0x30
 80063dc:	446b      	add	r3, sp
 80063de:	f843 2c30 	str.w	r2, [r3, #-48]
 80063e2:	3101      	adds	r1, #1
 80063e4:	2902      	cmp	r1, #2
 80063e6:	d9f2      	bls.n	80063ce <write_meta_core+0x30>
 80063e8:	4643      	mov	r3, r8
 80063ea:	466a      	mov	r2, sp
 80063ec:	4649      	mov	r1, r9
 80063ee:	4620      	mov	r0, r4
 80063f0:	f7ff ff06 	bl	8006200 <nvm_write>
 80063f4:	4620      	mov	r0, r4
 80063f6:	f7ff ff8c 	bl	8006312 <meta_offset>
 80063fa:	eb08 0100 	add.w	r1, r8, r0
 80063fe:	462b      	mov	r3, r5
 8006400:	eb0d 0208 	add.w	r2, sp, r8
 8006404:	4439      	add	r1, r7
 8006406:	4620      	mov	r0, r4
 8006408:	f7ff fefa 	bl	8006200 <nvm_write>
 800640c:	b00d      	add	sp, #52	@ 0x34
 800640e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08006412 <is_in_data>:
 8006412:	b508      	push	{r3, lr}
 8006414:	4603      	mov	r3, r0
 8006416:	4608      	mov	r0, r1
 8006418:	691a      	ldr	r2, [r3, #16]
 800641a:	6859      	ldr	r1, [r3, #4]
 800641c:	f7ff ff34 	bl	8006288 <is_in_range>
 8006420:	bd08      	pop	{r3, pc}

08006422 <get_other_ctx>:
 8006422:	b570      	push	{r4, r5, r6, lr}
 8006424:	4605      	mov	r5, r0
 8006426:	460e      	mov	r6, r1
 8006428:	4604      	mov	r4, r0
 800642a:	6aa4      	ldr	r4, [r4, #40]	@ 0x28
 800642c:	42ac      	cmp	r4, r5
 800642e:	d009      	beq.n	8006444 <get_other_ctx+0x22>
 8006430:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8006434:	d008      	beq.n	8006448 <get_other_ctx+0x26>
 8006436:	4631      	mov	r1, r6
 8006438:	4620      	mov	r0, r4
 800643a:	f7ff ffea 	bl	8006412 <is_in_data>
 800643e:	2800      	cmp	r0, #0
 8006440:	d0f3      	beq.n	800642a <get_other_ctx+0x8>
 8006442:	e001      	b.n	8006448 <get_other_ctx+0x26>
 8006444:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006448:	4620      	mov	r0, r4
 800644a:	bd70      	pop	{r4, r5, r6, pc}

0800644c <get_any_ctx>:
 800644c:	b538      	push	{r3, r4, r5, lr}
 800644e:	4604      	mov	r4, r0
 8006450:	460d      	mov	r5, r1
 8006452:	f7ff ffde 	bl	8006412 <is_in_data>
 8006456:	b108      	cbz	r0, 800645c <get_any_ctx+0x10>
 8006458:	4620      	mov	r0, r4
 800645a:	bd38      	pop	{r3, r4, r5, pc}
 800645c:	4629      	mov	r1, r5
 800645e:	4620      	mov	r0, r4
 8006460:	f7ff ffdf 	bl	8006422 <get_other_ctx>
 8006464:	4604      	mov	r4, r0
 8006466:	e7f7      	b.n	8006458 <get_any_ctx+0xc>

08006468 <is_in_any_nvm>:
 8006468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800646a:	4605      	mov	r5, r0
 800646c:	4b13      	ldr	r3, [pc, #76]	@ (80064bc <is_in_any_nvm+0x54>)
 800646e:	681f      	ldr	r7, [r3, #0]
 8006470:	4601      	mov	r1, r0
 8006472:	4638      	mov	r0, r7
 8006474:	f7ff ffea 	bl	800644c <get_any_ctx>
 8006478:	4606      	mov	r6, r0
 800647a:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 800647e:	d001      	beq.n	8006484 <is_in_any_nvm+0x1c>
 8006480:	4630      	mov	r0, r6
 8006482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006484:	4629      	mov	r1, r5
 8006486:	4638      	mov	r0, r7
 8006488:	f7ff ff09 	bl	800629e <is_in_nvm>
 800648c:	b990      	cbnz	r0, 80064b4 <is_in_any_nvm+0x4c>
 800648e:	4b0c      	ldr	r3, [pc, #48]	@ (80064c0 <is_in_any_nvm+0x58>)
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d0f4      	beq.n	8006480 <is_in_any_nvm+0x18>
 8006496:	463c      	mov	r4, r7
 8006498:	6aa4      	ldr	r4, [r4, #40]	@ 0x28
 800649a:	42bc      	cmp	r4, r7
 800649c:	d0f0      	beq.n	8006480 <is_in_any_nvm+0x18>
 800649e:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 80064a2:	d009      	beq.n	80064b8 <is_in_any_nvm+0x50>
 80064a4:	4629      	mov	r1, r5
 80064a6:	4620      	mov	r0, r4
 80064a8:	f7ff fef9 	bl	800629e <is_in_nvm>
 80064ac:	2800      	cmp	r0, #0
 80064ae:	d0f3      	beq.n	8006498 <is_in_any_nvm+0x30>
 80064b0:	4626      	mov	r6, r4
 80064b2:	e7e5      	b.n	8006480 <is_in_any_nvm+0x18>
 80064b4:	463e      	mov	r6, r7
 80064b6:	e7e3      	b.n	8006480 <is_in_any_nvm+0x18>
 80064b8:	4626      	mov	r6, r4
 80064ba:	e7e1      	b.n	8006480 <is_in_any_nvm+0x18>
 80064bc:	20000094 	.word	0x20000094
 80064c0:	20000490 	.word	0x20000490

080064c4 <get_current_slot_index>:
 80064c4:	b510      	push	{r4, lr}
 80064c6:	68c4      	ldr	r4, [r0, #12]
 80064c8:	6843      	ldr	r3, [r0, #4]
 80064ca:	1ae4      	subs	r4, r4, r3
 80064cc:	f7ff ff06 	bl	80062dc <slot_size>
 80064d0:	fbb4 f0f0 	udiv	r0, r4, r0
 80064d4:	bd10      	pop	{r4, pc}

080064d6 <next_slot>:
 80064d6:	b570      	push	{r4, r5, r6, lr}
 80064d8:	4604      	mov	r4, r0
 80064da:	6843      	ldr	r3, [r0, #4]
 80064dc:	6882      	ldr	r2, [r0, #8]
 80064de:	189e      	adds	r6, r3, r2
 80064e0:	68c5      	ldr	r5, [r0, #12]
 80064e2:	f7ff fefb 	bl	80062dc <slot_size>
 80064e6:	eb05 0540 	add.w	r5, r5, r0, lsl #1
 80064ea:	42ae      	cmp	r6, r5
 80064ec:	d304      	bcc.n	80064f8 <next_slot+0x22>
 80064ee:	4620      	mov	r0, r4
 80064f0:	f7ff ffe8 	bl	80064c4 <get_current_slot_index>
 80064f4:	3001      	adds	r0, #1
 80064f6:	bd70      	pop	{r4, r5, r6, pc}
 80064f8:	2000      	movs	r0, #0
 80064fa:	e7fc      	b.n	80064f6 <next_slot+0x20>

080064fc <erase_slot>:
 80064fc:	b538      	push	{r3, r4, r5, lr}
 80064fe:	4604      	mov	r4, r0
 8006500:	f7ff feff 	bl	8006302 <slot_base>
 8006504:	4605      	mov	r5, r0
 8006506:	4620      	mov	r0, r4
 8006508:	f7ff feda 	bl	80062c0 <n_pages_in_slot>
 800650c:	4602      	mov	r2, r0
 800650e:	4629      	mov	r1, r5
 8006510:	4620      	mov	r0, r4
 8006512:	f7ff fe67 	bl	80061e4 <nvm_erase>
 8006516:	bd38      	pop	{r3, r4, r5, pc}

08006518 <n_pages>:
 8006518:	b510      	push	{r4, lr}
 800651a:	6884      	ldr	r4, [r0, #8]
 800651c:	f7ff fec8 	bl	80062b0 <page_size>
 8006520:	fbb4 f0f0 	udiv	r0, r4, r0
 8006524:	bd10      	pop	{r4, pc}

08006526 <mem_read>:
 8006526:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006528:	4607      	mov	r7, r0
 800652a:	460d      	mov	r5, r1
 800652c:	4614      	mov	r4, r2
 800652e:	461e      	mov	r6, r3
 8006530:	4611      	mov	r1, r2
 8006532:	f7ff feb4 	bl	800629e <is_in_nvm>
 8006536:	b130      	cbz	r0, 8006546 <mem_read+0x20>
 8006538:	4633      	mov	r3, r6
 800653a:	4622      	mov	r2, r4
 800653c:	4629      	mov	r1, r5
 800653e:	4638      	mov	r0, r7
 8006540:	f7ff fe6d 	bl	800621e <nvm_read>
 8006544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006546:	4632      	mov	r2, r6
 8006548:	4621      	mov	r1, r4
 800654a:	4628      	mov	r0, r5
 800654c:	f000 fd76 	bl	800703c <memcpy>
 8006550:	e7f8      	b.n	8006544 <mem_read+0x1e>

08006552 <checksum>:
 8006552:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006556:	b0a1      	sub	sp, #132	@ 0x84
 8006558:	4680      	mov	r8, r0
 800655a:	460f      	mov	r7, r1
 800655c:	4615      	mov	r5, r2
 800655e:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8006562:	e011      	b.n	8006588 <checksum+0x36>
 8006564:	462c      	mov	r4, r5
 8006566:	2d80      	cmp	r5, #128	@ 0x80
 8006568:	bf28      	it	cs
 800656a:	2480      	movcs	r4, #128	@ 0x80
 800656c:	4623      	mov	r3, r4
 800656e:	463a      	mov	r2, r7
 8006570:	4669      	mov	r1, sp
 8006572:	4640      	mov	r0, r8
 8006574:	f7ff ffd7 	bl	8006526 <mem_read>
 8006578:	4622      	mov	r2, r4
 800657a:	4669      	mov	r1, sp
 800657c:	4630      	mov	r0, r6
 800657e:	f7ff fe5d 	bl	800623c <crc32c>
 8006582:	4606      	mov	r6, r0
 8006584:	1b2d      	subs	r5, r5, r4
 8006586:	4427      	add	r7, r4
 8006588:	2d00      	cmp	r5, #0
 800658a:	d1eb      	bne.n	8006564 <checksum+0x12>
 800658c:	4630      	mov	r0, r6
 800658e:	b021      	add	sp, #132	@ 0x84
 8006590:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08006594 <write_meta>:
 8006594:	b570      	push	{r4, r5, r6, lr}
 8006596:	b084      	sub	sp, #16
 8006598:	4604      	mov	r4, r0
 800659a:	460d      	mov	r5, r1
 800659c:	4616      	mov	r6, r2
 800659e:	f7ff feb0 	bl	8006302 <slot_base>
 80065a2:	4601      	mov	r1, r0
 80065a4:	9601      	str	r6, [sp, #4]
 80065a6:	6922      	ldr	r2, [r4, #16]
 80065a8:	4620      	mov	r0, r4
 80065aa:	f7ff ffd2 	bl	8006552 <checksum>
 80065ae:	9b01      	ldr	r3, [sp, #4]
 80065b0:	4418      	add	r0, r3
 80065b2:	9002      	str	r0, [sp, #8]
 80065b4:	9003      	str	r0, [sp, #12]
 80065b6:	aa01      	add	r2, sp, #4
 80065b8:	4629      	mov	r1, r5
 80065ba:	4620      	mov	r0, r4
 80065bc:	f7ff feef 	bl	800639e <write_meta_core>
 80065c0:	b004      	add	sp, #16
 80065c2:	bd70      	pop	{r4, r5, r6, pc}

080065c4 <compute_slot_checksum>:
 80065c4:	b530      	push	{r4, r5, lr}
 80065c6:	b085      	sub	sp, #20
 80065c8:	4604      	mov	r4, r0
 80065ca:	460d      	mov	r5, r1
 80065cc:	460a      	mov	r2, r1
 80065ce:	a901      	add	r1, sp, #4
 80065d0:	f7ff fea9 	bl	8006326 <get_slot_meta>
 80065d4:	4629      	mov	r1, r5
 80065d6:	4620      	mov	r0, r4
 80065d8:	f7ff fe93 	bl	8006302 <slot_base>
 80065dc:	4601      	mov	r1, r0
 80065de:	6922      	ldr	r2, [r4, #16]
 80065e0:	4620      	mov	r0, r4
 80065e2:	f7ff ffb6 	bl	8006552 <checksum>
 80065e6:	9b01      	ldr	r3, [sp, #4]
 80065e8:	4418      	add	r0, r3
 80065ea:	b005      	add	sp, #20
 80065ec:	bd30      	pop	{r4, r5, pc}

080065ee <slot_integrity_check_ok>:
 80065ee:	b570      	push	{r4, r5, r6, lr}
 80065f0:	4605      	mov	r5, r0
 80065f2:	460e      	mov	r6, r1
 80065f4:	f7ff fec9 	bl	800638a <get_slot_checksum>
 80065f8:	4604      	mov	r4, r0
 80065fa:	4631      	mov	r1, r6
 80065fc:	4628      	mov	r0, r5
 80065fe:	f7ff ffe1 	bl	80065c4 <compute_slot_checksum>
 8006602:	4284      	cmp	r4, r0
 8006604:	bf14      	ite	ne
 8006606:	2000      	movne	r0, #0
 8006608:	2001      	moveq	r0, #1
 800660a:	bd70      	pop	{r4, r5, r6, pc}

0800660c <find_current_slot>:
 800660c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006610:	b085      	sub	sp, #20
 8006612:	4606      	mov	r6, r0
 8006614:	f7ff fe6d 	bl	80062f2 <n_slots>
 8006618:	4680      	mov	r8, r0
 800661a:	2500      	movs	r5, #0
 800661c:	462f      	mov	r7, r5
 800661e:	f04f 39ff 	mov.w	r9, #4294967295	@ 0xffffffff
 8006622:	e002      	b.n	800662a <find_current_slot+0x1e>
 8006624:	42a7      	cmp	r7, r4
 8006626:	d310      	bcc.n	800664a <find_current_slot+0x3e>
 8006628:	3501      	adds	r5, #1
 800662a:	4545      	cmp	r5, r8
 800662c:	d216      	bcs.n	800665c <find_current_slot+0x50>
 800662e:	4629      	mov	r1, r5
 8006630:	4630      	mov	r0, r6
 8006632:	f7ff fea0 	bl	8006376 <get_slot_version>
 8006636:	4604      	mov	r4, r0
 8006638:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 800663c:	d0f4      	beq.n	8006628 <find_current_slot+0x1c>
 800663e:	4287      	cmp	r7, r0
 8006640:	d1f0      	bne.n	8006624 <find_current_slot+0x18>
 8006642:	6a33      	ldr	r3, [r6, #32]
 8006644:	2001      	movs	r0, #1
 8006646:	4798      	blx	r3
 8006648:	e7ec      	b.n	8006624 <find_current_slot+0x18>
 800664a:	4629      	mov	r1, r5
 800664c:	4630      	mov	r0, r6
 800664e:	f7ff ffce 	bl	80065ee <slot_integrity_check_ok>
 8006652:	2800      	cmp	r0, #0
 8006654:	d0e8      	beq.n	8006628 <find_current_slot+0x1c>
 8006656:	4627      	mov	r7, r4
 8006658:	46a9      	mov	r9, r5
 800665a:	e7e5      	b.n	8006628 <find_current_slot+0x1c>
 800665c:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 8006660:	d010      	beq.n	8006684 <find_current_slot+0x78>
 8006662:	4649      	mov	r1, r9
 8006664:	4630      	mov	r0, r6
 8006666:	f7ff fe4c 	bl	8006302 <slot_base>
 800666a:	60f0      	str	r0, [r6, #12]
 800666c:	464a      	mov	r2, r9
 800666e:	a901      	add	r1, sp, #4
 8006670:	4630      	mov	r0, r6
 8006672:	f7ff fe58 	bl	8006326 <get_slot_meta>
 8006676:	9b02      	ldr	r3, [sp, #8]
 8006678:	9a03      	ldr	r2, [sp, #12]
 800667a:	429a      	cmp	r2, r3
 800667c:	d106      	bne.n	800668c <find_current_slot+0x80>
 800667e:	b005      	add	sp, #20
 8006680:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006684:	6a33      	ldr	r3, [r6, #32]
 8006686:	2002      	movs	r0, #2
 8006688:	4798      	blx	r3
 800668a:	e7ea      	b.n	8006662 <find_current_slot+0x56>
 800668c:	9303      	str	r3, [sp, #12]
 800668e:	aa01      	add	r2, sp, #4
 8006690:	4649      	mov	r1, r9
 8006692:	4630      	mov	r0, r6
 8006694:	f7ff fe83 	bl	800639e <write_meta_core>
 8006698:	e7f1      	b.n	800667e <find_current_slot+0x72>

0800669a <translate_addr>:
 800669a:	b570      	push	{r4, r5, r6, lr}
 800669c:	4604      	mov	r4, r0
 800669e:	460d      	mov	r5, r1
 80066a0:	4616      	mov	r6, r2
 80066a2:	f7ff feb6 	bl	8006412 <is_in_data>
 80066a6:	b910      	cbnz	r0, 80066ae <translate_addr+0x14>
 80066a8:	6a23      	ldr	r3, [r4, #32]
 80066aa:	2003      	movs	r0, #3
 80066ac:	4798      	blx	r3
 80066ae:	68e3      	ldr	r3, [r4, #12]
 80066b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80066b4:	d00b      	beq.n	80066ce <translate_addr+0x34>
 80066b6:	6863      	ldr	r3, [r4, #4]
 80066b8:	1aed      	subs	r5, r5, r3
 80066ba:	442e      	add	r6, r5
 80066bc:	6923      	ldr	r3, [r4, #16]
 80066be:	429e      	cmp	r6, r3
 80066c0:	d902      	bls.n	80066c8 <translate_addr+0x2e>
 80066c2:	6a23      	ldr	r3, [r4, #32]
 80066c4:	2004      	movs	r0, #4
 80066c6:	4798      	blx	r3
 80066c8:	68e0      	ldr	r0, [r4, #12]
 80066ca:	4428      	add	r0, r5
 80066cc:	bd70      	pop	{r4, r5, r6, pc}
 80066ce:	4620      	mov	r0, r4
 80066d0:	f7ff ff9c 	bl	800660c <find_current_slot>
 80066d4:	e7ef      	b.n	80066b6 <translate_addr+0x1c>

080066d6 <erase>:
 80066d6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066da:	4604      	mov	r4, r0
 80066dc:	460e      	mov	r6, r1
 80066de:	4615      	mov	r5, r2
 80066e0:	6803      	ldr	r3, [r0, #0]
 80066e2:	689f      	ldr	r7, [r3, #8]
 80066e4:	fbb1 f3f7 	udiv	r3, r1, r7
 80066e8:	fb07 1313 	mls	r3, r7, r3, r1
 80066ec:	b113      	cbz	r3, 80066f4 <erase+0x1e>
 80066ee:	6a03      	ldr	r3, [r0, #32]
 80066f0:	2005      	movs	r0, #5
 80066f2:	4798      	blx	r3
 80066f4:	fbb5 f3f7 	udiv	r3, r5, r7
 80066f8:	fb07 5313 	mls	r3, r7, r3, r5
 80066fc:	b113      	cbz	r3, 8006704 <erase+0x2e>
 80066fe:	6a23      	ldr	r3, [r4, #32]
 8006700:	2006      	movs	r0, #6
 8006702:	4798      	blx	r3
 8006704:	462a      	mov	r2, r5
 8006706:	4631      	mov	r1, r6
 8006708:	4620      	mov	r0, r4
 800670a:	f7ff ffc6 	bl	800669a <translate_addr>
 800670e:	4606      	mov	r6, r0
 8006710:	4620      	mov	r0, r4
 8006712:	f7ff fed7 	bl	80064c4 <get_current_slot_index>
 8006716:	4601      	mov	r1, r0
 8006718:	4620      	mov	r0, r4
 800671a:	f7ff fdf2 	bl	8006302 <slot_base>
 800671e:	4681      	mov	r9, r0
 8006720:	68e3      	ldr	r3, [r4, #12]
 8006722:	1af6      	subs	r6, r6, r3
 8006724:	4620      	mov	r0, r4
 8006726:	f7ff fed6 	bl	80064d6 <next_slot>
 800672a:	4607      	mov	r7, r0
 800672c:	4601      	mov	r1, r0
 800672e:	4620      	mov	r0, r4
 8006730:	f7ff fde7 	bl	8006302 <slot_base>
 8006734:	4680      	mov	r8, r0
 8006736:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006738:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800673c:	d002      	beq.n	8006744 <erase+0x6e>
 800673e:	6a23      	ldr	r3, [r4, #32]
 8006740:	2007      	movs	r0, #7
 8006742:	4798      	blx	r3
 8006744:	4639      	mov	r1, r7
 8006746:	4620      	mov	r0, r4
 8006748:	f7ff fed8 	bl	80064fc <erase_slot>
 800674c:	b99e      	cbnz	r6, 8006776 <erase+0xa0>
 800674e:	4435      	add	r5, r6
 8006750:	6923      	ldr	r3, [r4, #16]
 8006752:	1b5b      	subs	r3, r3, r5
 8006754:	d116      	bne.n	8006784 <erase+0xae>
 8006756:	4620      	mov	r0, r4
 8006758:	f7ff feb4 	bl	80064c4 <get_current_slot_index>
 800675c:	4601      	mov	r1, r0
 800675e:	4620      	mov	r0, r4
 8006760:	f7ff fe09 	bl	8006376 <get_slot_version>
 8006764:	1c42      	adds	r2, r0, #1
 8006766:	4639      	mov	r1, r7
 8006768:	4620      	mov	r0, r4
 800676a:	f7ff ff13 	bl	8006594 <write_meta>
 800676e:	f8c4 800c 	str.w	r8, [r4, #12]
 8006772:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006776:	4633      	mov	r3, r6
 8006778:	464a      	mov	r2, r9
 800677a:	4641      	mov	r1, r8
 800677c:	4620      	mov	r0, r4
 800677e:	f7ff fd3f 	bl	8006200 <nvm_write>
 8006782:	e7e4      	b.n	800674e <erase+0x78>
 8006784:	eb09 0205 	add.w	r2, r9, r5
 8006788:	eb08 0105 	add.w	r1, r8, r5
 800678c:	4620      	mov	r0, r4
 800678e:	f7ff fd37 	bl	8006200 <nvm_write>
 8006792:	e7e0      	b.n	8006756 <erase+0x80>

08006794 <write_core>:
 8006794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006798:	b08b      	sub	sp, #44	@ 0x2c
 800679a:	af00      	add	r7, sp, #0
 800679c:	4604      	mov	r4, r0
 800679e:	460e      	mov	r6, r1
 80067a0:	4693      	mov	fp, r2
 80067a2:	469a      	mov	sl, r3
 80067a4:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 80067a8:	617b      	str	r3, [r7, #20]
 80067aa:	f897 5054 	ldrb.w	r5, [r7, #84]	@ 0x54
 80067ae:	6803      	ldr	r3, [r0, #0]
 80067b0:	f8d3 8008 	ldr.w	r8, [r3, #8]
 80067b4:	f108 0207 	add.w	r2, r8, #7
 80067b8:	f022 0307 	bic.w	r3, r2, #7
 80067bc:	ebad 0d03 	sub.w	sp, sp, r3
 80067c0:	4668      	mov	r0, sp
 80067c2:	f8c7 d024 	str.w	sp, [r7, #36]	@ 0x24
 80067c6:	461a      	mov	r2, r3
 80067c8:	2155      	movs	r1, #85	@ 0x55
 80067ca:	f000 fc05 	bl	8006fd8 <memset>
 80067ce:	2d00      	cmp	r5, #0
 80067d0:	f000 809a 	beq.w	8006908 <write_core+0x174>
 80067d4:	4635      	mov	r5, r6
 80067d6:	fbb6 f3f8 	udiv	r3, r6, r8
 80067da:	fb08 6313 	mls	r3, r8, r3, r6
 80067de:	b113      	cbz	r3, 80067e6 <write_core+0x52>
 80067e0:	6a23      	ldr	r3, [r4, #32]
 80067e2:	2005      	movs	r0, #5
 80067e4:	4798      	blx	r3
 80067e6:	fbba f6f8 	udiv	r6, sl, r8
 80067ea:	fb08 a616 	mls	r6, r8, r6, sl
 80067ee:	2e00      	cmp	r6, #0
 80067f0:	f000 809c 	beq.w	800692c <write_core+0x198>
 80067f4:	6a23      	ldr	r3, [r4, #32]
 80067f6:	2006      	movs	r0, #6
 80067f8:	4798      	blx	r3
 80067fa:	46d1      	mov	r9, sl
 80067fc:	2600      	movs	r6, #0
 80067fe:	464a      	mov	r2, r9
 8006800:	4629      	mov	r1, r5
 8006802:	4620      	mov	r0, r4
 8006804:	f7ff ff49 	bl	800669a <translate_addr>
 8006808:	4605      	mov	r5, r0
 800680a:	4620      	mov	r0, r4
 800680c:	f7ff fe5a 	bl	80064c4 <get_current_slot_index>
 8006810:	4601      	mov	r1, r0
 8006812:	4620      	mov	r0, r4
 8006814:	f7ff fd75 	bl	8006302 <slot_base>
 8006818:	61f8      	str	r0, [r7, #28]
 800681a:	68e3      	ldr	r3, [r4, #12]
 800681c:	1aed      	subs	r5, r5, r3
 800681e:	eb09 0205 	add.w	r2, r9, r5
 8006822:	607a      	str	r2, [r7, #4]
 8006824:	4620      	mov	r0, r4
 8006826:	f7ff fe56 	bl	80064d6 <next_slot>
 800682a:	4601      	mov	r1, r0
 800682c:	60f8      	str	r0, [r7, #12]
 800682e:	4620      	mov	r0, r4
 8006830:	f7ff fd67 	bl	8006302 <slot_base>
 8006834:	6238      	str	r0, [r7, #32]
 8006836:	69fb      	ldr	r3, [r7, #28]
 8006838:	4283      	cmp	r3, r0
 800683a:	d079      	beq.n	8006930 <write_core+0x19c>
 800683c:	6a3b      	ldr	r3, [r7, #32]
 800683e:	442b      	add	r3, r5
 8006840:	61bb      	str	r3, [r7, #24]
 8006842:	4658      	mov	r0, fp
 8006844:	f7ff fe10 	bl	8006468 <is_in_any_nvm>
 8006848:	6138      	str	r0, [r7, #16]
 800684a:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 800684e:	d07b      	beq.n	8006948 <write_core+0x1b4>
 8006850:	4659      	mov	r1, fp
 8006852:	f7ff fdde 	bl	8006412 <is_in_data>
 8006856:	2800      	cmp	r0, #0
 8006858:	d16f      	bne.n	800693a <write_core+0x1a6>
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	b963      	cbnz	r3, 8006878 <write_core+0xe4>
 800685e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006860:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006864:	d002      	beq.n	800686c <write_core+0xd8>
 8006866:	6a23      	ldr	r3, [r4, #32]
 8006868:	2007      	movs	r0, #7
 800686a:	4798      	blx	r3
 800686c:	68f9      	ldr	r1, [r7, #12]
 800686e:	4620      	mov	r0, r4
 8006870:	f7ff fe44 	bl	80064fc <erase_slot>
 8006874:	2d00      	cmp	r5, #0
 8006876:	d169      	bne.n	800694c <write_core+0x1b8>
 8006878:	b316      	cbz	r6, 80068c0 <write_core+0x12c>
 800687a:	eba8 0306 	sub.w	r3, r8, r6
 800687e:	60bb      	str	r3, [r7, #8]
 8006880:	459a      	cmp	sl, r3
 8006882:	d36a      	bcc.n	800695a <write_core+0x1c6>
 8006884:	4633      	mov	r3, r6
 8006886:	69fa      	ldr	r2, [r7, #28]
 8006888:	442a      	add	r2, r5
 800688a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800688c:	4620      	mov	r0, r4
 800688e:	f7ff fcc6 	bl	800621e <nvm_read>
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	465a      	mov	r2, fp
 8006896:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006898:	4431      	add	r1, r6
 800689a:	6938      	ldr	r0, [r7, #16]
 800689c:	f7ff fe43 	bl	8006526 <mem_read>
 80068a0:	4643      	mov	r3, r8
 80068a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068a4:	69b9      	ldr	r1, [r7, #24]
 80068a6:	4620      	mov	r0, r4
 80068a8:	f7ff fcaa 	bl	8006200 <nvm_write>
 80068ac:	4445      	add	r5, r8
 80068ae:	6a3a      	ldr	r2, [r7, #32]
 80068b0:	442a      	add	r2, r5
 80068b2:	61ba      	str	r2, [r7, #24]
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	449b      	add	fp, r3
 80068b8:	eba9 0908 	sub.w	r9, r9, r8
 80068bc:	ebaa 0a03 	sub.w	sl, sl, r3
 80068c0:	45ca      	cmp	sl, r9
 80068c2:	d001      	beq.n	80068c8 <write_core+0x134>
 80068c4:	eba9 0908 	sub.w	r9, r9, r8
 80068c8:	464b      	mov	r3, r9
 80068ca:	465a      	mov	r2, fp
 80068cc:	69b9      	ldr	r1, [r7, #24]
 80068ce:	4620      	mov	r0, r4
 80068d0:	f7ff fc96 	bl	8006200 <nvm_write>
 80068d4:	45ca      	cmp	sl, r9
 80068d6:	d150      	bne.n	800697a <write_core+0x1e6>
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	b98b      	cbnz	r3, 8006900 <write_core+0x16c>
 80068dc:	6923      	ldr	r3, [r4, #16]
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	1a9b      	subs	r3, r3, r2
 80068e2:	d16c      	bne.n	80069be <write_core+0x22a>
 80068e4:	4620      	mov	r0, r4
 80068e6:	f7ff fded 	bl	80064c4 <get_current_slot_index>
 80068ea:	4601      	mov	r1, r0
 80068ec:	4620      	mov	r0, r4
 80068ee:	f7ff fd42 	bl	8006376 <get_slot_version>
 80068f2:	1c42      	adds	r2, r0, #1
 80068f4:	68f9      	ldr	r1, [r7, #12]
 80068f6:	4620      	mov	r0, r4
 80068f8:	f7ff fe4c 	bl	8006594 <write_meta>
 80068fc:	6a3b      	ldr	r3, [r7, #32]
 80068fe:	60e3      	str	r3, [r4, #12]
 8006900:	372c      	adds	r7, #44	@ 0x2c
 8006902:	46bd      	mov	sp, r7
 8006904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006908:	fbb6 f5f8 	udiv	r5, r6, r8
 800690c:	fb08 f505 	mul.w	r5, r8, r5
 8006910:	1b76      	subs	r6, r6, r5
 8006912:	eb06 090a 	add.w	r9, r6, sl
 8006916:	fbb9 f3f8 	udiv	r3, r9, r8
 800691a:	fb08 9313 	mls	r3, r8, r3, r9
 800691e:	2b00      	cmp	r3, #0
 8006920:	f43f af6d 	beq.w	80067fe <write_core+0x6a>
 8006924:	eba8 0303 	sub.w	r3, r8, r3
 8006928:	4499      	add	r9, r3
 800692a:	e768      	b.n	80067fe <write_core+0x6a>
 800692c:	46d1      	mov	r9, sl
 800692e:	e766      	b.n	80067fe <write_core+0x6a>
 8006930:	6a23      	ldr	r3, [r4, #32]
 8006932:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006936:	4798      	blx	r3
 8006938:	e780      	b.n	800683c <write_core+0xa8>
 800693a:	4652      	mov	r2, sl
 800693c:	4659      	mov	r1, fp
 800693e:	6938      	ldr	r0, [r7, #16]
 8006940:	f7ff feab 	bl	800669a <translate_addr>
 8006944:	4683      	mov	fp, r0
 8006946:	e788      	b.n	800685a <write_core+0xc6>
 8006948:	613c      	str	r4, [r7, #16]
 800694a:	e786      	b.n	800685a <write_core+0xc6>
 800694c:	462b      	mov	r3, r5
 800694e:	69fa      	ldr	r2, [r7, #28]
 8006950:	6a39      	ldr	r1, [r7, #32]
 8006952:	4620      	mov	r0, r4
 8006954:	f7ff fc54 	bl	8006200 <nvm_write>
 8006958:	e78e      	b.n	8006878 <write_core+0xe4>
 800695a:	eb06 010a 	add.w	r1, r6, sl
 800695e:	1972      	adds	r2, r6, r5
 8006960:	4452      	add	r2, sl
 8006962:	eba3 030a 	sub.w	r3, r3, sl
 8006966:	69f8      	ldr	r0, [r7, #28]
 8006968:	4402      	add	r2, r0
 800696a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800696c:	4401      	add	r1, r0
 800696e:	4620      	mov	r0, r4
 8006970:	f7ff fc55 	bl	800621e <nvm_read>
 8006974:	f8c7 a008 	str.w	sl, [r7, #8]
 8006978:	e784      	b.n	8006884 <write_core+0xf0>
 800697a:	444d      	add	r5, r9
 800697c:	fbba f6f8 	udiv	r6, sl, r8
 8006980:	fb08 a616 	mls	r6, r8, r6, sl
 8006984:	4633      	mov	r3, r6
 8006986:	eb0b 0209 	add.w	r2, fp, r9
 800698a:	f8d7 9024 	ldr.w	r9, [r7, #36]	@ 0x24
 800698e:	4649      	mov	r1, r9
 8006990:	6938      	ldr	r0, [r7, #16]
 8006992:	f7ff fdc8 	bl	8006526 <mem_read>
 8006996:	19aa      	adds	r2, r5, r6
 8006998:	eba8 0306 	sub.w	r3, r8, r6
 800699c:	69f9      	ldr	r1, [r7, #28]
 800699e:	440a      	add	r2, r1
 80069a0:	f8c7 9024 	str.w	r9, [r7, #36]	@ 0x24
 80069a4:	4649      	mov	r1, r9
 80069a6:	4431      	add	r1, r6
 80069a8:	4620      	mov	r0, r4
 80069aa:	f7ff fc38 	bl	800621e <nvm_read>
 80069ae:	4643      	mov	r3, r8
 80069b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069b2:	6a39      	ldr	r1, [r7, #32]
 80069b4:	4429      	add	r1, r5
 80069b6:	4620      	mov	r0, r4
 80069b8:	f7ff fc22 	bl	8006200 <nvm_write>
 80069bc:	e78c      	b.n	80068d8 <write_core+0x144>
 80069be:	69fa      	ldr	r2, [r7, #28]
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	4402      	add	r2, r0
 80069c4:	6a39      	ldr	r1, [r7, #32]
 80069c6:	4401      	add	r1, r0
 80069c8:	4620      	mov	r0, r4
 80069ca:	f7ff fc19 	bl	8006200 <nvm_write>
 80069ce:	e789      	b.n	80068e4 <write_core+0x150>

080069d0 <lftl_init_lib>:
 80069d0:	4b04      	ldr	r3, [pc, #16]	@ (80069e4 <lftl_init_lib+0x14>)
 80069d2:	2200      	movs	r2, #0
 80069d4:	701a      	strb	r2, [r3, #0]
 80069d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80069da:	4a03      	ldr	r2, [pc, #12]	@ (80069e8 <lftl_init_lib+0x18>)
 80069dc:	6013      	str	r3, [r2, #0]
 80069de:	4a03      	ldr	r2, [pc, #12]	@ (80069ec <lftl_init_lib+0x1c>)
 80069e0:	6013      	str	r3, [r2, #0]
 80069e2:	4770      	bx	lr
 80069e4:	20000490 	.word	0x20000490
 80069e8:	20000094 	.word	0x20000094
 80069ec:	20000090 	.word	0x20000090

080069f0 <lftl_register_area>:
 80069f0:	4b0b      	ldr	r3, [pc, #44]	@ (8006a20 <lftl_register_area+0x30>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80069f8:	d00f      	beq.n	8006a1a <lftl_register_area+0x2a>
 80069fa:	4a0a      	ldr	r2, [pc, #40]	@ (8006a24 <lftl_register_area+0x34>)
 80069fc:	6812      	ldr	r2, [r2, #0]
 80069fe:	6290      	str	r0, [r2, #40]	@ 0x28
 8006a00:	6802      	ldr	r2, [r0, #0]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d002      	beq.n	8006a0e <lftl_register_area+0x1e>
 8006a08:	4b07      	ldr	r3, [pc, #28]	@ (8006a28 <lftl_register_area+0x38>)
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	701a      	strb	r2, [r3, #0]
 8006a0e:	4b05      	ldr	r3, [pc, #20]	@ (8006a24 <lftl_register_area+0x34>)
 8006a10:	6018      	str	r0, [r3, #0]
 8006a12:	4b03      	ldr	r3, [pc, #12]	@ (8006a20 <lftl_register_area+0x30>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	6283      	str	r3, [r0, #40]	@ 0x28
 8006a18:	4770      	bx	lr
 8006a1a:	4b01      	ldr	r3, [pc, #4]	@ (8006a20 <lftl_register_area+0x30>)
 8006a1c:	6018      	str	r0, [r3, #0]
 8006a1e:	e7f6      	b.n	8006a0e <lftl_register_area+0x1e>
 8006a20:	20000094 	.word	0x20000094
 8006a24:	20000090 	.word	0x20000090
 8006a28:	20000490 	.word	0x20000490

08006a2c <lftl_format>:
 8006a2c:	b538      	push	{r3, r4, r5, lr}
 8006a2e:	4604      	mov	r4, r0
 8006a30:	6803      	ldr	r3, [r0, #0]
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	2b80      	cmp	r3, #128	@ 0x80
 8006a36:	d902      	bls.n	8006a3e <lftl_format+0x12>
 8006a38:	6a03      	ldr	r3, [r0, #32]
 8006a3a:	200a      	movs	r0, #10
 8006a3c:	4798      	blx	r3
 8006a3e:	6865      	ldr	r5, [r4, #4]
 8006a40:	4620      	mov	r0, r4
 8006a42:	f7ff fd69 	bl	8006518 <n_pages>
 8006a46:	4602      	mov	r2, r0
 8006a48:	4629      	mov	r1, r5
 8006a4a:	4620      	mov	r0, r4
 8006a4c:	f7ff fbca 	bl	80061e4 <nvm_erase>
 8006a50:	6863      	ldr	r3, [r4, #4]
 8006a52:	60e3      	str	r3, [r4, #12]
 8006a54:	2201      	movs	r2, #1
 8006a56:	2100      	movs	r1, #0
 8006a58:	4620      	mov	r0, r4
 8006a5a:	f7ff fd9b 	bl	8006594 <write_meta>
 8006a5e:	bd38      	pop	{r3, r4, r5, pc}

08006a60 <lftl_erase_all>:
 8006a60:	b508      	push	{r3, lr}
 8006a62:	6902      	ldr	r2, [r0, #16]
 8006a64:	6841      	ldr	r1, [r0, #4]
 8006a66:	f7ff fe36 	bl	80066d6 <erase>
 8006a6a:	bd08      	pop	{r3, pc}

08006a6c <lftl_basic_write>:
 8006a6c:	b903      	cbnz	r3, 8006a70 <lftl_basic_write+0x4>
 8006a6e:	4770      	bx	lr
 8006a70:	b500      	push	{lr}
 8006a72:	b083      	sub	sp, #12
 8006a74:	469c      	mov	ip, r3
 8006a76:	2300      	movs	r3, #0
 8006a78:	9301      	str	r3, [sp, #4]
 8006a7a:	9300      	str	r3, [sp, #0]
 8006a7c:	4663      	mov	r3, ip
 8006a7e:	f7ff fe89 	bl	8006794 <write_core>
 8006a82:	b003      	add	sp, #12
 8006a84:	f85d fb04 	ldr.w	pc, [sp], #4

08006a88 <lftl_read>:
 8006a88:	b903      	cbnz	r3, 8006a8c <lftl_read+0x4>
 8006a8a:	4770      	bx	lr
 8006a8c:	b570      	push	{r4, r5, r6, lr}
 8006a8e:	4604      	mov	r4, r0
 8006a90:	460d      	mov	r5, r1
 8006a92:	4611      	mov	r1, r2
 8006a94:	461e      	mov	r6, r3
 8006a96:	461a      	mov	r2, r3
 8006a98:	f7ff fdff 	bl	800669a <translate_addr>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	4633      	mov	r3, r6
 8006aa0:	4629      	mov	r1, r5
 8006aa2:	4620      	mov	r0, r4
 8006aa4:	f7ff fbbb 	bl	800621e <nvm_read>
 8006aa8:	bd70      	pop	{r4, r5, r6, pc}

08006aaa <lftl_transaction_start>:
 8006aaa:	b538      	push	{r3, r4, r5, lr}
 8006aac:	4604      	mov	r4, r0
 8006aae:	460d      	mov	r5, r1
 8006ab0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8006ab2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006ab6:	d002      	beq.n	8006abe <lftl_transaction_start+0x14>
 8006ab8:	6a03      	ldr	r3, [r0, #32]
 8006aba:	2007      	movs	r0, #7
 8006abc:	4798      	blx	r3
 8006abe:	6265      	str	r5, [r4, #36]	@ 0x24
 8006ac0:	6923      	ldr	r3, [r4, #16]
 8006ac2:	6822      	ldr	r2, [r4, #0]
 8006ac4:	6891      	ldr	r1, [r2, #8]
 8006ac6:	185a      	adds	r2, r3, r1
 8006ac8:	3a01      	subs	r2, #1
 8006aca:	fbb2 f2f1 	udiv	r2, r2, r1
 8006ace:	3207      	adds	r2, #7
 8006ad0:	08d2      	lsrs	r2, r2, #3
 8006ad2:	2100      	movs	r1, #0
 8006ad4:	4628      	mov	r0, r5
 8006ad6:	f000 fa7f 	bl	8006fd8 <memset>
 8006ada:	4620      	mov	r0, r4
 8006adc:	f7ff fcfb 	bl	80064d6 <next_slot>
 8006ae0:	4601      	mov	r1, r0
 8006ae2:	4620      	mov	r0, r4
 8006ae4:	f7ff fd0a 	bl	80064fc <erase_slot>
 8006ae8:	bd38      	pop	{r3, r4, r5, pc}

08006aea <lftl_transaction_write>:
 8006aea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aee:	b085      	sub	sp, #20
 8006af0:	4681      	mov	r9, r0
 8006af2:	9102      	str	r1, [sp, #8]
 8006af4:	9203      	str	r2, [sp, #12]
 8006af6:	469b      	mov	fp, r3
 8006af8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8006afa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006afe:	d00e      	beq.n	8006b1e <lftl_transaction_write+0x34>
 8006b00:	f8d9 3000 	ldr.w	r3, [r9]
 8006b04:	689a      	ldr	r2, [r3, #8]
 8006b06:	fbbb faf2 	udiv	sl, fp, r2
 8006b0a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8006b0e:	9902      	ldr	r1, [sp, #8]
 8006b10:	1acb      	subs	r3, r1, r3
 8006b12:	fbb3 f8f2 	udiv	r8, r3, r2
 8006b16:	f8d9 6024 	ldr.w	r6, [r9, #36]	@ 0x24
 8006b1a:	2400      	movs	r4, #0
 8006b1c:	e007      	b.n	8006b2e <lftl_transaction_write+0x44>
 8006b1e:	6a03      	ldr	r3, [r0, #32]
 8006b20:	2008      	movs	r0, #8
 8006b22:	4798      	blx	r3
 8006b24:	e7ec      	b.n	8006b00 <lftl_transaction_write+0x16>
 8006b26:	5d73      	ldrb	r3, [r6, r5]
 8006b28:	433b      	orrs	r3, r7
 8006b2a:	5573      	strb	r3, [r6, r5]
 8006b2c:	3401      	adds	r4, #1
 8006b2e:	4554      	cmp	r4, sl
 8006b30:	d20f      	bcs.n	8006b52 <lftl_transaction_write+0x68>
 8006b32:	eb04 0308 	add.w	r3, r4, r8
 8006b36:	08dd      	lsrs	r5, r3, #3
 8006b38:	f003 0207 	and.w	r2, r3, #7
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	4093      	lsls	r3, r2
 8006b40:	b2df      	uxtb	r7, r3
 8006b42:	5d72      	ldrb	r2, [r6, r5]
 8006b44:	4213      	tst	r3, r2
 8006b46:	d0ee      	beq.n	8006b26 <lftl_transaction_write+0x3c>
 8006b48:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8006b4c:	2009      	movs	r0, #9
 8006b4e:	4798      	blx	r3
 8006b50:	e7e9      	b.n	8006b26 <lftl_transaction_write+0x3c>
 8006b52:	2301      	movs	r3, #1
 8006b54:	9301      	str	r3, [sp, #4]
 8006b56:	9300      	str	r3, [sp, #0]
 8006b58:	465b      	mov	r3, fp
 8006b5a:	9a03      	ldr	r2, [sp, #12]
 8006b5c:	9902      	ldr	r1, [sp, #8]
 8006b5e:	4648      	mov	r0, r9
 8006b60:	f7ff fe18 	bl	8006794 <write_core>
 8006b64:	b005      	add	sp, #20
 8006b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006b6a <lftl_transaction_write_any>:
 8006b6a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b6e:	b085      	sub	sp, #20
 8006b70:	4682      	mov	sl, r0
 8006b72:	9102      	str	r1, [sp, #8]
 8006b74:	9203      	str	r2, [sp, #12]
 8006b76:	469b      	mov	fp, r3
 8006b78:	6803      	ldr	r3, [r0, #0]
 8006b7a:	689c      	ldr	r4, [r3, #8]
 8006b7c:	fbb1 f8f4 	udiv	r8, r1, r4
 8006b80:	fb04 f808 	mul.w	r8, r4, r8
 8006b84:	eba1 0708 	sub.w	r7, r1, r8
 8006b88:	fbbb f3f4 	udiv	r3, fp, r4
 8006b8c:	fb04 b313 	mls	r3, r4, r3, fp
 8006b90:	433b      	orrs	r3, r7
 8006b92:	d012      	beq.n	8006bba <lftl_transaction_write_any+0x50>
 8006b94:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8006b96:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006b9a:	d012      	beq.n	8006bc2 <lftl_transaction_write_any+0x58>
 8006b9c:	445f      	add	r7, fp
 8006b9e:	4427      	add	r7, r4
 8006ba0:	3f01      	subs	r7, #1
 8006ba2:	fbb7 f7f4 	udiv	r7, r7, r4
 8006ba6:	f8da 3004 	ldr.w	r3, [sl, #4]
 8006baa:	eba8 0803 	sub.w	r8, r8, r3
 8006bae:	fbb8 f8f4 	udiv	r8, r8, r4
 8006bb2:	f8da 6024 	ldr.w	r6, [sl, #36]	@ 0x24
 8006bb6:	2400      	movs	r4, #0
 8006bb8:	e00c      	b.n	8006bd4 <lftl_transaction_write_any+0x6a>
 8006bba:	465b      	mov	r3, fp
 8006bbc:	f7ff ff95 	bl	8006aea <lftl_transaction_write>
 8006bc0:	e025      	b.n	8006c0e <lftl_transaction_write_any+0xa4>
 8006bc2:	6a03      	ldr	r3, [r0, #32]
 8006bc4:	2008      	movs	r0, #8
 8006bc6:	4798      	blx	r3
 8006bc8:	e7e8      	b.n	8006b9c <lftl_transaction_write_any+0x32>
 8006bca:	5d73      	ldrb	r3, [r6, r5]
 8006bcc:	ea43 0309 	orr.w	r3, r3, r9
 8006bd0:	5573      	strb	r3, [r6, r5]
 8006bd2:	3401      	adds	r4, #1
 8006bd4:	42bc      	cmp	r4, r7
 8006bd6:	d210      	bcs.n	8006bfa <lftl_transaction_write_any+0x90>
 8006bd8:	eb04 0308 	add.w	r3, r4, r8
 8006bdc:	08dd      	lsrs	r5, r3, #3
 8006bde:	f003 0207 	and.w	r2, r3, #7
 8006be2:	2301      	movs	r3, #1
 8006be4:	4093      	lsls	r3, r2
 8006be6:	fa5f f983 	uxtb.w	r9, r3
 8006bea:	5d72      	ldrb	r2, [r6, r5]
 8006bec:	4213      	tst	r3, r2
 8006bee:	d0ec      	beq.n	8006bca <lftl_transaction_write_any+0x60>
 8006bf0:	f8da 3020 	ldr.w	r3, [sl, #32]
 8006bf4:	2009      	movs	r0, #9
 8006bf6:	4798      	blx	r3
 8006bf8:	e7e7      	b.n	8006bca <lftl_transaction_write_any+0x60>
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	9301      	str	r3, [sp, #4]
 8006bfe:	2301      	movs	r3, #1
 8006c00:	9300      	str	r3, [sp, #0]
 8006c02:	465b      	mov	r3, fp
 8006c04:	9a03      	ldr	r2, [sp, #12]
 8006c06:	9902      	ldr	r1, [sp, #8]
 8006c08:	4650      	mov	r0, sl
 8006c0a:	f7ff fdc3 	bl	8006794 <write_core>
 8006c0e:	b005      	add	sp, #20
 8006c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006c14 <lftl_transaction_commit>:
 8006c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c18:	b089      	sub	sp, #36	@ 0x24
 8006c1a:	af02      	add	r7, sp, #8
 8006c1c:	6138      	str	r0, [r7, #16]
 8006c1e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8006c20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006c24:	d011      	beq.n	8006c4a <lftl_transaction_commit+0x36>
 8006c26:	693a      	ldr	r2, [r7, #16]
 8006c28:	6813      	ldr	r3, [r2, #0]
 8006c2a:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8006c2e:	6913      	ldr	r3, [r2, #16]
 8006c30:	fbb3 fbf9 	udiv	fp, r3, r9
 8006c34:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8006c38:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8006c3a:	607b      	str	r3, [r7, #4]
 8006c3c:	f04f 0a00 	mov.w	sl, #0
 8006c40:	4656      	mov	r6, sl
 8006c42:	465b      	mov	r3, fp
 8006c44:	46d3      	mov	fp, sl
 8006c46:	469a      	mov	sl, r3
 8006c48:	e02f      	b.n	8006caa <lftl_transaction_commit+0x96>
 8006c4a:	6a03      	ldr	r3, [r0, #32]
 8006c4c:	2008      	movs	r0, #8
 8006c4e:	4798      	blx	r3
 8006c50:	e7e9      	b.n	8006c26 <lftl_transaction_commit+0x12>
 8006c52:	f8c7 d00c 	str.w	sp, [r7, #12]
 8006c56:	f109 0307 	add.w	r3, r9, #7
 8006c5a:	f023 0307 	bic.w	r3, r3, #7
 8006c5e:	ebad 0d03 	sub.w	sp, sp, r3
 8006c62:	ab02      	add	r3, sp, #8
 8006c64:	4619      	mov	r1, r3
 8006c66:	464b      	mov	r3, r9
 8006c68:	4642      	mov	r2, r8
 8006c6a:	6179      	str	r1, [r7, #20]
 8006c6c:	6938      	ldr	r0, [r7, #16]
 8006c6e:	f7ff ff0b 	bl	8006a88 <lftl_read>
 8006c72:	2301      	movs	r3, #1
 8006c74:	9301      	str	r3, [sp, #4]
 8006c76:	9300      	str	r3, [sp, #0]
 8006c78:	464b      	mov	r3, r9
 8006c7a:	697a      	ldr	r2, [r7, #20]
 8006c7c:	4641      	mov	r1, r8
 8006c7e:	6938      	ldr	r0, [r7, #16]
 8006c80:	f7ff fd88 	bl	8006794 <write_core>
 8006c84:	f8d7 d00c 	ldr.w	sp, [r7, #12]
 8006c88:	0064      	lsls	r4, r4, #1
 8006c8a:	b2e4      	uxtb	r4, r4
 8006c8c:	44c8      	add	r8, r9
 8006c8e:	3601      	adds	r6, #1
 8006c90:	45b2      	cmp	sl, r6
 8006c92:	d006      	beq.n	8006ca2 <lftl_transaction_commit+0x8e>
 8006c94:	3501      	adds	r5, #1
 8006c96:	2d07      	cmp	r5, #7
 8006c98:	d803      	bhi.n	8006ca2 <lftl_transaction_commit+0x8e>
 8006c9a:	ea14 0f0b 	tst.w	r4, fp
 8006c9e:	d1f3      	bne.n	8006c88 <lftl_transaction_commit+0x74>
 8006ca0:	e7d7      	b.n	8006c52 <lftl_transaction_commit+0x3e>
 8006ca2:	f8d7 b008 	ldr.w	fp, [r7, #8]
 8006ca6:	f10b 0b01 	add.w	fp, fp, #1
 8006caa:	f10a 0307 	add.w	r3, sl, #7
 8006cae:	ebbb 0fd3 	cmp.w	fp, r3, lsr #3
 8006cb2:	d208      	bcs.n	8006cc6 <lftl_transaction_commit+0xb2>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f813 300b 	ldrb.w	r3, [r3, fp]
 8006cba:	2500      	movs	r5, #0
 8006cbc:	2401      	movs	r4, #1
 8006cbe:	f8c7 b008 	str.w	fp, [r7, #8]
 8006cc2:	469b      	mov	fp, r3
 8006cc4:	e7e7      	b.n	8006c96 <lftl_transaction_commit+0x82>
 8006cc6:	693e      	ldr	r6, [r7, #16]
 8006cc8:	4630      	mov	r0, r6
 8006cca:	f7ff fc04 	bl	80064d6 <next_slot>
 8006cce:	4604      	mov	r4, r0
 8006cd0:	4601      	mov	r1, r0
 8006cd2:	4630      	mov	r0, r6
 8006cd4:	f7ff fb15 	bl	8006302 <slot_base>
 8006cd8:	4605      	mov	r5, r0
 8006cda:	4630      	mov	r0, r6
 8006cdc:	f7ff fbf2 	bl	80064c4 <get_current_slot_index>
 8006ce0:	4601      	mov	r1, r0
 8006ce2:	4630      	mov	r0, r6
 8006ce4:	f7ff fb47 	bl	8006376 <get_slot_version>
 8006ce8:	1c42      	adds	r2, r0, #1
 8006cea:	4621      	mov	r1, r4
 8006cec:	4630      	mov	r0, r6
 8006cee:	f7ff fc51 	bl	8006594 <write_meta>
 8006cf2:	60f5      	str	r5, [r6, #12]
 8006cf4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006cf8:	6273      	str	r3, [r6, #36]	@ 0x24
 8006cfa:	371c      	adds	r7, #28
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006d02 <lftl_transaction_abort>:
 8006d02:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006d06:	6243      	str	r3, [r0, #36]	@ 0x24
 8006d08:	4770      	bx	lr

08006d0a <lftl_transaction_read>:
 8006d0a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d0e:	4607      	mov	r7, r0
 8006d10:	460d      	mov	r5, r1
 8006d12:	4691      	mov	r9, r2
 8006d14:	461c      	mov	r4, r3
 8006d16:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8006d18:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006d1c:	d015      	beq.n	8006d4a <lftl_transaction_read+0x40>
 8006d1e:	b3bc      	cbz	r4, 8006d90 <lftl_transaction_read+0x86>
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	689e      	ldr	r6, [r3, #8]
 8006d24:	fbb4 f8f6 	udiv	r8, r4, r6
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	eba9 0903 	sub.w	r9, r9, r3
 8006d2e:	fbb9 f9f6 	udiv	r9, r9, r6
 8006d32:	f8d7 a024 	ldr.w	sl, [r7, #36]	@ 0x24
 8006d36:	4638      	mov	r0, r7
 8006d38:	f7ff fbcd 	bl	80064d6 <next_slot>
 8006d3c:	4601      	mov	r1, r0
 8006d3e:	4638      	mov	r0, r7
 8006d40:	f7ff fadf 	bl	8006302 <slot_base>
 8006d44:	4683      	mov	fp, r0
 8006d46:	2400      	movs	r4, #0
 8006d48:	e00d      	b.n	8006d66 <lftl_transaction_read+0x5c>
 8006d4a:	6a03      	ldr	r3, [r0, #32]
 8006d4c:	2008      	movs	r0, #8
 8006d4e:	4798      	blx	r3
 8006d50:	e7e5      	b.n	8006d1e <lftl_transaction_read+0x14>
 8006d52:	68f9      	ldr	r1, [r7, #12]
 8006d54:	4633      	mov	r3, r6
 8006d56:	fb02 1206 	mla	r2, r2, r6, r1
 8006d5a:	4629      	mov	r1, r5
 8006d5c:	4638      	mov	r0, r7
 8006d5e:	f7ff fa5e 	bl	800621e <nvm_read>
 8006d62:	4435      	add	r5, r6
 8006d64:	3401      	adds	r4, #1
 8006d66:	4544      	cmp	r4, r8
 8006d68:	d212      	bcs.n	8006d90 <lftl_transaction_read+0x86>
 8006d6a:	eb04 0209 	add.w	r2, r4, r9
 8006d6e:	08d1      	lsrs	r1, r2, #3
 8006d70:	f002 0007 	and.w	r0, r2, #7
 8006d74:	2301      	movs	r3, #1
 8006d76:	4083      	lsls	r3, r0
 8006d78:	f81a 1001 	ldrb.w	r1, [sl, r1]
 8006d7c:	420b      	tst	r3, r1
 8006d7e:	d0e8      	beq.n	8006d52 <lftl_transaction_read+0x48>
 8006d80:	4633      	mov	r3, r6
 8006d82:	fb02 b206 	mla	r2, r2, r6, fp
 8006d86:	4629      	mov	r1, r5
 8006d88:	4638      	mov	r0, r7
 8006d8a:	f7ff fa48 	bl	800621e <nvm_read>
 8006d8e:	e7e8      	b.n	8006d62 <lftl_transaction_read+0x58>
 8006d90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006d94 <lftl_write>:
 8006d94:	b16b      	cbz	r3, 8006db2 <lftl_write+0x1e>
 8006d96:	b508      	push	{r3, lr}
 8006d98:	469c      	mov	ip, r3
 8006d9a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8006d9c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006da0:	d003      	beq.n	8006daa <lftl_write+0x16>
 8006da2:	4663      	mov	r3, ip
 8006da4:	f7ff fea1 	bl	8006aea <lftl_transaction_write>
 8006da8:	bd08      	pop	{r3, pc}
 8006daa:	4663      	mov	r3, ip
 8006dac:	f7ff fe5e 	bl	8006a6c <lftl_basic_write>
 8006db0:	e7fa      	b.n	8006da8 <lftl_write+0x14>
 8006db2:	4770      	bx	lr

08006db4 <lftl_read_newer>:
 8006db4:	b16b      	cbz	r3, 8006dd2 <lftl_read_newer+0x1e>
 8006db6:	b508      	push	{r3, lr}
 8006db8:	469c      	mov	ip, r3
 8006dba:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8006dbc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006dc0:	d003      	beq.n	8006dca <lftl_read_newer+0x16>
 8006dc2:	4663      	mov	r3, ip
 8006dc4:	f7ff ffa1 	bl	8006d0a <lftl_transaction_read>
 8006dc8:	bd08      	pop	{r3, pc}
 8006dca:	4663      	mov	r3, ip
 8006dcc:	f7ff fe5c 	bl	8006a88 <lftl_read>
 8006dd0:	e7fa      	b.n	8006dc8 <lftl_read_newer+0x14>
 8006dd2:	4770      	bx	lr

08006dd4 <lftl_memread>:
 8006dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dd6:	4606      	mov	r6, r0
 8006dd8:	460c      	mov	r4, r1
 8006dda:	4617      	mov	r7, r2
 8006ddc:	4608      	mov	r0, r1
 8006dde:	f7ff fb43 	bl	8006468 <is_in_any_nvm>
 8006de2:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 8006de6:	d00b      	beq.n	8006e00 <lftl_memread+0x2c>
 8006de8:	4605      	mov	r5, r0
 8006dea:	4621      	mov	r1, r4
 8006dec:	f7ff fb11 	bl	8006412 <is_in_data>
 8006df0:	b160      	cbz	r0, 8006e0c <lftl_memread+0x38>
 8006df2:	463b      	mov	r3, r7
 8006df4:	4622      	mov	r2, r4
 8006df6:	4631      	mov	r1, r6
 8006df8:	4628      	mov	r0, r5
 8006dfa:	f7ff fe45 	bl	8006a88 <lftl_read>
 8006dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e00:	463a      	mov	r2, r7
 8006e02:	4621      	mov	r1, r4
 8006e04:	4630      	mov	r0, r6
 8006e06:	f000 f919 	bl	800703c <memcpy>
 8006e0a:	e7f8      	b.n	8006dfe <lftl_memread+0x2a>
 8006e0c:	463b      	mov	r3, r7
 8006e0e:	4622      	mov	r2, r4
 8006e10:	4631      	mov	r1, r6
 8006e12:	4628      	mov	r0, r5
 8006e14:	f7ff fa03 	bl	800621e <nvm_read>
 8006e18:	e7f1      	b.n	8006dfe <lftl_memread+0x2a>
	...

08006e1c <bank_swapped>:
 8006e1c:	4b03      	ldr	r3, [pc, #12]	@ (8006e2c <bank_swapped+0x10>)
 8006e1e:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8006e20:	f400 1080 	and.w	r0, r0, #1048576	@ 0x100000
 8006e24:	3800      	subs	r0, #0
 8006e26:	bf18      	it	ne
 8006e28:	2001      	movne	r0, #1
 8006e2a:	4770      	bx	lr
 8006e2c:	40022000 	.word	0x40022000

08006e30 <icache_is_enabled>:
 8006e30:	4b02      	ldr	r3, [pc, #8]	@ (8006e3c <icache_is_enabled+0xc>)
 8006e32:	6818      	ldr	r0, [r3, #0]
 8006e34:	f000 0001 	and.w	r0, r0, #1
 8006e38:	4770      	bx	lr
 8006e3a:	bf00      	nop
 8006e3c:	40030400 	.word	0x40030400

08006e40 <icache_disable>:
 8006e40:	4b06      	ldr	r3, [pc, #24]	@ (8006e5c <icache_disable+0x1c>)
 8006e42:	2202      	movs	r2, #2
 8006e44:	60da      	str	r2, [r3, #12]
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	f022 0201 	bic.w	r2, r2, #1
 8006e4c:	601a      	str	r2, [r3, #0]
 8006e4e:	4b03      	ldr	r3, [pc, #12]	@ (8006e5c <icache_disable+0x1c>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f013 0f01 	tst.w	r3, #1
 8006e56:	d1fa      	bne.n	8006e4e <icache_disable+0xe>
 8006e58:	4770      	bx	lr
 8006e5a:	bf00      	nop
 8006e5c:	40030400 	.word	0x40030400

08006e60 <icache_enable>:
 8006e60:	4a02      	ldr	r2, [pc, #8]	@ (8006e6c <icache_enable+0xc>)
 8006e62:	6813      	ldr	r3, [r2, #0]
 8006e64:	f043 0301 	orr.w	r3, r3, #1
 8006e68:	6013      	str	r3, [r2, #0]
 8006e6a:	4770      	bx	lr
 8006e6c:	40030400 	.word	0x40030400

08006e70 <nvm_read>:
 8006e70:	b508      	push	{r3, lr}
 8006e72:	f000 f8e3 	bl	800703c <memcpy>
 8006e76:	2000      	movs	r0, #0
 8006e78:	bd08      	pop	{r3, pc}
	...

08006e7c <nvm_erase>:
 8006e7c:	2900      	cmp	r1, #0
 8006e7e:	d039      	beq.n	8006ef4 <nvm_erase+0x78>
 8006e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e82:	4604      	mov	r4, r0
 8006e84:	460e      	mov	r6, r1
 8006e86:	034b      	lsls	r3, r1, #13
 8006e88:	4605      	mov	r5, r0
 8006e8a:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
 8006e8e:	d333      	bcc.n	8006ef8 <nvm_erase+0x7c>
 8006e90:	18c2      	adds	r2, r0, r3
 8006e92:	4b1c      	ldr	r3, [pc, #112]	@ (8006f04 <nvm_erase+0x88>)
 8006e94:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8006e98:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8006e9c:	428b      	cmp	r3, r1
 8006e9e:	d004      	beq.n	8006eaa <nvm_erase+0x2e>
 8006ea0:	b1a3      	cbz	r3, 8006ecc <nvm_erase+0x50>
 8006ea2:	029b      	lsls	r3, r3, #10
 8006ea4:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8006ea8:	e001      	b.n	8006eae <nvm_erase+0x32>
 8006eaa:	f04f 6304 	mov.w	r3, #138412032	@ 0x8400000
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d824      	bhi.n	8006efc <nvm_erase+0x80>
 8006eb2:	f3c5 050c 	ubfx	r5, r5, #0, #13
 8006eb6:	bb1d      	cbnz	r5, 8006f00 <nvm_erase+0x84>
 8006eb8:	f3ef 8710 	mrs	r7, PRIMASK
 8006ebc:	b672      	cpsid	i
 8006ebe:	4b12      	ldr	r3, [pc, #72]	@ (8006f08 <nvm_erase+0x8c>)
 8006ec0:	4a12      	ldr	r2, [pc, #72]	@ (8006f0c <nvm_erase+0x90>)
 8006ec2:	609a      	str	r2, [r3, #8]
 8006ec4:	f102 3288 	add.w	r2, r2, #2290649224	@ 0x88888888
 8006ec8:	609a      	str	r2, [r3, #8]
 8006eca:	e008      	b.n	8006ede <nvm_erase+0x62>
 8006ecc:	f04f 6304 	mov.w	r3, #138412032	@ 0x8400000
 8006ed0:	e7ed      	b.n	8006eae <nvm_erase+0x32>
 8006ed2:	4620      	mov	r0, r4
 8006ed4:	f001 f9a4 	bl	8008220 <__nvm_ll_erase_page_veneer>
 8006ed8:	f504 5400 	add.w	r4, r4, #8192	@ 0x2000
 8006edc:	3501      	adds	r5, #1
 8006ede:	42b5      	cmp	r5, r6
 8006ee0:	d3f7      	bcc.n	8006ed2 <nvm_erase+0x56>
 8006ee2:	4a09      	ldr	r2, [pc, #36]	@ (8006f08 <nvm_erase+0x8c>)
 8006ee4:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8006ee6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006eea:	6293      	str	r3, [r2, #40]	@ 0x28
 8006eec:	f387 8810 	msr	PRIMASK, r7
 8006ef0:	2000      	movs	r0, #0
 8006ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ef4:	2000      	movs	r0, #0
 8006ef6:	4770      	bx	lr
 8006ef8:	2001      	movs	r0, #1
 8006efa:	e7fa      	b.n	8006ef2 <nvm_erase+0x76>
 8006efc:	2002      	movs	r0, #2
 8006efe:	e7f8      	b.n	8006ef2 <nvm_erase+0x76>
 8006f00:	2003      	movs	r0, #3
 8006f02:	e7f6      	b.n	8006ef2 <nvm_erase+0x76>
 8006f04:	0bfa0700 	.word	0x0bfa0700
 8006f08:	40022000 	.word	0x40022000
 8006f0c:	45670123 	.word	0x45670123

08006f10 <nvm_write>:
 8006f10:	2a00      	cmp	r2, #0
 8006f12:	d03f      	beq.n	8006f94 <nvm_write+0x84>
 8006f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f18:	4604      	mov	r4, r0
 8006f1a:	460d      	mov	r5, r1
 8006f1c:	4616      	mov	r6, r2
 8006f1e:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
 8006f22:	d339      	bcc.n	8006f98 <nvm_write+0x88>
 8006f24:	1882      	adds	r2, r0, r2
 8006f26:	4b21      	ldr	r3, [pc, #132]	@ (8006fac <nvm_write+0x9c>)
 8006f28:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8006f2c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8006f30:	428b      	cmp	r3, r1
 8006f32:	d004      	beq.n	8006f3e <nvm_write+0x2e>
 8006f34:	b34b      	cbz	r3, 8006f8a <nvm_write+0x7a>
 8006f36:	029b      	lsls	r3, r3, #10
 8006f38:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8006f3c:	e001      	b.n	8006f42 <nvm_write+0x32>
 8006f3e:	f04f 6304 	mov.w	r3, #138412032	@ 0x8400000
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d82b      	bhi.n	8006f9e <nvm_write+0x8e>
 8006f46:	f014 0f0f 	tst.w	r4, #15
 8006f4a:	d12a      	bne.n	8006fa2 <nvm_write+0x92>
 8006f4c:	f016 0f0f 	tst.w	r6, #15
 8006f50:	d129      	bne.n	8006fa6 <nvm_write+0x96>
 8006f52:	f3ef 8810 	mrs	r8, PRIMASK
 8006f56:	b672      	cpsid	i
 8006f58:	4f15      	ldr	r7, [pc, #84]	@ (8006fb0 <nvm_write+0xa0>)
 8006f5a:	4b16      	ldr	r3, [pc, #88]	@ (8006fb4 <nvm_write+0xa4>)
 8006f5c:	60bb      	str	r3, [r7, #8]
 8006f5e:	f103 3388 	add.w	r3, r3, #2290649224	@ 0x88888888
 8006f62:	60bb      	str	r3, [r7, #8]
 8006f64:	08b2      	lsrs	r2, r6, #2
 8006f66:	4629      	mov	r1, r5
 8006f68:	4620      	mov	r0, r4
 8006f6a:	f001 f95d 	bl	8008228 <__nvm_ll_write_veneer>
 8006f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f70:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006f74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f76:	4632      	mov	r2, r6
 8006f78:	4629      	mov	r1, r5
 8006f7a:	4620      	mov	r0, r4
 8006f7c:	f000 f81c 	bl	8006fb8 <memcmp>
 8006f80:	b130      	cbz	r0, 8006f90 <nvm_write+0x80>
 8006f82:	2005      	movs	r0, #5
 8006f84:	f388 8810 	msr	PRIMASK, r8
 8006f88:	e007      	b.n	8006f9a <nvm_write+0x8a>
 8006f8a:	f04f 6304 	mov.w	r3, #138412032	@ 0x8400000
 8006f8e:	e7d8      	b.n	8006f42 <nvm_write+0x32>
 8006f90:	2000      	movs	r0, #0
 8006f92:	e7f7      	b.n	8006f84 <nvm_write+0x74>
 8006f94:	2000      	movs	r0, #0
 8006f96:	4770      	bx	lr
 8006f98:	2001      	movs	r0, #1
 8006f9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f9e:	2002      	movs	r0, #2
 8006fa0:	e7fb      	b.n	8006f9a <nvm_write+0x8a>
 8006fa2:	2003      	movs	r0, #3
 8006fa4:	e7f9      	b.n	8006f9a <nvm_write+0x8a>
 8006fa6:	2004      	movs	r0, #4
 8006fa8:	e7f7      	b.n	8006f9a <nvm_write+0x8a>
 8006faa:	bf00      	nop
 8006fac:	0bfa0700 	.word	0x0bfa0700
 8006fb0:	40022000 	.word	0x40022000
 8006fb4:	45670123 	.word	0x45670123

08006fb8 <memcmp>:
 8006fb8:	3901      	subs	r1, #1
 8006fba:	4402      	add	r2, r0
 8006fbc:	b510      	push	{r4, lr}
 8006fbe:	4290      	cmp	r0, r2
 8006fc0:	d101      	bne.n	8006fc6 <memcmp+0xe>
 8006fc2:	2000      	movs	r0, #0
 8006fc4:	e005      	b.n	8006fd2 <memcmp+0x1a>
 8006fc6:	7803      	ldrb	r3, [r0, #0]
 8006fc8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006fcc:	42a3      	cmp	r3, r4
 8006fce:	d001      	beq.n	8006fd4 <memcmp+0x1c>
 8006fd0:	1b18      	subs	r0, r3, r4
 8006fd2:	bd10      	pop	{r4, pc}
 8006fd4:	3001      	adds	r0, #1
 8006fd6:	e7f2      	b.n	8006fbe <memcmp+0x6>

08006fd8 <memset>:
 8006fd8:	4402      	add	r2, r0
 8006fda:	4603      	mov	r3, r0
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d100      	bne.n	8006fe2 <memset+0xa>
 8006fe0:	4770      	bx	lr
 8006fe2:	f803 1b01 	strb.w	r1, [r3], #1
 8006fe6:	e7f9      	b.n	8006fdc <memset+0x4>

08006fe8 <__errno>:
 8006fe8:	4b01      	ldr	r3, [pc, #4]	@ (8006ff0 <__errno+0x8>)
 8006fea:	6818      	ldr	r0, [r3, #0]
 8006fec:	4770      	bx	lr
 8006fee:	bf00      	nop
 8006ff0:	20000098 	.word	0x20000098

08006ff4 <__libc_init_array>:
 8006ff4:	b570      	push	{r4, r5, r6, lr}
 8006ff6:	4b0d      	ldr	r3, [pc, #52]	@ (800702c <__libc_init_array+0x38>)
 8006ff8:	2600      	movs	r6, #0
 8006ffa:	4d0d      	ldr	r5, [pc, #52]	@ (8007030 <__libc_init_array+0x3c>)
 8006ffc:	1b5b      	subs	r3, r3, r5
 8006ffe:	109c      	asrs	r4, r3, #2
 8007000:	42a6      	cmp	r6, r4
 8007002:	d109      	bne.n	8007018 <__libc_init_array+0x24>
 8007004:	4d0b      	ldr	r5, [pc, #44]	@ (8007034 <__libc_init_array+0x40>)
 8007006:	f001 f8fd 	bl	8008204 <_init>
 800700a:	4b0b      	ldr	r3, [pc, #44]	@ (8007038 <__libc_init_array+0x44>)
 800700c:	2600      	movs	r6, #0
 800700e:	1b5b      	subs	r3, r3, r5
 8007010:	109c      	asrs	r4, r3, #2
 8007012:	42a6      	cmp	r6, r4
 8007014:	d105      	bne.n	8007022 <__libc_init_array+0x2e>
 8007016:	bd70      	pop	{r4, r5, r6, pc}
 8007018:	f855 3b04 	ldr.w	r3, [r5], #4
 800701c:	3601      	adds	r6, #1
 800701e:	4798      	blx	r3
 8007020:	e7ee      	b.n	8007000 <__libc_init_array+0xc>
 8007022:	f855 3b04 	ldr.w	r3, [r5], #4
 8007026:	3601      	adds	r6, #1
 8007028:	4798      	blx	r3
 800702a:	e7f2      	b.n	8007012 <__libc_init_array+0x1e>
 800702c:	080083d0 	.word	0x080083d0
 8007030:	080083d0 	.word	0x080083d0
 8007034:	080083d0 	.word	0x080083d0
 8007038:	080083d4 	.word	0x080083d4

0800703c <memcpy>:
 800703c:	440a      	add	r2, r1
 800703e:	1e43      	subs	r3, r0, #1
 8007040:	4291      	cmp	r1, r2
 8007042:	d100      	bne.n	8007046 <memcpy+0xa>
 8007044:	4770      	bx	lr
 8007046:	b510      	push	{r4, lr}
 8007048:	f811 4b01 	ldrb.w	r4, [r1], #1
 800704c:	4291      	cmp	r1, r2
 800704e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007052:	d1f9      	bne.n	8007048 <memcpy+0xc>
 8007054:	bd10      	pop	{r4, pc}
	...

08007058 <__udivmoddi4>:
 8007058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800705c:	468c      	mov	ip, r1
 800705e:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8007060:	4604      	mov	r4, r0
 8007062:	460f      	mov	r7, r1
 8007064:	2b00      	cmp	r3, #0
 8007066:	d148      	bne.n	80070fa <__udivmoddi4+0xa2>
 8007068:	428a      	cmp	r2, r1
 800706a:	4615      	mov	r5, r2
 800706c:	d95e      	bls.n	800712c <__udivmoddi4+0xd4>
 800706e:	fab2 f382 	clz	r3, r2
 8007072:	b13b      	cbz	r3, 8007084 <__udivmoddi4+0x2c>
 8007074:	f1c3 0220 	rsb	r2, r3, #32
 8007078:	409f      	lsls	r7, r3
 800707a:	409d      	lsls	r5, r3
 800707c:	409c      	lsls	r4, r3
 800707e:	fa20 f202 	lsr.w	r2, r0, r2
 8007082:	4317      	orrs	r7, r2
 8007084:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8007088:	fa1f fc85 	uxth.w	ip, r5
 800708c:	0c22      	lsrs	r2, r4, #16
 800708e:	fbb7 f1fe 	udiv	r1, r7, lr
 8007092:	fb0e 7711 	mls	r7, lr, r1, r7
 8007096:	fb01 f00c 	mul.w	r0, r1, ip
 800709a:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800709e:	4290      	cmp	r0, r2
 80070a0:	d907      	bls.n	80070b2 <__udivmoddi4+0x5a>
 80070a2:	18aa      	adds	r2, r5, r2
 80070a4:	f101 37ff 	add.w	r7, r1, #4294967295	@ 0xffffffff
 80070a8:	d202      	bcs.n	80070b0 <__udivmoddi4+0x58>
 80070aa:	4290      	cmp	r0, r2
 80070ac:	f200 8158 	bhi.w	8007360 <__udivmoddi4+0x308>
 80070b0:	4639      	mov	r1, r7
 80070b2:	1a12      	subs	r2, r2, r0
 80070b4:	b2a4      	uxth	r4, r4
 80070b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80070ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80070be:	fb00 fc0c 	mul.w	ip, r0, ip
 80070c2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80070c6:	45a4      	cmp	ip, r4
 80070c8:	d90b      	bls.n	80070e2 <__udivmoddi4+0x8a>
 80070ca:	192c      	adds	r4, r5, r4
 80070cc:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80070d0:	bf2c      	ite	cs
 80070d2:	2701      	movcs	r7, #1
 80070d4:	2700      	movcc	r7, #0
 80070d6:	45a4      	cmp	ip, r4
 80070d8:	d902      	bls.n	80070e0 <__udivmoddi4+0x88>
 80070da:	2f00      	cmp	r7, #0
 80070dc:	f000 8143 	beq.w	8007366 <__udivmoddi4+0x30e>
 80070e0:	4610      	mov	r0, r2
 80070e2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80070e6:	eba4 040c 	sub.w	r4, r4, ip
 80070ea:	2100      	movs	r1, #0
 80070ec:	b11e      	cbz	r6, 80070f6 <__udivmoddi4+0x9e>
 80070ee:	40dc      	lsrs	r4, r3
 80070f0:	2300      	movs	r3, #0
 80070f2:	e9c6 4300 	strd	r4, r3, [r6]
 80070f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070fa:	428b      	cmp	r3, r1
 80070fc:	d906      	bls.n	800710c <__udivmoddi4+0xb4>
 80070fe:	b10e      	cbz	r6, 8007104 <__udivmoddi4+0xac>
 8007100:	e9c6 0100 	strd	r0, r1, [r6]
 8007104:	2100      	movs	r1, #0
 8007106:	4608      	mov	r0, r1
 8007108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800710c:	fab3 f183 	clz	r1, r3
 8007110:	2900      	cmp	r1, #0
 8007112:	d151      	bne.n	80071b8 <__udivmoddi4+0x160>
 8007114:	4563      	cmp	r3, ip
 8007116:	f0c0 8116 	bcc.w	8007346 <__udivmoddi4+0x2ee>
 800711a:	4282      	cmp	r2, r0
 800711c:	f240 8113 	bls.w	8007346 <__udivmoddi4+0x2ee>
 8007120:	4608      	mov	r0, r1
 8007122:	2e00      	cmp	r6, #0
 8007124:	d0e7      	beq.n	80070f6 <__udivmoddi4+0x9e>
 8007126:	e9c6 4700 	strd	r4, r7, [r6]
 800712a:	e7e4      	b.n	80070f6 <__udivmoddi4+0x9e>
 800712c:	2a00      	cmp	r2, #0
 800712e:	f000 80af 	beq.w	8007290 <__udivmoddi4+0x238>
 8007132:	fab2 f382 	clz	r3, r2
 8007136:	2b00      	cmp	r3, #0
 8007138:	f040 80c2 	bne.w	80072c0 <__udivmoddi4+0x268>
 800713c:	1a8a      	subs	r2, r1, r2
 800713e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8007142:	b2af      	uxth	r7, r5
 8007144:	2101      	movs	r1, #1
 8007146:	0c20      	lsrs	r0, r4, #16
 8007148:	fbb2 fcfe 	udiv	ip, r2, lr
 800714c:	fb0e 221c 	mls	r2, lr, ip, r2
 8007150:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 8007154:	fb07 f00c 	mul.w	r0, r7, ip
 8007158:	4290      	cmp	r0, r2
 800715a:	d90e      	bls.n	800717a <__udivmoddi4+0x122>
 800715c:	18aa      	adds	r2, r5, r2
 800715e:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8007162:	bf2c      	ite	cs
 8007164:	f04f 0901 	movcs.w	r9, #1
 8007168:	f04f 0900 	movcc.w	r9, #0
 800716c:	4290      	cmp	r0, r2
 800716e:	d903      	bls.n	8007178 <__udivmoddi4+0x120>
 8007170:	f1b9 0f00 	cmp.w	r9, #0
 8007174:	f000 80f0 	beq.w	8007358 <__udivmoddi4+0x300>
 8007178:	46c4      	mov	ip, r8
 800717a:	1a12      	subs	r2, r2, r0
 800717c:	b2a4      	uxth	r4, r4
 800717e:	fbb2 f0fe 	udiv	r0, r2, lr
 8007182:	fb0e 2210 	mls	r2, lr, r0, r2
 8007186:	fb00 f707 	mul.w	r7, r0, r7
 800718a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800718e:	42a7      	cmp	r7, r4
 8007190:	d90e      	bls.n	80071b0 <__udivmoddi4+0x158>
 8007192:	192c      	adds	r4, r5, r4
 8007194:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8007198:	bf2c      	ite	cs
 800719a:	f04f 0e01 	movcs.w	lr, #1
 800719e:	f04f 0e00 	movcc.w	lr, #0
 80071a2:	42a7      	cmp	r7, r4
 80071a4:	d903      	bls.n	80071ae <__udivmoddi4+0x156>
 80071a6:	f1be 0f00 	cmp.w	lr, #0
 80071aa:	f000 80d2 	beq.w	8007352 <__udivmoddi4+0x2fa>
 80071ae:	4610      	mov	r0, r2
 80071b0:	1be4      	subs	r4, r4, r7
 80071b2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80071b6:	e799      	b.n	80070ec <__udivmoddi4+0x94>
 80071b8:	f1c1 0520 	rsb	r5, r1, #32
 80071bc:	408b      	lsls	r3, r1
 80071be:	fa0c f401 	lsl.w	r4, ip, r1
 80071c2:	fa00 f901 	lsl.w	r9, r0, r1
 80071c6:	fa22 f705 	lsr.w	r7, r2, r5
 80071ca:	fa2c fc05 	lsr.w	ip, ip, r5
 80071ce:	408a      	lsls	r2, r1
 80071d0:	431f      	orrs	r7, r3
 80071d2:	fa20 f305 	lsr.w	r3, r0, r5
 80071d6:	0c38      	lsrs	r0, r7, #16
 80071d8:	4323      	orrs	r3, r4
 80071da:	fa1f fe87 	uxth.w	lr, r7
 80071de:	0c1c      	lsrs	r4, r3, #16
 80071e0:	fbbc f8f0 	udiv	r8, ip, r0
 80071e4:	fb00 cc18 	mls	ip, r0, r8, ip
 80071e8:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 80071ec:	fb08 fc0e 	mul.w	ip, r8, lr
 80071f0:	45a4      	cmp	ip, r4
 80071f2:	d90e      	bls.n	8007212 <__udivmoddi4+0x1ba>
 80071f4:	193c      	adds	r4, r7, r4
 80071f6:	f108 3aff 	add.w	sl, r8, #4294967295	@ 0xffffffff
 80071fa:	bf2c      	ite	cs
 80071fc:	f04f 0b01 	movcs.w	fp, #1
 8007200:	f04f 0b00 	movcc.w	fp, #0
 8007204:	45a4      	cmp	ip, r4
 8007206:	d903      	bls.n	8007210 <__udivmoddi4+0x1b8>
 8007208:	f1bb 0f00 	cmp.w	fp, #0
 800720c:	f000 80b8 	beq.w	8007380 <__udivmoddi4+0x328>
 8007210:	46d0      	mov	r8, sl
 8007212:	eba4 040c 	sub.w	r4, r4, ip
 8007216:	fa1f fc83 	uxth.w	ip, r3
 800721a:	fbb4 f3f0 	udiv	r3, r4, r0
 800721e:	fb00 4413 	mls	r4, r0, r3, r4
 8007222:	fb03 fe0e 	mul.w	lr, r3, lr
 8007226:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
 800722a:	45a6      	cmp	lr, r4
 800722c:	d90e      	bls.n	800724c <__udivmoddi4+0x1f4>
 800722e:	193c      	adds	r4, r7, r4
 8007230:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8007234:	bf2c      	ite	cs
 8007236:	f04f 0c01 	movcs.w	ip, #1
 800723a:	f04f 0c00 	movcc.w	ip, #0
 800723e:	45a6      	cmp	lr, r4
 8007240:	d903      	bls.n	800724a <__udivmoddi4+0x1f2>
 8007242:	f1bc 0f00 	cmp.w	ip, #0
 8007246:	f000 809f 	beq.w	8007388 <__udivmoddi4+0x330>
 800724a:	4603      	mov	r3, r0
 800724c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8007250:	eba4 040e 	sub.w	r4, r4, lr
 8007254:	fba0 ec02 	umull	lr, ip, r0, r2
 8007258:	4564      	cmp	r4, ip
 800725a:	4673      	mov	r3, lr
 800725c:	46e0      	mov	r8, ip
 800725e:	d302      	bcc.n	8007266 <__udivmoddi4+0x20e>
 8007260:	d107      	bne.n	8007272 <__udivmoddi4+0x21a>
 8007262:	45f1      	cmp	r9, lr
 8007264:	d205      	bcs.n	8007272 <__udivmoddi4+0x21a>
 8007266:	ebbe 0302 	subs.w	r3, lr, r2
 800726a:	eb6c 0c07 	sbc.w	ip, ip, r7
 800726e:	3801      	subs	r0, #1
 8007270:	46e0      	mov	r8, ip
 8007272:	b15e      	cbz	r6, 800728c <__udivmoddi4+0x234>
 8007274:	ebb9 0203 	subs.w	r2, r9, r3
 8007278:	eb64 0408 	sbc.w	r4, r4, r8
 800727c:	fa04 f505 	lsl.w	r5, r4, r5
 8007280:	fa22 f301 	lsr.w	r3, r2, r1
 8007284:	40cc      	lsrs	r4, r1
 8007286:	431d      	orrs	r5, r3
 8007288:	e9c6 5400 	strd	r5, r4, [r6]
 800728c:	2100      	movs	r1, #0
 800728e:	e732      	b.n	80070f6 <__udivmoddi4+0x9e>
 8007290:	0842      	lsrs	r2, r0, #1
 8007292:	462f      	mov	r7, r5
 8007294:	084b      	lsrs	r3, r1, #1
 8007296:	46ac      	mov	ip, r5
 8007298:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800729c:	46ae      	mov	lr, r5
 800729e:	07c4      	lsls	r4, r0, #31
 80072a0:	0c11      	lsrs	r1, r2, #16
 80072a2:	b292      	uxth	r2, r2
 80072a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80072a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80072ac:	fbb1 f1f5 	udiv	r1, r1, r5
 80072b0:	fbb3 f0f5 	udiv	r0, r3, r5
 80072b4:	231f      	movs	r3, #31
 80072b6:	eba2 020c 	sub.w	r2, r2, ip
 80072ba:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80072be:	e742      	b.n	8007146 <__udivmoddi4+0xee>
 80072c0:	409d      	lsls	r5, r3
 80072c2:	f1c3 0220 	rsb	r2, r3, #32
 80072c6:	4099      	lsls	r1, r3
 80072c8:	409c      	lsls	r4, r3
 80072ca:	fa2c fc02 	lsr.w	ip, ip, r2
 80072ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80072d2:	fa20 f202 	lsr.w	r2, r0, r2
 80072d6:	b2af      	uxth	r7, r5
 80072d8:	fbbc f8fe 	udiv	r8, ip, lr
 80072dc:	430a      	orrs	r2, r1
 80072de:	fb0e cc18 	mls	ip, lr, r8, ip
 80072e2:	0c11      	lsrs	r1, r2, #16
 80072e4:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80072e8:	fb08 fc07 	mul.w	ip, r8, r7
 80072ec:	458c      	cmp	ip, r1
 80072ee:	d950      	bls.n	8007392 <__udivmoddi4+0x33a>
 80072f0:	1869      	adds	r1, r5, r1
 80072f2:	f108 30ff 	add.w	r0, r8, #4294967295	@ 0xffffffff
 80072f6:	bf2c      	ite	cs
 80072f8:	f04f 0901 	movcs.w	r9, #1
 80072fc:	f04f 0900 	movcc.w	r9, #0
 8007300:	458c      	cmp	ip, r1
 8007302:	d902      	bls.n	800730a <__udivmoddi4+0x2b2>
 8007304:	f1b9 0f00 	cmp.w	r9, #0
 8007308:	d030      	beq.n	800736c <__udivmoddi4+0x314>
 800730a:	eba1 010c 	sub.w	r1, r1, ip
 800730e:	fbb1 f8fe 	udiv	r8, r1, lr
 8007312:	fb08 fc07 	mul.w	ip, r8, r7
 8007316:	fb0e 1118 	mls	r1, lr, r8, r1
 800731a:	b292      	uxth	r2, r2
 800731c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8007320:	4562      	cmp	r2, ip
 8007322:	d234      	bcs.n	800738e <__udivmoddi4+0x336>
 8007324:	18aa      	adds	r2, r5, r2
 8007326:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 800732a:	bf2c      	ite	cs
 800732c:	f04f 0901 	movcs.w	r9, #1
 8007330:	f04f 0900 	movcc.w	r9, #0
 8007334:	4562      	cmp	r2, ip
 8007336:	d2be      	bcs.n	80072b6 <__udivmoddi4+0x25e>
 8007338:	f1b9 0f00 	cmp.w	r9, #0
 800733c:	d1bb      	bne.n	80072b6 <__udivmoddi4+0x25e>
 800733e:	f1a8 0102 	sub.w	r1, r8, #2
 8007342:	442a      	add	r2, r5
 8007344:	e7b7      	b.n	80072b6 <__udivmoddi4+0x25e>
 8007346:	1a84      	subs	r4, r0, r2
 8007348:	eb6c 0203 	sbc.w	r2, ip, r3
 800734c:	2001      	movs	r0, #1
 800734e:	4617      	mov	r7, r2
 8007350:	e6e7      	b.n	8007122 <__udivmoddi4+0xca>
 8007352:	442c      	add	r4, r5
 8007354:	3802      	subs	r0, #2
 8007356:	e72b      	b.n	80071b0 <__udivmoddi4+0x158>
 8007358:	f1ac 0c02 	sub.w	ip, ip, #2
 800735c:	442a      	add	r2, r5
 800735e:	e70c      	b.n	800717a <__udivmoddi4+0x122>
 8007360:	3902      	subs	r1, #2
 8007362:	442a      	add	r2, r5
 8007364:	e6a5      	b.n	80070b2 <__udivmoddi4+0x5a>
 8007366:	442c      	add	r4, r5
 8007368:	3802      	subs	r0, #2
 800736a:	e6ba      	b.n	80070e2 <__udivmoddi4+0x8a>
 800736c:	eba5 0c0c 	sub.w	ip, r5, ip
 8007370:	f1a8 0002 	sub.w	r0, r8, #2
 8007374:	4461      	add	r1, ip
 8007376:	fbb1 f8fe 	udiv	r8, r1, lr
 800737a:	fb08 fc07 	mul.w	ip, r8, r7
 800737e:	e7ca      	b.n	8007316 <__udivmoddi4+0x2be>
 8007380:	f1a8 0802 	sub.w	r8, r8, #2
 8007384:	443c      	add	r4, r7
 8007386:	e744      	b.n	8007212 <__udivmoddi4+0x1ba>
 8007388:	3b02      	subs	r3, #2
 800738a:	443c      	add	r4, r7
 800738c:	e75e      	b.n	800724c <__udivmoddi4+0x1f4>
 800738e:	4641      	mov	r1, r8
 8007390:	e791      	b.n	80072b6 <__udivmoddi4+0x25e>
 8007392:	eba1 010c 	sub.w	r1, r1, ip
 8007396:	4640      	mov	r0, r8
 8007398:	fbb1 f8fe 	udiv	r8, r1, lr
 800739c:	fb08 fc07 	mul.w	ip, r8, r7
 80073a0:	e7b9      	b.n	8007316 <__udivmoddi4+0x2be>
 80073a2:	bf00      	nop

080073a4 <selfrel_offset31>:
 80073a4:	6803      	ldr	r3, [r0, #0]
 80073a6:	005a      	lsls	r2, r3, #1
 80073a8:	bf4c      	ite	mi
 80073aa:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80073ae:	f023 4300 	bicpl.w	r3, r3, #2147483648	@ 0x80000000
 80073b2:	4418      	add	r0, r3
 80073b4:	4770      	bx	lr
 80073b6:	bf00      	nop

080073b8 <search_EIT_table>:
 80073b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073bc:	b329      	cbz	r1, 800740a <search_EIT_table+0x52>
 80073be:	f101 3aff 	add.w	sl, r1, #4294967295	@ 0xffffffff
 80073c2:	4680      	mov	r8, r0
 80073c4:	4691      	mov	r9, r2
 80073c6:	2500      	movs	r5, #0
 80073c8:	4656      	mov	r6, sl
 80073ca:	19a9      	adds	r1, r5, r6
 80073cc:	bf48      	it	mi
 80073ce:	3101      	addmi	r1, #1
 80073d0:	1049      	asrs	r1, r1, #1
 80073d2:	eb08 07c1 	add.w	r7, r8, r1, lsl #3
 80073d6:	00cc      	lsls	r4, r1, #3
 80073d8:	4638      	mov	r0, r7
 80073da:	f7ff ffe3 	bl	80073a4 <selfrel_offset31>
 80073de:	458a      	cmp	sl, r1
 80073e0:	d00d      	beq.n	80073fe <search_EIT_table+0x46>
 80073e2:	3408      	adds	r4, #8
 80073e4:	4548      	cmp	r0, r9
 80073e6:	eb08 0004 	add.w	r0, r8, r4
 80073ea:	d80a      	bhi.n	8007402 <search_EIT_table+0x4a>
 80073ec:	f7ff ffda 	bl	80073a4 <selfrel_offset31>
 80073f0:	3801      	subs	r0, #1
 80073f2:	1c4d      	adds	r5, r1, #1
 80073f4:	4548      	cmp	r0, r9
 80073f6:	d3e8      	bcc.n	80073ca <search_EIT_table+0x12>
 80073f8:	4638      	mov	r0, r7
 80073fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073fe:	4548      	cmp	r0, r9
 8007400:	d9fa      	bls.n	80073f8 <search_EIT_table+0x40>
 8007402:	428d      	cmp	r5, r1
 8007404:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8007408:	d1df      	bne.n	80073ca <search_EIT_table+0x12>
 800740a:	2700      	movs	r7, #0
 800740c:	4638      	mov	r0, r7
 800740e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007412:	bf00      	nop

08007414 <__gnu_unwind_get_pr_addr>:
 8007414:	2801      	cmp	r0, #1
 8007416:	d006      	beq.n	8007426 <__gnu_unwind_get_pr_addr+0x12>
 8007418:	2802      	cmp	r0, #2
 800741a:	d002      	beq.n	8007422 <__gnu_unwind_get_pr_addr+0xe>
 800741c:	b928      	cbnz	r0, 800742a <__gnu_unwind_get_pr_addr+0x16>
 800741e:	4804      	ldr	r0, [pc, #16]	@ (8007430 <__gnu_unwind_get_pr_addr+0x1c>)
 8007420:	4770      	bx	lr
 8007422:	4804      	ldr	r0, [pc, #16]	@ (8007434 <__gnu_unwind_get_pr_addr+0x20>)
 8007424:	4770      	bx	lr
 8007426:	4804      	ldr	r0, [pc, #16]	@ (8007438 <__gnu_unwind_get_pr_addr+0x24>)
 8007428:	4770      	bx	lr
 800742a:	2000      	movs	r0, #0
 800742c:	4770      	bx	lr
 800742e:	bf00      	nop
 8007430:	08007b09 	.word	0x08007b09
 8007434:	08007b19 	.word	0x08007b19
 8007438:	08007b11 	.word	0x08007b11

0800743c <get_eit_entry>:
 800743c:	4b22      	ldr	r3, [pc, #136]	@ (80074c8 <get_eit_entry+0x8c>)
 800743e:	b530      	push	{r4, r5, lr}
 8007440:	4604      	mov	r4, r0
 8007442:	b083      	sub	sp, #12
 8007444:	1e8d      	subs	r5, r1, #2
 8007446:	b343      	cbz	r3, 800749a <get_eit_entry+0x5e>
 8007448:	a901      	add	r1, sp, #4
 800744a:	4628      	mov	r0, r5
 800744c:	f3af 8000 	nop.w
 8007450:	b1f0      	cbz	r0, 8007490 <get_eit_entry+0x54>
 8007452:	9901      	ldr	r1, [sp, #4]
 8007454:	462a      	mov	r2, r5
 8007456:	f7ff ffaf 	bl	80073b8 <search_EIT_table>
 800745a:	4601      	mov	r1, r0
 800745c:	b1c0      	cbz	r0, 8007490 <get_eit_entry+0x54>
 800745e:	f7ff ffa1 	bl	80073a4 <selfrel_offset31>
 8007462:	684b      	ldr	r3, [r1, #4]
 8007464:	64a0      	str	r0, [r4, #72]	@ 0x48
 8007466:	2b01      	cmp	r3, #1
 8007468:	d02a      	beq.n	80074c0 <get_eit_entry+0x84>
 800746a:	2b00      	cmp	r3, #0
 800746c:	f101 0004 	add.w	r0, r1, #4
 8007470:	db24      	blt.n	80074bc <get_eit_entry+0x80>
 8007472:	f7ff ff97 	bl	80073a4 <selfrel_offset31>
 8007476:	2300      	movs	r3, #0
 8007478:	6523      	str	r3, [r4, #80]	@ 0x50
 800747a:	6803      	ldr	r3, [r0, #0]
 800747c:	64e0      	str	r0, [r4, #76]	@ 0x4c
 800747e:	2b00      	cmp	r3, #0
 8007480:	db11      	blt.n	80074a6 <get_eit_entry+0x6a>
 8007482:	f7ff ff8f 	bl	80073a4 <selfrel_offset31>
 8007486:	4603      	mov	r3, r0
 8007488:	2000      	movs	r0, #0
 800748a:	6123      	str	r3, [r4, #16]
 800748c:	b003      	add	sp, #12
 800748e:	bd30      	pop	{r4, r5, pc}
 8007490:	2300      	movs	r3, #0
 8007492:	2009      	movs	r0, #9
 8007494:	6123      	str	r3, [r4, #16]
 8007496:	b003      	add	sp, #12
 8007498:	bd30      	pop	{r4, r5, pc}
 800749a:	480c      	ldr	r0, [pc, #48]	@ (80074cc <get_eit_entry+0x90>)
 800749c:	490c      	ldr	r1, [pc, #48]	@ (80074d0 <get_eit_entry+0x94>)
 800749e:	1a09      	subs	r1, r1, r0
 80074a0:	10c9      	asrs	r1, r1, #3
 80074a2:	9101      	str	r1, [sp, #4]
 80074a4:	e7d6      	b.n	8007454 <get_eit_entry+0x18>
 80074a6:	f3c3 6003 	ubfx	r0, r3, #24, #4
 80074aa:	f7ff ffb3 	bl	8007414 <__gnu_unwind_get_pr_addr>
 80074ae:	1e03      	subs	r3, r0, #0
 80074b0:	bf0c      	ite	eq
 80074b2:	2009      	moveq	r0, #9
 80074b4:	2000      	movne	r0, #0
 80074b6:	6123      	str	r3, [r4, #16]
 80074b8:	b003      	add	sp, #12
 80074ba:	bd30      	pop	{r4, r5, pc}
 80074bc:	2301      	movs	r3, #1
 80074be:	e7db      	b.n	8007478 <get_eit_entry+0x3c>
 80074c0:	2300      	movs	r3, #0
 80074c2:	2005      	movs	r0, #5
 80074c4:	e7e1      	b.n	800748a <get_eit_entry+0x4e>
 80074c6:	bf00      	nop
 80074c8:	00000000 	.word	0x00000000
 80074cc:	08008338 	.word	0x08008338
 80074d0:	080083d0 	.word	0x080083d0

080074d4 <restore_non_core_regs>:
 80074d4:	6803      	ldr	r3, [r0, #0]
 80074d6:	07da      	lsls	r2, r3, #31
 80074d8:	b510      	push	{r4, lr}
 80074da:	4604      	mov	r4, r0
 80074dc:	d406      	bmi.n	80074ec <restore_non_core_regs+0x18>
 80074de:	079b      	lsls	r3, r3, #30
 80074e0:	f100 0050 	add.w	r0, r0, #80	@ 0x50
 80074e4:	d509      	bpl.n	80074fa <restore_non_core_regs+0x26>
 80074e6:	f7f8 fef1 	bl	80002cc <__gnu_Unwind_Restore_VFP_D>
 80074ea:	6823      	ldr	r3, [r4, #0]
 80074ec:	0759      	lsls	r1, r3, #29
 80074ee:	d509      	bpl.n	8007504 <restore_non_core_regs+0x30>
 80074f0:	071a      	lsls	r2, r3, #28
 80074f2:	d50e      	bpl.n	8007512 <restore_non_core_regs+0x3e>
 80074f4:	06db      	lsls	r3, r3, #27
 80074f6:	d513      	bpl.n	8007520 <restore_non_core_regs+0x4c>
 80074f8:	bd10      	pop	{r4, pc}
 80074fa:	f7f8 fedf 	bl	80002bc <__gnu_Unwind_Restore_VFP>
 80074fe:	6823      	ldr	r3, [r4, #0]
 8007500:	0759      	lsls	r1, r3, #29
 8007502:	d4f5      	bmi.n	80074f0 <restore_non_core_regs+0x1c>
 8007504:	f104 00d8 	add.w	r0, r4, #216	@ 0xd8
 8007508:	f7f8 fee8 	bl	80002dc <__gnu_Unwind_Restore_VFP_D_16_to_31>
 800750c:	6823      	ldr	r3, [r4, #0]
 800750e:	071a      	lsls	r2, r3, #28
 8007510:	d4f0      	bmi.n	80074f4 <restore_non_core_regs+0x20>
 8007512:	f504 70ac 	add.w	r0, r4, #344	@ 0x158
 8007516:	f7f8 fee9 	bl	80002ec <__gnu_Unwind_Restore_WMMXD>
 800751a:	6823      	ldr	r3, [r4, #0]
 800751c:	06db      	lsls	r3, r3, #27
 800751e:	d4eb      	bmi.n	80074f8 <restore_non_core_regs+0x24>
 8007520:	f504 70ec 	add.w	r0, r4, #472	@ 0x1d8
 8007524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007528:	f7f8 bf24 	b.w	8000374 <__gnu_Unwind_Restore_WMMXC>

0800752c <_Unwind_decode_typeinfo_ptr.constprop.0>:
 800752c:	4603      	mov	r3, r0
 800752e:	6800      	ldr	r0, [r0, #0]
 8007530:	b100      	cbz	r0, 8007534 <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
 8007532:	4418      	add	r0, r3
 8007534:	4770      	bx	lr
 8007536:	bf00      	nop

08007538 <_Unwind_DebugHook>:
 8007538:	4770      	bx	lr
 800753a:	bf00      	nop

0800753c <unwind_phase2>:
 800753c:	b570      	push	{r4, r5, r6, lr}
 800753e:	4604      	mov	r4, r0
 8007540:	460e      	mov	r6, r1
 8007542:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 8007544:	4620      	mov	r0, r4
 8007546:	f7ff ff79 	bl	800743c <get_eit_entry>
 800754a:	4605      	mov	r5, r0
 800754c:	b998      	cbnz	r0, 8007576 <unwind_phase2+0x3a>
 800754e:	f8d6 c040 	ldr.w	ip, [r6, #64]	@ 0x40
 8007552:	4632      	mov	r2, r6
 8007554:	6923      	ldr	r3, [r4, #16]
 8007556:	4621      	mov	r1, r4
 8007558:	2001      	movs	r0, #1
 800755a:	f8c4 c014 	str.w	ip, [r4, #20]
 800755e:	4798      	blx	r3
 8007560:	2808      	cmp	r0, #8
 8007562:	d0ee      	beq.n	8007542 <unwind_phase2+0x6>
 8007564:	2807      	cmp	r0, #7
 8007566:	d106      	bne.n	8007576 <unwind_phase2+0x3a>
 8007568:	4628      	mov	r0, r5
 800756a:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 800756c:	f7ff ffe4 	bl	8007538 <_Unwind_DebugHook>
 8007570:	1d30      	adds	r0, r6, #4
 8007572:	f7f8 fe97 	bl	80002a4 <__restore_core_regs>
 8007576:	f000 fdf9 	bl	800816c <abort>
 800757a:	bf00      	nop

0800757c <unwind_phase2_forced>:
 800757c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007580:	1d0f      	adds	r7, r1, #4
 8007582:	f5ad 7d77 	sub.w	sp, sp, #988	@ 0x3dc
 8007586:	f8d0 900c 	ldr.w	r9, [r0, #12]
 800758a:	4606      	mov	r6, r0
 800758c:	f8d0 a018 	ldr.w	sl, [r0, #24]
 8007590:	4614      	mov	r4, r2
 8007592:	f10d 0c0c 	add.w	ip, sp, #12
 8007596:	ad02      	add	r5, sp, #8
 8007598:	f04f 0e00 	mov.w	lr, #0
 800759c:	f50d 78f8 	add.w	r8, sp, #496	@ 0x1f0
 80075a0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80075a2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80075a6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80075a8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80075ac:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80075ae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80075b2:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 80075b6:	f8c5 e000 	str.w	lr, [r5]
 80075ba:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80075be:	e021      	b.n	8007604 <unwind_phase2_forced+0x88>
 80075c0:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 80075c2:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 80075c6:	4629      	mov	r1, r5
 80075c8:	4640      	mov	r0, r8
 80075ca:	6173      	str	r3, [r6, #20]
 80075cc:	f7ff fd36 	bl	800703c <memcpy>
 80075d0:	6933      	ldr	r3, [r6, #16]
 80075d2:	4642      	mov	r2, r8
 80075d4:	4631      	mov	r1, r6
 80075d6:	4658      	mov	r0, fp
 80075d8:	4798      	blx	r3
 80075da:	4621      	mov	r1, r4
 80075dc:	f8d8 4038 	ldr.w	r4, [r8, #56]	@ 0x38
 80075e0:	4607      	mov	r7, r0
 80075e2:	4633      	mov	r3, r6
 80075e4:	4632      	mov	r2, r6
 80075e6:	64ac      	str	r4, [r5, #72]	@ 0x48
 80075e8:	2001      	movs	r0, #1
 80075ea:	e9cd 5a00 	strd	r5, sl, [sp]
 80075ee:	47c8      	blx	r9
 80075f0:	4604      	mov	r4, r0
 80075f2:	bb18      	cbnz	r0, 800763c <unwind_phase2_forced+0xc0>
 80075f4:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 80075f8:	4641      	mov	r1, r8
 80075fa:	4628      	mov	r0, r5
 80075fc:	f7ff fd1e 	bl	800703c <memcpy>
 8007600:	2f08      	cmp	r7, #8
 8007602:	d119      	bne.n	8007638 <unwind_phase2_forced+0xbc>
 8007604:	3409      	adds	r4, #9
 8007606:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 8007608:	4630      	mov	r0, r6
 800760a:	f7ff ff17 	bl	800743c <get_eit_entry>
 800760e:	4607      	mov	r7, r0
 8007610:	fa5f fb84 	uxtb.w	fp, r4
 8007614:	2800      	cmp	r0, #0
 8007616:	d0d3      	beq.n	80075c0 <unwind_phase2_forced+0x44>
 8007618:	6bac      	ldr	r4, [r5, #56]	@ 0x38
 800761a:	4633      	mov	r3, r6
 800761c:	4632      	mov	r2, r6
 800761e:	f04b 0110 	orr.w	r1, fp, #16
 8007622:	64ac      	str	r4, [r5, #72]	@ 0x48
 8007624:	2001      	movs	r0, #1
 8007626:	e9cd 5a00 	strd	r5, sl, [sp]
 800762a:	47c8      	blx	r9
 800762c:	b930      	cbnz	r0, 800763c <unwind_phase2_forced+0xc0>
 800762e:	4638      	mov	r0, r7
 8007630:	f50d 7d77 	add.w	sp, sp, #988	@ 0x3dc
 8007634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007638:	2f07      	cmp	r7, #7
 800763a:	d005      	beq.n	8007648 <unwind_phase2_forced+0xcc>
 800763c:	2709      	movs	r7, #9
 800763e:	4638      	mov	r0, r7
 8007640:	f50d 7d77 	add.w	sp, sp, #988	@ 0x3dc
 8007644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007648:	4620      	mov	r0, r4
 800764a:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 800764c:	f7ff ff74 	bl	8007538 <_Unwind_DebugHook>
 8007650:	a803      	add	r0, sp, #12
 8007652:	f7f8 fe27 	bl	80002a4 <__restore_core_regs>
 8007656:	bf00      	nop

08007658 <__gnu_Unwind_RaiseException>:
 8007658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800765a:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 800765c:	b0fb      	sub	sp, #492	@ 0x1ec
 800765e:	f101 0c04 	add.w	ip, r1, #4
 8007662:	460f      	mov	r7, r1
 8007664:	640b      	str	r3, [r1, #64]	@ 0x40
 8007666:	ac01      	add	r4, sp, #4
 8007668:	4605      	mov	r5, r0
 800766a:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800766e:	466e      	mov	r6, sp
 8007670:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8007674:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007676:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800767a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800767c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8007680:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007682:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8007686:	f8cd e000 	str.w	lr, [sp]
 800768a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800768e:	e006      	b.n	800769e <__gnu_Unwind_RaiseException+0x46>
 8007690:	692b      	ldr	r3, [r5, #16]
 8007692:	4632      	mov	r2, r6
 8007694:	4629      	mov	r1, r5
 8007696:	4798      	blx	r3
 8007698:	2808      	cmp	r0, #8
 800769a:	4604      	mov	r4, r0
 800769c:	d108      	bne.n	80076b0 <__gnu_Unwind_RaiseException+0x58>
 800769e:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 80076a0:	4628      	mov	r0, r5
 80076a2:	f7ff fecb 	bl	800743c <get_eit_entry>
 80076a6:	2800      	cmp	r0, #0
 80076a8:	d0f2      	beq.n	8007690 <__gnu_Unwind_RaiseException+0x38>
 80076aa:	2009      	movs	r0, #9
 80076ac:	b07b      	add	sp, #492	@ 0x1ec
 80076ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076b0:	4630      	mov	r0, r6
 80076b2:	f7ff ff0f 	bl	80074d4 <restore_non_core_regs>
 80076b6:	2c06      	cmp	r4, #6
 80076b8:	d1f7      	bne.n	80076aa <__gnu_Unwind_RaiseException+0x52>
 80076ba:	4639      	mov	r1, r7
 80076bc:	4628      	mov	r0, r5
 80076be:	f7ff ff3d 	bl	800753c <unwind_phase2>
 80076c2:	bf00      	nop

080076c4 <__gnu_Unwind_ForcedUnwind>:
 80076c4:	b410      	push	{r4}
 80076c6:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 80076c8:	60c1      	str	r1, [r0, #12]
 80076ca:	4619      	mov	r1, r3
 80076cc:	6182      	str	r2, [r0, #24]
 80076ce:	2200      	movs	r2, #0
 80076d0:	641c      	str	r4, [r3, #64]	@ 0x40
 80076d2:	bc10      	pop	{r4}
 80076d4:	f7ff bf52 	b.w	800757c <unwind_phase2_forced>

080076d8 <__gnu_Unwind_Resume>:
 80076d8:	b570      	push	{r4, r5, r6, lr}
 80076da:	6943      	ldr	r3, [r0, #20]
 80076dc:	68c6      	ldr	r6, [r0, #12]
 80076de:	640b      	str	r3, [r1, #64]	@ 0x40
 80076e0:	b9ae      	cbnz	r6, 800770e <__gnu_Unwind_Resume+0x36>
 80076e2:	6903      	ldr	r3, [r0, #16]
 80076e4:	460a      	mov	r2, r1
 80076e6:	4604      	mov	r4, r0
 80076e8:	460d      	mov	r5, r1
 80076ea:	4601      	mov	r1, r0
 80076ec:	2002      	movs	r0, #2
 80076ee:	4798      	blx	r3
 80076f0:	2807      	cmp	r0, #7
 80076f2:	d005      	beq.n	8007700 <__gnu_Unwind_Resume+0x28>
 80076f4:	2808      	cmp	r0, #8
 80076f6:	d10f      	bne.n	8007718 <__gnu_Unwind_Resume+0x40>
 80076f8:	4629      	mov	r1, r5
 80076fa:	4620      	mov	r0, r4
 80076fc:	f7ff ff1e 	bl	800753c <unwind_phase2>
 8007700:	4630      	mov	r0, r6
 8007702:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 8007704:	f7ff ff18 	bl	8007538 <_Unwind_DebugHook>
 8007708:	1d28      	adds	r0, r5, #4
 800770a:	f7f8 fdcb 	bl	80002a4 <__restore_core_regs>
 800770e:	2201      	movs	r2, #1
 8007710:	f7ff ff34 	bl	800757c <unwind_phase2_forced>
 8007714:	f000 fd2a 	bl	800816c <abort>
 8007718:	f000 fd28 	bl	800816c <abort>

0800771c <__gnu_Unwind_Resume_or_Rethrow>:
 800771c:	68c2      	ldr	r2, [r0, #12]
 800771e:	b508      	push	{r3, lr}
 8007720:	b142      	cbz	r2, 8007734 <__gnu_Unwind_Resume_or_Rethrow+0x18>
 8007722:	f8d1 c03c 	ldr.w	ip, [r1, #60]	@ 0x3c
 8007726:	2200      	movs	r2, #0
 8007728:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800772c:	f8c1 c040 	str.w	ip, [r1, #64]	@ 0x40
 8007730:	f7ff bf24 	b.w	800757c <unwind_phase2_forced>
 8007734:	f7ff ff90 	bl	8007658 <__gnu_Unwind_RaiseException>
 8007738:	2009      	movs	r0, #9
 800773a:	bd08      	pop	{r3, pc}

0800773c <_Unwind_VRS_Get>:
 800773c:	2905      	cmp	r1, #5
 800773e:	d815      	bhi.n	800776c <_Unwind_VRS_Get+0x30>
 8007740:	e8df f001 	tbb	[pc, r1]
 8007744:	0314030a 	.word	0x0314030a
 8007748:	0503      	.short	0x0503
 800774a:	2001      	movs	r0, #1
 800774c:	4770      	bx	lr
 800774e:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8007750:	2000      	movs	r0, #0
 8007752:	9a00      	ldr	r2, [sp, #0]
 8007754:	6013      	str	r3, [r2, #0]
 8007756:	4770      	bx	lr
 8007758:	b943      	cbnz	r3, 800776c <_Unwind_VRS_Get+0x30>
 800775a:	2a0f      	cmp	r2, #15
 800775c:	d806      	bhi.n	800776c <_Unwind_VRS_Get+0x30>
 800775e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007762:	2000      	movs	r0, #0
 8007764:	6853      	ldr	r3, [r2, #4]
 8007766:	9a00      	ldr	r2, [sp, #0]
 8007768:	6013      	str	r3, [r2, #0]
 800776a:	4770      	bx	lr
 800776c:	2002      	movs	r0, #2
 800776e:	4770      	bx	lr

08007770 <_Unwind_GetGR>:
 8007770:	b510      	push	{r4, lr}
 8007772:	b084      	sub	sp, #16
 8007774:	2300      	movs	r3, #0
 8007776:	460a      	mov	r2, r1
 8007778:	ac03      	add	r4, sp, #12
 800777a:	4619      	mov	r1, r3
 800777c:	9400      	str	r4, [sp, #0]
 800777e:	f7ff ffdd 	bl	800773c <_Unwind_VRS_Get>
 8007782:	9803      	ldr	r0, [sp, #12]
 8007784:	b004      	add	sp, #16
 8007786:	bd10      	pop	{r4, pc}

08007788 <_Unwind_VRS_Set>:
 8007788:	2905      	cmp	r1, #5
 800778a:	d815      	bhi.n	80077b8 <_Unwind_VRS_Set+0x30>
 800778c:	e8df f001 	tbb	[pc, r1]
 8007790:	0314030a 	.word	0x0314030a
 8007794:	0503      	.short	0x0503
 8007796:	2001      	movs	r0, #1
 8007798:	4770      	bx	lr
 800779a:	9b00      	ldr	r3, [sp, #0]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	6443      	str	r3, [r0, #68]	@ 0x44
 80077a0:	2000      	movs	r0, #0
 80077a2:	4770      	bx	lr
 80077a4:	b943      	cbnz	r3, 80077b8 <_Unwind_VRS_Set+0x30>
 80077a6:	2a0f      	cmp	r2, #15
 80077a8:	d806      	bhi.n	80077b8 <_Unwind_VRS_Set+0x30>
 80077aa:	9b00      	ldr	r3, [sp, #0]
 80077ac:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80077b0:	2000      	movs	r0, #0
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	6053      	str	r3, [r2, #4]
 80077b6:	4770      	bx	lr
 80077b8:	2002      	movs	r0, #2
 80077ba:	4770      	bx	lr

080077bc <_Unwind_SetGR>:
 80077bc:	b510      	push	{r4, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	2300      	movs	r3, #0
 80077c2:	ac03      	add	r4, sp, #12
 80077c4:	9203      	str	r2, [sp, #12]
 80077c6:	460a      	mov	r2, r1
 80077c8:	4619      	mov	r1, r3
 80077ca:	9400      	str	r4, [sp, #0]
 80077cc:	f7ff ffdc 	bl	8007788 <_Unwind_VRS_Set>
 80077d0:	b004      	add	sp, #16
 80077d2:	bd10      	pop	{r4, pc}

080077d4 <__gnu_Unwind_Backtrace>:
 80077d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077d8:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 80077da:	f5ad 7d10 	sub.w	sp, sp, #576	@ 0x240
 80077de:	1d14      	adds	r4, r2, #4
 80077e0:	4680      	mov	r8, r0
 80077e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80077e4:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 80077e8:	460f      	mov	r7, r1
 80077ea:	ad16      	add	r5, sp, #88	@ 0x58
 80077ec:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 80077f0:	466e      	mov	r6, sp
 80077f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80077f4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80077f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80077fa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80077fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007800:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8007804:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8007808:	f8c5 e000 	str.w	lr, [r5]
 800780c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8007810:	e010      	b.n	8007834 <__gnu_Unwind_Backtrace+0x60>
 8007812:	f7ff ffd3 	bl	80077bc <_Unwind_SetGR>
 8007816:	4639      	mov	r1, r7
 8007818:	4628      	mov	r0, r5
 800781a:	47c0      	blx	r8
 800781c:	4603      	mov	r3, r0
 800781e:	462a      	mov	r2, r5
 8007820:	4631      	mov	r1, r6
 8007822:	2008      	movs	r0, #8
 8007824:	b983      	cbnz	r3, 8007848 <__gnu_Unwind_Backtrace+0x74>
 8007826:	6933      	ldr	r3, [r6, #16]
 8007828:	4798      	blx	r3
 800782a:	2805      	cmp	r0, #5
 800782c:	4604      	mov	r4, r0
 800782e:	d00c      	beq.n	800784a <__gnu_Unwind_Backtrace+0x76>
 8007830:	2809      	cmp	r0, #9
 8007832:	d00a      	beq.n	800784a <__gnu_Unwind_Backtrace+0x76>
 8007834:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 8007836:	4630      	mov	r0, r6
 8007838:	f7ff fe00 	bl	800743c <get_eit_entry>
 800783c:	4603      	mov	r3, r0
 800783e:	4632      	mov	r2, r6
 8007840:	210c      	movs	r1, #12
 8007842:	4628      	mov	r0, r5
 8007844:	2b00      	cmp	r3, #0
 8007846:	d0e4      	beq.n	8007812 <__gnu_Unwind_Backtrace+0x3e>
 8007848:	2409      	movs	r4, #9
 800784a:	4628      	mov	r0, r5
 800784c:	f7ff fe42 	bl	80074d4 <restore_non_core_regs>
 8007850:	4620      	mov	r0, r4
 8007852:	f50d 7d10 	add.w	sp, sp, #576	@ 0x240
 8007856:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800785a:	bf00      	nop

0800785c <__gnu_unwind_pr_common>:
 800785c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007860:	4616      	mov	r6, r2
 8007862:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 8007864:	b089      	sub	sp, #36	@ 0x24
 8007866:	460d      	mov	r5, r1
 8007868:	f852 1b04 	ldr.w	r1, [r2], #4
 800786c:	f000 0c03 	and.w	ip, r0, #3
 8007870:	9206      	str	r2, [sp, #24]
 8007872:	b1e3      	cbz	r3, 80078ae <__gnu_unwind_pr_common+0x52>
 8007874:	0c0c      	lsrs	r4, r1, #16
 8007876:	0409      	lsls	r1, r1, #16
 8007878:	f88d 401d 	strb.w	r4, [sp, #29]
 800787c:	b2e4      	uxtb	r4, r4
 800787e:	9105      	str	r1, [sp, #20]
 8007880:	2102      	movs	r1, #2
 8007882:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8007886:	f1bc 0f02 	cmp.w	ip, #2
 800788a:	f88d 101c 	strb.w	r1, [sp, #28]
 800788e:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 8007890:	bf08      	it	eq
 8007892:	6baa      	ldreq	r2, [r5, #56]	@ 0x38
 8007894:	f011 0801 	ands.w	r8, r1, #1
 8007898:	d00f      	beq.n	80078ba <__gnu_unwind_pr_common+0x5e>
 800789a:	a905      	add	r1, sp, #20
 800789c:	4630      	mov	r0, r6
 800789e:	f000 fae1 	bl	8007e64 <__gnu_unwind_execute>
 80078a2:	2800      	cmp	r0, #0
 80078a4:	d161      	bne.n	800796a <__gnu_unwind_pr_common+0x10e>
 80078a6:	2008      	movs	r0, #8
 80078a8:	b009      	add	sp, #36	@ 0x24
 80078aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078ae:	0209      	lsls	r1, r1, #8
 80078b0:	f88d 301d 	strb.w	r3, [sp, #29]
 80078b4:	9105      	str	r1, [sp, #20]
 80078b6:	2103      	movs	r1, #3
 80078b8:	e7e5      	b.n	8007886 <__gnu_unwind_pr_common+0x2a>
 80078ba:	6817      	ldr	r7, [r2, #0]
 80078bc:	2f00      	cmp	r7, #0
 80078be:	d0ec      	beq.n	800789a <__gnu_unwind_pr_common+0x3e>
 80078c0:	f000 0108 	and.w	r1, r0, #8
 80078c4:	46bb      	mov	fp, r7
 80078c6:	469a      	mov	sl, r3
 80078c8:	4667      	mov	r7, ip
 80078ca:	9101      	str	r1, [sp, #4]
 80078cc:	f8cd 8008 	str.w	r8, [sp, #8]
 80078d0:	f1ba 0f02 	cmp.w	sl, #2
 80078d4:	d04d      	beq.n	8007972 <__gnu_unwind_pr_common+0x116>
 80078d6:	f8b2 b000 	ldrh.w	fp, [r2]
 80078da:	f102 0904 	add.w	r9, r2, #4
 80078de:	8854      	ldrh	r4, [r2, #2]
 80078e0:	f024 0201 	bic.w	r2, r4, #1
 80078e4:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 80078e6:	0064      	lsls	r4, r4, #1
 80078e8:	210f      	movs	r1, #15
 80078ea:	eb02 0803 	add.w	r8, r2, r3
 80078ee:	4630      	mov	r0, r6
 80078f0:	f7ff ff3e 	bl	8007770 <_Unwind_GetGR>
 80078f4:	f004 0402 	and.w	r4, r4, #2
 80078f8:	f00b 0301 	and.w	r3, fp, #1
 80078fc:	4580      	cmp	r8, r0
 80078fe:	ea43 0304 	orr.w	r3, r3, r4
 8007902:	d82c      	bhi.n	800795e <__gnu_unwind_pr_common+0x102>
 8007904:	f02b 0b01 	bic.w	fp, fp, #1
 8007908:	2b01      	cmp	r3, #1
 800790a:	44c3      	add	fp, r8
 800790c:	d068      	beq.n	80079e0 <__gnu_unwind_pr_common+0x184>
 800790e:	2b02      	cmp	r3, #2
 8007910:	d041      	beq.n	8007996 <__gnu_unwind_pr_common+0x13a>
 8007912:	bb53      	cbnz	r3, 800796a <__gnu_unwind_pr_common+0x10e>
 8007914:	b117      	cbz	r7, 800791c <__gnu_unwind_pr_common+0xc0>
 8007916:	4583      	cmp	fp, r0
 8007918:	f200 80d0 	bhi.w	8007abc <__gnu_unwind_pr_common+0x260>
 800791c:	f109 0204 	add.w	r2, r9, #4
 8007920:	f8d2 b000 	ldr.w	fp, [r2]
 8007924:	f1bb 0f00 	cmp.w	fp, #0
 8007928:	d1d2      	bne.n	80078d0 <__gnu_unwind_pr_common+0x74>
 800792a:	a905      	add	r1, sp, #20
 800792c:	4630      	mov	r0, r6
 800792e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007932:	f000 fa97 	bl	8007e64 <__gnu_unwind_execute>
 8007936:	b9c0      	cbnz	r0, 800796a <__gnu_unwind_pr_common+0x10e>
 8007938:	f1b8 0f00 	cmp.w	r8, #0
 800793c:	d0b3      	beq.n	80078a6 <__gnu_unwind_pr_common+0x4a>
 800793e:	210f      	movs	r1, #15
 8007940:	4630      	mov	r0, r6
 8007942:	f7ff ff15 	bl	8007770 <_Unwind_GetGR>
 8007946:	210e      	movs	r1, #14
 8007948:	4602      	mov	r2, r0
 800794a:	4630      	mov	r0, r6
 800794c:	f7ff ff36 	bl	80077bc <_Unwind_SetGR>
 8007950:	4a6c      	ldr	r2, [pc, #432]	@ (8007b04 <__gnu_unwind_pr_common+0x2a8>)
 8007952:	210f      	movs	r1, #15
 8007954:	4630      	mov	r0, r6
 8007956:	f7ff ff31 	bl	80077bc <_Unwind_SetGR>
 800795a:	2007      	movs	r0, #7
 800795c:	e7a4      	b.n	80078a8 <__gnu_unwind_pr_common+0x4c>
 800795e:	2b01      	cmp	r3, #1
 8007960:	d03a      	beq.n	80079d8 <__gnu_unwind_pr_common+0x17c>
 8007962:	2b02      	cmp	r3, #2
 8007964:	d009      	beq.n	800797a <__gnu_unwind_pr_common+0x11e>
 8007966:	2b00      	cmp	r3, #0
 8007968:	d0d8      	beq.n	800791c <__gnu_unwind_pr_common+0xc0>
 800796a:	2009      	movs	r0, #9
 800796c:	b009      	add	sp, #36	@ 0x24
 800796e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007972:	6854      	ldr	r4, [r2, #4]
 8007974:	f102 0908 	add.w	r9, r2, #8
 8007978:	e7b2      	b.n	80078e0 <__gnu_unwind_pr_common+0x84>
 800797a:	f8d9 4000 	ldr.w	r4, [r9]
 800797e:	f024 4800 	bic.w	r8, r4, #2147483648	@ 0x80000000
 8007982:	b977      	cbnz	r7, 80079a2 <__gnu_unwind_pr_common+0x146>
 8007984:	2c00      	cmp	r4, #0
 8007986:	da01      	bge.n	800798c <__gnu_unwind_pr_common+0x130>
 8007988:	f109 0904 	add.w	r9, r9, #4
 800798c:	f108 0301 	add.w	r3, r8, #1
 8007990:	eb09 0283 	add.w	r2, r9, r3, lsl #2
 8007994:	e7c4      	b.n	8007920 <__gnu_unwind_pr_common+0xc4>
 8007996:	f8d9 4000 	ldr.w	r4, [r9]
 800799a:	f024 4800 	bic.w	r8, r4, #2147483648	@ 0x80000000
 800799e:	2f00      	cmp	r7, #0
 80079a0:	d061      	beq.n	8007a66 <__gnu_unwind_pr_common+0x20a>
 80079a2:	f8d5 b020 	ldr.w	fp, [r5, #32]
 80079a6:	210d      	movs	r1, #13
 80079a8:	4630      	mov	r0, r6
 80079aa:	f7ff fee1 	bl	8007770 <_Unwind_GetGR>
 80079ae:	4583      	cmp	fp, r0
 80079b0:	d1e8      	bne.n	8007984 <__gnu_unwind_pr_common+0x128>
 80079b2:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 80079b4:	4591      	cmp	r9, r2
 80079b6:	d1e5      	bne.n	8007984 <__gnu_unwind_pr_common+0x128>
 80079b8:	2400      	movs	r4, #0
 80079ba:	2204      	movs	r2, #4
 80079bc:	f8c5 8028 	str.w	r8, [r5, #40]	@ 0x28
 80079c0:	e9c5 420b 	strd	r4, r2, [r5, #44]	@ 0x2c
 80079c4:	444a      	add	r2, r9
 80079c6:	636a      	str	r2, [r5, #52]	@ 0x34
 80079c8:	f8d9 2000 	ldr.w	r2, [r9]
 80079cc:	42a2      	cmp	r2, r4
 80079ce:	f2c0 8093 	blt.w	8007af8 <__gnu_unwind_pr_common+0x29c>
 80079d2:	2301      	movs	r3, #1
 80079d4:	9302      	str	r3, [sp, #8]
 80079d6:	e7d9      	b.n	800798c <__gnu_unwind_pr_common+0x130>
 80079d8:	b91f      	cbnz	r7, 80079e2 <__gnu_unwind_pr_common+0x186>
 80079da:	f109 0208 	add.w	r2, r9, #8
 80079de:	e79f      	b.n	8007920 <__gnu_unwind_pr_common+0xc4>
 80079e0:	b1bf      	cbz	r7, 8007a12 <__gnu_unwind_pr_common+0x1b6>
 80079e2:	6a2c      	ldr	r4, [r5, #32]
 80079e4:	210d      	movs	r1, #13
 80079e6:	4630      	mov	r0, r6
 80079e8:	f7ff fec2 	bl	8007770 <_Unwind_GetGR>
 80079ec:	4284      	cmp	r4, r0
 80079ee:	d1f4      	bne.n	80079da <__gnu_unwind_pr_common+0x17e>
 80079f0:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80079f2:	4599      	cmp	r9, r3
 80079f4:	d1f1      	bne.n	80079da <__gnu_unwind_pr_common+0x17e>
 80079f6:	4648      	mov	r0, r9
 80079f8:	f7ff fcd4 	bl	80073a4 <selfrel_offset31>
 80079fc:	210f      	movs	r1, #15
 80079fe:	4602      	mov	r2, r0
 8007a00:	4630      	mov	r0, r6
 8007a02:	f7ff fedb 	bl	80077bc <_Unwind_SetGR>
 8007a06:	462a      	mov	r2, r5
 8007a08:	2100      	movs	r1, #0
 8007a0a:	4630      	mov	r0, r6
 8007a0c:	f7ff fed6 	bl	80077bc <_Unwind_SetGR>
 8007a10:	e7a3      	b.n	800795a <__gnu_unwind_pr_common+0xfe>
 8007a12:	4583      	cmp	fp, r0
 8007a14:	d9e1      	bls.n	80079da <__gnu_unwind_pr_common+0x17e>
 8007a16:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8007a1a:	f8d9 2000 	ldr.w	r2, [r9]
 8007a1e:	1c99      	adds	r1, r3, #2
 8007a20:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8007a24:	d0a1      	beq.n	800796a <__gnu_unwind_pr_common+0x10e>
 8007a26:	f105 0458 	add.w	r4, r5, #88	@ 0x58
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	9404      	str	r4, [sp, #16]
 8007a2e:	d05c      	beq.n	8007aea <__gnu_unwind_pr_common+0x28e>
 8007a30:	f109 0004 	add.w	r0, r9, #4
 8007a34:	f7ff fd7a 	bl	800752c <_Unwind_decode_typeinfo_ptr.constprop.0>
 8007a38:	ab04      	add	r3, sp, #16
 8007a3a:	4601      	mov	r1, r0
 8007a3c:	4628      	mov	r0, r5
 8007a3e:	f3af 8000 	nop.w
 8007a42:	2800      	cmp	r0, #0
 8007a44:	d0c9      	beq.n	80079da <__gnu_unwind_pr_common+0x17e>
 8007a46:	4604      	mov	r4, r0
 8007a48:	210d      	movs	r1, #13
 8007a4a:	4630      	mov	r0, r6
 8007a4c:	9e04      	ldr	r6, [sp, #16]
 8007a4e:	f7ff fe8f 	bl	8007770 <_Unwind_GetGR>
 8007a52:	2c02      	cmp	r4, #2
 8007a54:	6228      	str	r0, [r5, #32]
 8007a56:	d102      	bne.n	8007a5e <__gnu_unwind_pr_common+0x202>
 8007a58:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8007a5a:	f105 062c 	add.w	r6, r5, #44	@ 0x2c
 8007a5e:	2006      	movs	r0, #6
 8007a60:	e9c5 6909 	strd	r6, r9, [r5, #36]	@ 0x24
 8007a64:	e720      	b.n	80078a8 <__gnu_unwind_pr_common+0x4c>
 8007a66:	4583      	cmp	fp, r0
 8007a68:	d98c      	bls.n	8007984 <__gnu_unwind_pr_common+0x128>
 8007a6a:	9b01      	ldr	r3, [sp, #4]
 8007a6c:	b113      	cbz	r3, 8007a74 <__gnu_unwind_pr_common+0x218>
 8007a6e:	f1b8 0f00 	cmp.w	r8, #0
 8007a72:	d187      	bne.n	8007984 <__gnu_unwind_pr_common+0x128>
 8007a74:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 8007a78:	9703      	str	r7, [sp, #12]
 8007a7a:	f109 0b04 	add.w	fp, r9, #4
 8007a7e:	2400      	movs	r4, #0
 8007a80:	461f      	mov	r7, r3
 8007a82:	e00c      	b.n	8007a9e <__gnu_unwind_pr_common+0x242>
 8007a84:	4658      	mov	r0, fp
 8007a86:	2200      	movs	r2, #0
 8007a88:	9704      	str	r7, [sp, #16]
 8007a8a:	f7ff fd4f 	bl	800752c <_Unwind_decode_typeinfo_ptr.constprop.0>
 8007a8e:	ab04      	add	r3, sp, #16
 8007a90:	4601      	mov	r1, r0
 8007a92:	4628      	mov	r0, r5
 8007a94:	f10b 0b04 	add.w	fp, fp, #4
 8007a98:	f3af 8000 	nop.w
 8007a9c:	bb08      	cbnz	r0, 8007ae2 <__gnu_unwind_pr_common+0x286>
 8007a9e:	4544      	cmp	r4, r8
 8007aa0:	f104 0401 	add.w	r4, r4, #1
 8007aa4:	d1ee      	bne.n	8007a84 <__gnu_unwind_pr_common+0x228>
 8007aa6:	210d      	movs	r1, #13
 8007aa8:	4630      	mov	r0, r6
 8007aaa:	f7ff fe61 	bl	8007770 <_Unwind_GetGR>
 8007aae:	9b04      	ldr	r3, [sp, #16]
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	2006      	movs	r0, #6
 8007ab4:	622a      	str	r2, [r5, #32]
 8007ab6:	e9c5 3909 	strd	r3, r9, [r5, #36]	@ 0x24
 8007aba:	e6f5      	b.n	80078a8 <__gnu_unwind_pr_common+0x4c>
 8007abc:	4648      	mov	r0, r9
 8007abe:	f7ff fc71 	bl	80073a4 <selfrel_offset31>
 8007ac2:	f109 0204 	add.w	r2, r9, #4
 8007ac6:	4604      	mov	r4, r0
 8007ac8:	4628      	mov	r0, r5
 8007aca:	63aa      	str	r2, [r5, #56]	@ 0x38
 8007acc:	f3af 8000 	nop.w
 8007ad0:	2800      	cmp	r0, #0
 8007ad2:	f43f af4a 	beq.w	800796a <__gnu_unwind_pr_common+0x10e>
 8007ad6:	4622      	mov	r2, r4
 8007ad8:	210f      	movs	r1, #15
 8007ada:	4630      	mov	r0, r6
 8007adc:	f7ff fe6e 	bl	80077bc <_Unwind_SetGR>
 8007ae0:	e73b      	b.n	800795a <__gnu_unwind_pr_common+0xfe>
 8007ae2:	9f03      	ldr	r7, [sp, #12]
 8007ae4:	f8d9 4000 	ldr.w	r4, [r9]
 8007ae8:	e74c      	b.n	8007984 <__gnu_unwind_pr_common+0x128>
 8007aea:	4630      	mov	r0, r6
 8007aec:	210d      	movs	r1, #13
 8007aee:	f7ff fe3f 	bl	8007770 <_Unwind_GetGR>
 8007af2:	4626      	mov	r6, r4
 8007af4:	6228      	str	r0, [r5, #32]
 8007af6:	e7b2      	b.n	8007a5e <__gnu_unwind_pr_common+0x202>
 8007af8:	f108 0201 	add.w	r2, r8, #1
 8007afc:	eb09 0082 	add.w	r0, r9, r2, lsl #2
 8007b00:	e77a      	b.n	80079f8 <__gnu_unwind_pr_common+0x19c>
 8007b02:	bf00      	nop
 8007b04:	00000000 	.word	0x00000000

08007b08 <__aeabi_unwind_cpp_pr0>:
 8007b08:	2300      	movs	r3, #0
 8007b0a:	f7ff bea7 	b.w	800785c <__gnu_unwind_pr_common>
 8007b0e:	bf00      	nop

08007b10 <__aeabi_unwind_cpp_pr1>:
 8007b10:	2301      	movs	r3, #1
 8007b12:	f7ff bea3 	b.w	800785c <__gnu_unwind_pr_common>
 8007b16:	bf00      	nop

08007b18 <__aeabi_unwind_cpp_pr2>:
 8007b18:	2302      	movs	r3, #2
 8007b1a:	f7ff be9f 	b.w	800785c <__gnu_unwind_pr_common>
 8007b1e:	bf00      	nop

08007b20 <_Unwind_VRS_Pop>:
 8007b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b24:	4605      	mov	r5, r0
 8007b26:	b0c4      	sub	sp, #272	@ 0x110
 8007b28:	4614      	mov	r4, r2
 8007b2a:	2905      	cmp	r1, #5
 8007b2c:	d804      	bhi.n	8007b38 <_Unwind_VRS_Pop+0x18>
 8007b2e:	e8df f001 	tbb	[pc, r1]
 8007b32:	2b12      	.short	0x2b12
 8007b34:	07916b03 	.word	0x07916b03
 8007b38:	2002      	movs	r0, #2
 8007b3a:	b044      	add	sp, #272	@ 0x110
 8007b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b40:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8007b42:	2c00      	cmp	r4, #0
 8007b44:	d1f8      	bne.n	8007b38 <_Unwind_VRS_Pop+0x18>
 8007b46:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b4a:	6442      	str	r2, [r0, #68]	@ 0x44
 8007b4c:	6383      	str	r3, [r0, #56]	@ 0x38
 8007b4e:	2000      	movs	r0, #0
 8007b50:	b044      	add	sp, #272	@ 0x110
 8007b52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d1ee      	bne.n	8007b38 <_Unwind_VRS_Pop+0x18>
 8007b5a:	fa1f fc84 	uxth.w	ip, r4
 8007b5e:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8007b60:	2601      	movs	r6, #1
 8007b62:	1d2f      	adds	r7, r5, #4
 8007b64:	fa06 f103 	lsl.w	r1, r6, r3
 8007b68:	4602      	mov	r2, r0
 8007b6a:	ea11 0f0c 	tst.w	r1, ip
 8007b6e:	d004      	beq.n	8007b7a <_Unwind_VRS_Pop+0x5a>
 8007b70:	f852 1b04 	ldr.w	r1, [r2], #4
 8007b74:	4610      	mov	r0, r2
 8007b76:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
 8007b7a:	3301      	adds	r3, #1
 8007b7c:	2b10      	cmp	r3, #16
 8007b7e:	d1f1      	bne.n	8007b64 <_Unwind_VRS_Pop+0x44>
 8007b80:	04a4      	lsls	r4, r4, #18
 8007b82:	d4e4      	bmi.n	8007b4e <_Unwind_VRS_Pop+0x2e>
 8007b84:	63a8      	str	r0, [r5, #56]	@ 0x38
 8007b86:	e7e2      	b.n	8007b4e <_Unwind_VRS_Pop+0x2e>
 8007b88:	f003 02fb 	and.w	r2, r3, #251	@ 0xfb
 8007b8c:	0c26      	lsrs	r6, r4, #16
 8007b8e:	b2a4      	uxth	r4, r4
 8007b90:	2a01      	cmp	r2, #1
 8007b92:	d1d1      	bne.n	8007b38 <_Unwind_VRS_Pop+0x18>
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	eb06 0204 	add.w	r2, r6, r4
 8007b9a:	f000 80b8 	beq.w	8007d0e <_Unwind_VRS_Pop+0x1ee>
 8007b9e:	2a20      	cmp	r2, #32
 8007ba0:	d8ca      	bhi.n	8007b38 <_Unwind_VRS_Pop+0x18>
 8007ba2:	2e0f      	cmp	r6, #15
 8007ba4:	d97b      	bls.n	8007c9e <_Unwind_VRS_Pop+0x17e>
 8007ba6:	2c00      	cmp	r4, #0
 8007ba8:	d0d1      	beq.n	8007b4e <_Unwind_VRS_Pop+0x2e>
 8007baa:	6802      	ldr	r2, [r0, #0]
 8007bac:	9301      	str	r3, [sp, #4]
 8007bae:	0751      	lsls	r1, r2, #29
 8007bb0:	f100 810b 	bmi.w	8007dca <_Unwind_VRS_Pop+0x2aa>
 8007bb4:	af02      	add	r7, sp, #8
 8007bb6:	4638      	mov	r0, r7
 8007bb8:	f7f8 fb94 	bl	80002e4 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8007bbc:	f8d5 c038 	ldr.w	ip, [r5, #56]	@ 0x38
 8007bc0:	9b01      	ldr	r3, [sp, #4]
 8007bc2:	2e10      	cmp	r6, #16
 8007bc4:	4631      	mov	r1, r6
 8007bc6:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8007bca:	4660      	mov	r0, ip
 8007bcc:	bf38      	it	cc
 8007bce:	2110      	movcc	r1, #16
 8007bd0:	f104 3eff 	add.w	lr, r4, #4294967295	@ 0xffffffff
 8007bd4:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8007bd8:	4672      	mov	r2, lr
 8007bda:	3984      	subs	r1, #132	@ 0x84
 8007bdc:	f850 4b04 	ldr.w	r4, [r0], #4
 8007be0:	3a01      	subs	r2, #1
 8007be2:	f841 4f04 	str.w	r4, [r1, #4]!
 8007be6:	1c54      	adds	r4, r2, #1
 8007be8:	d1f8      	bne.n	8007bdc <_Unwind_VRS_Pop+0xbc>
 8007bea:	f10c 0c04 	add.w	ip, ip, #4
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	eb0c 028e 	add.w	r2, ip, lr, lsl #2
 8007bf4:	f000 80c3 	beq.w	8007d7e <_Unwind_VRS_Pop+0x25e>
 8007bf8:	2e0f      	cmp	r6, #15
 8007bfa:	63aa      	str	r2, [r5, #56]	@ 0x38
 8007bfc:	f240 80c8 	bls.w	8007d90 <_Unwind_VRS_Pop+0x270>
 8007c00:	4638      	mov	r0, r7
 8007c02:	f7f8 fb6b 	bl	80002dc <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8007c06:	e7a2      	b.n	8007b4e <_Unwind_VRS_Pop+0x2e>
 8007c08:	2b03      	cmp	r3, #3
 8007c0a:	d195      	bne.n	8007b38 <_Unwind_VRS_Pop+0x18>
 8007c0c:	fa1f f884 	uxth.w	r8, r4
 8007c10:	0c26      	lsrs	r6, r4, #16
 8007c12:	eb08 4414 	add.w	r4, r8, r4, lsr #16
 8007c16:	2c10      	cmp	r4, #16
 8007c18:	d88e      	bhi.n	8007b38 <_Unwind_VRS_Pop+0x18>
 8007c1a:	6803      	ldr	r3, [r0, #0]
 8007c1c:	0718      	lsls	r0, r3, #28
 8007c1e:	f100 809b 	bmi.w	8007d58 <_Unwind_VRS_Pop+0x238>
 8007c22:	af22      	add	r7, sp, #136	@ 0x88
 8007c24:	4638      	mov	r0, r7
 8007c26:	f7f8 fb83 	bl	8000330 <__gnu_Unwind_Save_WMMXD>
 8007c2a:	6bac      	ldr	r4, [r5, #56]	@ 0x38
 8007c2c:	ea4f 0148 	mov.w	r1, r8, lsl #1
 8007c30:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
 8007c34:	1e4a      	subs	r2, r1, #1
 8007c36:	b141      	cbz	r1, 8007c4a <_Unwind_VRS_Pop+0x12a>
 8007c38:	1ae0      	subs	r0, r4, r3
 8007c3a:	5819      	ldr	r1, [r3, r0]
 8007c3c:	3a01      	subs	r2, #1
 8007c3e:	f843 1b04 	str.w	r1, [r3], #4
 8007c42:	1c51      	adds	r1, r2, #1
 8007c44:	d1f9      	bne.n	8007c3a <_Unwind_VRS_Pop+0x11a>
 8007c46:	eb04 04c8 	add.w	r4, r4, r8, lsl #3
 8007c4a:	4638      	mov	r0, r7
 8007c4c:	63ac      	str	r4, [r5, #56]	@ 0x38
 8007c4e:	f7f8 fb4d 	bl	80002ec <__gnu_Unwind_Restore_WMMXD>
 8007c52:	e77c      	b.n	8007b4e <_Unwind_VRS_Pop+0x2e>
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	f47f af6f 	bne.w	8007b38 <_Unwind_VRS_Pop+0x18>
 8007c5a:	2c10      	cmp	r4, #16
 8007c5c:	f63f af6c 	bhi.w	8007b38 <_Unwind_VRS_Pop+0x18>
 8007c60:	6803      	ldr	r3, [r0, #0]
 8007c62:	06da      	lsls	r2, r3, #27
 8007c64:	d470      	bmi.n	8007d48 <_Unwind_VRS_Pop+0x228>
 8007c66:	af22      	add	r7, sp, #136	@ 0x88
 8007c68:	4638      	mov	r0, r7
 8007c6a:	f7f8 fb8d 	bl	8000388 <__gnu_Unwind_Save_WMMXC>
 8007c6e:	6bae      	ldr	r6, [r5, #56]	@ 0x38
 8007c70:	4639      	mov	r1, r7
 8007c72:	2300      	movs	r3, #0
 8007c74:	f04f 0c01 	mov.w	ip, #1
 8007c78:	fa0c f203 	lsl.w	r2, ip, r3
 8007c7c:	4630      	mov	r0, r6
 8007c7e:	3301      	adds	r3, #1
 8007c80:	4222      	tst	r2, r4
 8007c82:	d003      	beq.n	8007c8c <_Unwind_VRS_Pop+0x16c>
 8007c84:	f850 2b04 	ldr.w	r2, [r0], #4
 8007c88:	4606      	mov	r6, r0
 8007c8a:	600a      	str	r2, [r1, #0]
 8007c8c:	2b04      	cmp	r3, #4
 8007c8e:	f101 0104 	add.w	r1, r1, #4
 8007c92:	d1f1      	bne.n	8007c78 <_Unwind_VRS_Pop+0x158>
 8007c94:	4638      	mov	r0, r7
 8007c96:	63ae      	str	r6, [r5, #56]	@ 0x38
 8007c98:	f7f8 fb6c 	bl	8000374 <__gnu_Unwind_Restore_WMMXC>
 8007c9c:	e757      	b.n	8007b4e <_Unwind_VRS_Pop+0x2e>
 8007c9e:	2a10      	cmp	r2, #16
 8007ca0:	f240 809a 	bls.w	8007dd8 <_Unwind_VRS_Pop+0x2b8>
 8007ca4:	6829      	ldr	r1, [r5, #0]
 8007ca6:	f1a2 0410 	sub.w	r4, r2, #16
 8007caa:	07cf      	lsls	r7, r1, #31
 8007cac:	d474      	bmi.n	8007d98 <_Unwind_VRS_Pop+0x278>
 8007cae:	074a      	lsls	r2, r1, #29
 8007cb0:	d508      	bpl.n	8007cc4 <_Unwind_VRS_Pop+0x1a4>
 8007cb2:	f021 0104 	bic.w	r1, r1, #4
 8007cb6:	4628      	mov	r0, r5
 8007cb8:	9301      	str	r3, [sp, #4]
 8007cba:	f840 1bd8 	str.w	r1, [r0], #216
 8007cbe:	f7f8 fb11 	bl	80002e4 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8007cc2:	9b01      	ldr	r3, [sp, #4]
 8007cc4:	af22      	add	r7, sp, #136	@ 0x88
 8007cc6:	9301      	str	r3, [sp, #4]
 8007cc8:	f1c6 0810 	rsb	r8, r6, #16
 8007ccc:	4638      	mov	r0, r7
 8007cce:	f7f8 fb01 	bl	80002d4 <__gnu_Unwind_Save_VFP_D>
 8007cd2:	a802      	add	r0, sp, #8
 8007cd4:	f7f8 fb06 	bl	80002e4 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8007cd8:	f8d5 c038 	ldr.w	ip, [r5, #56]	@ 0x38
 8007cdc:	9b01      	ldr	r3, [sp, #4]
 8007cde:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8007ce2:	4660      	mov	r0, ip
 8007ce4:	eb07 01c6 	add.w	r1, r7, r6, lsl #3
 8007ce8:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8007cec:	3904      	subs	r1, #4
 8007cee:	4642      	mov	r2, r8
 8007cf0:	3a01      	subs	r2, #1
 8007cf2:	f850 eb04 	ldr.w	lr, [r0], #4
 8007cf6:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8007cfa:	f841 ef04 	str.w	lr, [r1, #4]!
 8007cfe:	d1f7      	bne.n	8007cf0 <_Unwind_VRS_Pop+0x1d0>
 8007d00:	f10c 0c04 	add.w	ip, ip, #4
 8007d04:	eb0c 0c88 	add.w	ip, ip, r8, lsl #2
 8007d08:	b374      	cbz	r4, 8007d68 <_Unwind_VRS_Pop+0x248>
 8007d0a:	af02      	add	r7, sp, #8
 8007d0c:	e759      	b.n	8007bc2 <_Unwind_VRS_Pop+0xa2>
 8007d0e:	2a10      	cmp	r2, #16
 8007d10:	f63f af12 	bhi.w	8007b38 <_Unwind_VRS_Pop+0x18>
 8007d14:	2e10      	cmp	r6, #16
 8007d16:	f43f af0f 	beq.w	8007b38 <_Unwind_VRS_Pop+0x18>
 8007d1a:	6802      	ldr	r2, [r0, #0]
 8007d1c:	07d1      	lsls	r1, r2, #31
 8007d1e:	d507      	bpl.n	8007d30 <_Unwind_VRS_Pop+0x210>
 8007d20:	f022 0203 	bic.w	r2, r2, #3
 8007d24:	9301      	str	r3, [sp, #4]
 8007d26:	f840 2b50 	str.w	r2, [r0], #80
 8007d2a:	f7f8 facb 	bl	80002c4 <__gnu_Unwind_Save_VFP>
 8007d2e:	9b01      	ldr	r3, [sp, #4]
 8007d30:	af22      	add	r7, sp, #136	@ 0x88
 8007d32:	9301      	str	r3, [sp, #4]
 8007d34:	4638      	mov	r0, r7
 8007d36:	f7f8 fac5 	bl	80002c4 <__gnu_Unwind_Save_VFP>
 8007d3a:	f8d5 c038 	ldr.w	ip, [r5, #56]	@ 0x38
 8007d3e:	9b01      	ldr	r3, [sp, #4]
 8007d40:	b1fc      	cbz	r4, 8007d82 <_Unwind_VRS_Pop+0x262>
 8007d42:	46a0      	mov	r8, r4
 8007d44:	2400      	movs	r4, #0
 8007d46:	e7ca      	b.n	8007cde <_Unwind_VRS_Pop+0x1be>
 8007d48:	f023 0310 	bic.w	r3, r3, #16
 8007d4c:	f500 70ec 	add.w	r0, r0, #472	@ 0x1d8
 8007d50:	602b      	str	r3, [r5, #0]
 8007d52:	f7f8 fb19 	bl	8000388 <__gnu_Unwind_Save_WMMXC>
 8007d56:	e786      	b.n	8007c66 <_Unwind_VRS_Pop+0x146>
 8007d58:	f023 0308 	bic.w	r3, r3, #8
 8007d5c:	f505 70ac 	add.w	r0, r5, #344	@ 0x158
 8007d60:	602b      	str	r3, [r5, #0]
 8007d62:	f7f8 fae5 	bl	8000330 <__gnu_Unwind_Save_WMMXD>
 8007d66:	e75c      	b.n	8007c22 <_Unwind_VRS_Pop+0x102>
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	d00a      	beq.n	8007d82 <_Unwind_VRS_Pop+0x262>
 8007d6c:	2e0f      	cmp	r6, #15
 8007d6e:	f8c5 c038 	str.w	ip, [r5, #56]	@ 0x38
 8007d72:	f63f aeec 	bhi.w	8007b4e <_Unwind_VRS_Pop+0x2e>
 8007d76:	4638      	mov	r0, r7
 8007d78:	f7f8 faa8 	bl	80002cc <__gnu_Unwind_Restore_VFP_D>
 8007d7c:	e6e7      	b.n	8007b4e <_Unwind_VRS_Pop+0x2e>
 8007d7e:	4694      	mov	ip, r2
 8007d80:	af22      	add	r7, sp, #136	@ 0x88
 8007d82:	f10c 0304 	add.w	r3, ip, #4
 8007d86:	4638      	mov	r0, r7
 8007d88:	63ab      	str	r3, [r5, #56]	@ 0x38
 8007d8a:	f7f8 fa97 	bl	80002bc <__gnu_Unwind_Restore_VFP>
 8007d8e:	e6de      	b.n	8007b4e <_Unwind_VRS_Pop+0x2e>
 8007d90:	a822      	add	r0, sp, #136	@ 0x88
 8007d92:	f7f8 fa9b 	bl	80002cc <__gnu_Unwind_Restore_VFP_D>
 8007d96:	e733      	b.n	8007c00 <_Unwind_VRS_Pop+0xe0>
 8007d98:	f021 0201 	bic.w	r2, r1, #1
 8007d9c:	4628      	mov	r0, r5
 8007d9e:	9301      	str	r3, [sp, #4]
 8007da0:	f042 0202 	orr.w	r2, r2, #2
 8007da4:	f840 2b50 	str.w	r2, [r0], #80
 8007da8:	f7f8 fa94 	bl	80002d4 <__gnu_Unwind_Save_VFP_D>
 8007dac:	682a      	ldr	r2, [r5, #0]
 8007dae:	9b01      	ldr	r3, [sp, #4]
 8007db0:	f012 0f04 	tst.w	r2, #4
 8007db4:	d086      	beq.n	8007cc4 <_Unwind_VRS_Pop+0x1a4>
 8007db6:	f022 0204 	bic.w	r2, r2, #4
 8007dba:	4628      	mov	r0, r5
 8007dbc:	9301      	str	r3, [sp, #4]
 8007dbe:	f840 2bd8 	str.w	r2, [r0], #216
 8007dc2:	f7f8 fa8f 	bl	80002e4 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8007dc6:	9b01      	ldr	r3, [sp, #4]
 8007dc8:	e77c      	b.n	8007cc4 <_Unwind_VRS_Pop+0x1a4>
 8007dca:	f022 0204 	bic.w	r2, r2, #4
 8007dce:	f840 2bd8 	str.w	r2, [r0], #216
 8007dd2:	f7f8 fa87 	bl	80002e4 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8007dd6:	e6ed      	b.n	8007bb4 <_Unwind_VRS_Pop+0x94>
 8007dd8:	6802      	ldr	r2, [r0, #0]
 8007dda:	07d0      	lsls	r0, r2, #31
 8007ddc:	d40c      	bmi.n	8007df8 <_Unwind_VRS_Pop+0x2d8>
 8007dde:	af22      	add	r7, sp, #136	@ 0x88
 8007de0:	9301      	str	r3, [sp, #4]
 8007de2:	4638      	mov	r0, r7
 8007de4:	f7f8 fa76 	bl	80002d4 <__gnu_Unwind_Save_VFP_D>
 8007de8:	2c00      	cmp	r4, #0
 8007dea:	d0c4      	beq.n	8007d76 <_Unwind_VRS_Pop+0x256>
 8007dec:	46a0      	mov	r8, r4
 8007dee:	f8d5 c038 	ldr.w	ip, [r5, #56]	@ 0x38
 8007df2:	2400      	movs	r4, #0
 8007df4:	9b01      	ldr	r3, [sp, #4]
 8007df6:	e772      	b.n	8007cde <_Unwind_VRS_Pop+0x1be>
 8007df8:	2b05      	cmp	r3, #5
 8007dfa:	9301      	str	r3, [sp, #4]
 8007dfc:	d10a      	bne.n	8007e14 <_Unwind_VRS_Pop+0x2f4>
 8007dfe:	f022 0201 	bic.w	r2, r2, #1
 8007e02:	4628      	mov	r0, r5
 8007e04:	f042 0202 	orr.w	r2, r2, #2
 8007e08:	f840 2b50 	str.w	r2, [r0], #80
 8007e0c:	f7f8 fa62 	bl	80002d4 <__gnu_Unwind_Save_VFP_D>
 8007e10:	9b01      	ldr	r3, [sp, #4]
 8007e12:	e7e4      	b.n	8007dde <_Unwind_VRS_Pop+0x2be>
 8007e14:	f022 0203 	bic.w	r2, r2, #3
 8007e18:	4628      	mov	r0, r5
 8007e1a:	f840 2b50 	str.w	r2, [r0], #80
 8007e1e:	f7f8 fa51 	bl	80002c4 <__gnu_Unwind_Save_VFP>
 8007e22:	9b01      	ldr	r3, [sp, #4]
 8007e24:	e7db      	b.n	8007dde <_Unwind_VRS_Pop+0x2be>
 8007e26:	bf00      	nop

08007e28 <next_unwind_byte>:
 8007e28:	7a02      	ldrb	r2, [r0, #8]
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	b98a      	cbnz	r2, 8007e52 <next_unwind_byte+0x2a>
 8007e2e:	7a42      	ldrb	r2, [r0, #9]
 8007e30:	b1b2      	cbz	r2, 8007e60 <next_unwind_byte+0x38>
 8007e32:	6841      	ldr	r1, [r0, #4]
 8007e34:	3a01      	subs	r2, #1
 8007e36:	f04f 0c03 	mov.w	ip, #3
 8007e3a:	b410      	push	{r4}
 8007e3c:	7242      	strb	r2, [r0, #9]
 8007e3e:	1d0c      	adds	r4, r1, #4
 8007e40:	6808      	ldr	r0, [r1, #0]
 8007e42:	f883 c008 	strb.w	ip, [r3, #8]
 8007e46:	0202      	lsls	r2, r0, #8
 8007e48:	605c      	str	r4, [r3, #4]
 8007e4a:	0e00      	lsrs	r0, r0, #24
 8007e4c:	bc10      	pop	{r4}
 8007e4e:	601a      	str	r2, [r3, #0]
 8007e50:	4770      	bx	lr
 8007e52:	6800      	ldr	r0, [r0, #0]
 8007e54:	3a01      	subs	r2, #1
 8007e56:	721a      	strb	r2, [r3, #8]
 8007e58:	0202      	lsls	r2, r0, #8
 8007e5a:	0e00      	lsrs	r0, r0, #24
 8007e5c:	601a      	str	r2, [r3, #0]
 8007e5e:	4770      	bx	lr
 8007e60:	20b0      	movs	r0, #176	@ 0xb0
 8007e62:	4770      	bx	lr

08007e64 <__gnu_unwind_execute>:
 8007e64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007e68:	2700      	movs	r7, #0
 8007e6a:	b085      	sub	sp, #20
 8007e6c:	4606      	mov	r6, r0
 8007e6e:	460d      	mov	r5, r1
 8007e70:	4628      	mov	r0, r5
 8007e72:	f7ff ffd9 	bl	8007e28 <next_unwind_byte>
 8007e76:	28b0      	cmp	r0, #176	@ 0xb0
 8007e78:	4604      	mov	r4, r0
 8007e7a:	f000 8124 	beq.w	80080c6 <__gnu_unwind_execute+0x262>
 8007e7e:	0603      	lsls	r3, r0, #24
 8007e80:	d538      	bpl.n	8007ef4 <__gnu_unwind_execute+0x90>
 8007e82:	f000 03f0 	and.w	r3, r0, #240	@ 0xf0
 8007e86:	2ba0      	cmp	r3, #160	@ 0xa0
 8007e88:	f000 8083 	beq.w	8007f92 <__gnu_unwind_execute+0x12e>
 8007e8c:	d80c      	bhi.n	8007ea8 <__gnu_unwind_execute+0x44>
 8007e8e:	2b80      	cmp	r3, #128	@ 0x80
 8007e90:	d060      	beq.n	8007f54 <__gnu_unwind_execute+0xf0>
 8007e92:	2b90      	cmp	r3, #144	@ 0x90
 8007e94:	d104      	bne.n	8007ea0 <__gnu_unwind_execute+0x3c>
 8007e96:	f000 030d 	and.w	r3, r0, #13
 8007e9a:	2b0d      	cmp	r3, #13
 8007e9c:	f040 808f 	bne.w	8007fbe <__gnu_unwind_execute+0x15a>
 8007ea0:	2009      	movs	r0, #9
 8007ea2:	b005      	add	sp, #20
 8007ea4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ea8:	2bb0      	cmp	r3, #176	@ 0xb0
 8007eaa:	d068      	beq.n	8007f7e <__gnu_unwind_execute+0x11a>
 8007eac:	2bc0      	cmp	r3, #192	@ 0xc0
 8007eae:	d140      	bne.n	8007f32 <__gnu_unwind_execute+0xce>
 8007eb0:	28c6      	cmp	r0, #198	@ 0xc6
 8007eb2:	f000 80f5 	beq.w	80080a0 <__gnu_unwind_execute+0x23c>
 8007eb6:	28c7      	cmp	r0, #199	@ 0xc7
 8007eb8:	f000 8108 	beq.w	80080cc <__gnu_unwind_execute+0x268>
 8007ebc:	f000 03f8 	and.w	r3, r0, #248	@ 0xf8
 8007ec0:	2bc0      	cmp	r3, #192	@ 0xc0
 8007ec2:	f000 8115 	beq.w	80080f0 <__gnu_unwind_execute+0x28c>
 8007ec6:	28c8      	cmp	r0, #200	@ 0xc8
 8007ec8:	f000 8120 	beq.w	800810c <__gnu_unwind_execute+0x2a8>
 8007ecc:	28c9      	cmp	r0, #201	@ 0xc9
 8007ece:	d1e7      	bne.n	8007ea0 <__gnu_unwind_execute+0x3c>
 8007ed0:	4628      	mov	r0, r5
 8007ed2:	f7ff ffa9 	bl	8007e28 <next_unwind_byte>
 8007ed6:	0302      	lsls	r2, r0, #12
 8007ed8:	f000 000f 	and.w	r0, r0, #15
 8007edc:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 8007ee0:	3001      	adds	r0, #1
 8007ee2:	4302      	orrs	r2, r0
 8007ee4:	2101      	movs	r1, #1
 8007ee6:	2305      	movs	r3, #5
 8007ee8:	4630      	mov	r0, r6
 8007eea:	f7ff fe19 	bl	8007b20 <_Unwind_VRS_Pop>
 8007eee:	2800      	cmp	r0, #0
 8007ef0:	d0be      	beq.n	8007e70 <__gnu_unwind_execute+0xc>
 8007ef2:	e7d5      	b.n	8007ea0 <__gnu_unwind_execute+0x3c>
 8007ef4:	0083      	lsls	r3, r0, #2
 8007ef6:	f10d 0908 	add.w	r9, sp, #8
 8007efa:	220d      	movs	r2, #13
 8007efc:	4630      	mov	r0, r6
 8007efe:	b2db      	uxtb	r3, r3
 8007f00:	f8cd 9000 	str.w	r9, [sp]
 8007f04:	f103 0804 	add.w	r8, r3, #4
 8007f08:	2300      	movs	r3, #0
 8007f0a:	4619      	mov	r1, r3
 8007f0c:	f7ff fc16 	bl	800773c <_Unwind_VRS_Get>
 8007f10:	9a02      	ldr	r2, [sp, #8]
 8007f12:	0660      	lsls	r0, r4, #25
 8007f14:	f04f 0300 	mov.w	r3, #0
 8007f18:	4630      	mov	r0, r6
 8007f1a:	f8cd 9000 	str.w	r9, [sp]
 8007f1e:	bf4c      	ite	mi
 8007f20:	eba2 0208 	submi.w	r2, r2, r8
 8007f24:	4442      	addpl	r2, r8
 8007f26:	4619      	mov	r1, r3
 8007f28:	9202      	str	r2, [sp, #8]
 8007f2a:	220d      	movs	r2, #13
 8007f2c:	f7ff fc2c 	bl	8007788 <_Unwind_VRS_Set>
 8007f30:	e79e      	b.n	8007e70 <__gnu_unwind_execute+0xc>
 8007f32:	f000 03f8 	and.w	r3, r0, #248	@ 0xf8
 8007f36:	2bd0      	cmp	r3, #208	@ 0xd0
 8007f38:	d1b2      	bne.n	8007ea0 <__gnu_unwind_execute+0x3c>
 8007f3a:	f000 0207 	and.w	r2, r0, #7
 8007f3e:	2305      	movs	r3, #5
 8007f40:	2101      	movs	r1, #1
 8007f42:	4630      	mov	r0, r6
 8007f44:	3201      	adds	r2, #1
 8007f46:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8007f4a:	f7ff fde9 	bl	8007b20 <_Unwind_VRS_Pop>
 8007f4e:	2800      	cmp	r0, #0
 8007f50:	d08e      	beq.n	8007e70 <__gnu_unwind_execute+0xc>
 8007f52:	e7a5      	b.n	8007ea0 <__gnu_unwind_execute+0x3c>
 8007f54:	0224      	lsls	r4, r4, #8
 8007f56:	4628      	mov	r0, r5
 8007f58:	f7ff ff66 	bl	8007e28 <next_unwind_byte>
 8007f5c:	4320      	orrs	r0, r4
 8007f5e:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8007f62:	d09d      	beq.n	8007ea0 <__gnu_unwind_execute+0x3c>
 8007f64:	0104      	lsls	r4, r0, #4
 8007f66:	2300      	movs	r3, #0
 8007f68:	4630      	mov	r0, r6
 8007f6a:	b2a2      	uxth	r2, r4
 8007f6c:	4619      	mov	r1, r3
 8007f6e:	f7ff fdd7 	bl	8007b20 <_Unwind_VRS_Pop>
 8007f72:	2800      	cmp	r0, #0
 8007f74:	d194      	bne.n	8007ea0 <__gnu_unwind_execute+0x3c>
 8007f76:	f3c4 30c0 	ubfx	r0, r4, #15, #1
 8007f7a:	4307      	orrs	r7, r0
 8007f7c:	e778      	b.n	8007e70 <__gnu_unwind_execute+0xc>
 8007f7e:	f1a0 03b1 	sub.w	r3, r0, #177	@ 0xb1
 8007f82:	2b04      	cmp	r3, #4
 8007f84:	f200 80de 	bhi.w	8008144 <__gnu_unwind_execute+0x2e0>
 8007f88:	e8df f003 	tbb	[pc, r3]
 8007f8c:	36405381 	.word	0x36405381
 8007f90:	2d          	.byte	0x2d
 8007f91:	00          	.byte	0x00
 8007f92:	43c3      	mvns	r3, r0
 8007f94:	f44f 627f 	mov.w	r2, #4080	@ 0xff0
 8007f98:	0701      	lsls	r1, r0, #28
 8007f9a:	f003 0307 	and.w	r3, r3, #7
 8007f9e:	fa42 f203 	asr.w	r2, r2, r3
 8007fa2:	f402 627f 	and.w	r2, r2, #4080	@ 0xff0
 8007fa6:	d501      	bpl.n	8007fac <__gnu_unwind_execute+0x148>
 8007fa8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007fac:	2300      	movs	r3, #0
 8007fae:	4630      	mov	r0, r6
 8007fb0:	4619      	mov	r1, r3
 8007fb2:	f7ff fdb5 	bl	8007b20 <_Unwind_VRS_Pop>
 8007fb6:	2800      	cmp	r0, #0
 8007fb8:	f43f af5a 	beq.w	8007e70 <__gnu_unwind_execute+0xc>
 8007fbc:	e770      	b.n	8007ea0 <__gnu_unwind_execute+0x3c>
 8007fbe:	f10d 0808 	add.w	r8, sp, #8
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	f000 020f 	and.w	r2, r0, #15
 8007fc8:	4630      	mov	r0, r6
 8007fca:	4619      	mov	r1, r3
 8007fcc:	f8cd 8000 	str.w	r8, [sp]
 8007fd0:	f7ff fbb4 	bl	800773c <_Unwind_VRS_Get>
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	220d      	movs	r2, #13
 8007fd8:	4630      	mov	r0, r6
 8007fda:	4619      	mov	r1, r3
 8007fdc:	f8cd 8000 	str.w	r8, [sp]
 8007fe0:	f7ff fbd2 	bl	8007788 <_Unwind_VRS_Set>
 8007fe4:	e744      	b.n	8007e70 <__gnu_unwind_execute+0xc>
 8007fe6:	aa03      	add	r2, sp, #12
 8007fe8:	2300      	movs	r3, #0
 8007fea:	4630      	mov	r0, r6
 8007fec:	9200      	str	r2, [sp, #0]
 8007fee:	4619      	mov	r1, r3
 8007ff0:	220d      	movs	r2, #13
 8007ff2:	f7ff fba3 	bl	800773c <_Unwind_VRS_Get>
 8007ff6:	e73b      	b.n	8007e70 <__gnu_unwind_execute+0xc>
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	2105      	movs	r1, #5
 8007ffc:	4630      	mov	r0, r6
 8007ffe:	461a      	mov	r2, r3
 8008000:	f7ff fd8e 	bl	8007b20 <_Unwind_VRS_Pop>
 8008004:	2800      	cmp	r0, #0
 8008006:	f43f af33 	beq.w	8007e70 <__gnu_unwind_execute+0xc>
 800800a:	e749      	b.n	8007ea0 <__gnu_unwind_execute+0x3c>
 800800c:	4628      	mov	r0, r5
 800800e:	f7ff ff0b 	bl	8007e28 <next_unwind_byte>
 8008012:	2301      	movs	r3, #1
 8008014:	0302      	lsls	r2, r0, #12
 8008016:	f000 000f 	and.w	r0, r0, #15
 800801a:	4619      	mov	r1, r3
 800801c:	3001      	adds	r0, #1
 800801e:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 8008022:	4302      	orrs	r2, r0
 8008024:	4630      	mov	r0, r6
 8008026:	f7ff fd7b 	bl	8007b20 <_Unwind_VRS_Pop>
 800802a:	2800      	cmp	r0, #0
 800802c:	f43f af20 	beq.w	8007e70 <__gnu_unwind_execute+0xc>
 8008030:	e736      	b.n	8007ea0 <__gnu_unwind_execute+0x3c>
 8008032:	2300      	movs	r3, #0
 8008034:	f10d 0908 	add.w	r9, sp, #8
 8008038:	220d      	movs	r2, #13
 800803a:	4630      	mov	r0, r6
 800803c:	4619      	mov	r1, r3
 800803e:	f8cd 9000 	str.w	r9, [sp]
 8008042:	f7ff fb7b 	bl	800773c <_Unwind_VRS_Get>
 8008046:	4628      	mov	r0, r5
 8008048:	f7ff feee 	bl	8007e28 <next_unwind_byte>
 800804c:	0602      	lsls	r2, r0, #24
 800804e:	9c02      	ldr	r4, [sp, #8]
 8008050:	f04f 0802 	mov.w	r8, #2
 8008054:	d50c      	bpl.n	8008070 <__gnu_unwind_execute+0x20c>
 8008056:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 800805a:	fa00 f008 	lsl.w	r0, r0, r8
 800805e:	f108 0807 	add.w	r8, r8, #7
 8008062:	4404      	add	r4, r0
 8008064:	4628      	mov	r0, r5
 8008066:	9402      	str	r4, [sp, #8]
 8008068:	f7ff fede 	bl	8007e28 <next_unwind_byte>
 800806c:	0603      	lsls	r3, r0, #24
 800806e:	d4f2      	bmi.n	8008056 <__gnu_unwind_execute+0x1f2>
 8008070:	fa00 f008 	lsl.w	r0, r0, r8
 8008074:	f504 7401 	add.w	r4, r4, #516	@ 0x204
 8008078:	2300      	movs	r3, #0
 800807a:	220d      	movs	r2, #13
 800807c:	4404      	add	r4, r0
 800807e:	f8cd 9000 	str.w	r9, [sp]
 8008082:	4619      	mov	r1, r3
 8008084:	4630      	mov	r0, r6
 8008086:	9402      	str	r4, [sp, #8]
 8008088:	f7ff fb7e 	bl	8007788 <_Unwind_VRS_Set>
 800808c:	e6f0      	b.n	8007e70 <__gnu_unwind_execute+0xc>
 800808e:	4628      	mov	r0, r5
 8008090:	f7ff feca 	bl	8007e28 <next_unwind_byte>
 8008094:	1e43      	subs	r3, r0, #1
 8008096:	4602      	mov	r2, r0
 8008098:	b2db      	uxtb	r3, r3
 800809a:	2b0e      	cmp	r3, #14
 800809c:	d986      	bls.n	8007fac <__gnu_unwind_execute+0x148>
 800809e:	e6ff      	b.n	8007ea0 <__gnu_unwind_execute+0x3c>
 80080a0:	4628      	mov	r0, r5
 80080a2:	f7ff fec1 	bl	8007e28 <next_unwind_byte>
 80080a6:	2303      	movs	r3, #3
 80080a8:	0302      	lsls	r2, r0, #12
 80080aa:	f000 000f 	and.w	r0, r0, #15
 80080ae:	4619      	mov	r1, r3
 80080b0:	3001      	adds	r0, #1
 80080b2:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 80080b6:	4302      	orrs	r2, r0
 80080b8:	4630      	mov	r0, r6
 80080ba:	f7ff fd31 	bl	8007b20 <_Unwind_VRS_Pop>
 80080be:	2800      	cmp	r0, #0
 80080c0:	f43f aed6 	beq.w	8007e70 <__gnu_unwind_execute+0xc>
 80080c4:	e6ec      	b.n	8007ea0 <__gnu_unwind_execute+0x3c>
 80080c6:	b36f      	cbz	r7, 8008124 <__gnu_unwind_execute+0x2c0>
 80080c8:	2000      	movs	r0, #0
 80080ca:	e6ea      	b.n	8007ea2 <__gnu_unwind_execute+0x3e>
 80080cc:	4628      	mov	r0, r5
 80080ce:	f7ff feab 	bl	8007e28 <next_unwind_byte>
 80080d2:	1e43      	subs	r3, r0, #1
 80080d4:	4602      	mov	r2, r0
 80080d6:	b2db      	uxtb	r3, r3
 80080d8:	2b0e      	cmp	r3, #14
 80080da:	f63f aee1 	bhi.w	8007ea0 <__gnu_unwind_execute+0x3c>
 80080de:	2300      	movs	r3, #0
 80080e0:	2104      	movs	r1, #4
 80080e2:	4630      	mov	r0, r6
 80080e4:	f7ff fd1c 	bl	8007b20 <_Unwind_VRS_Pop>
 80080e8:	2800      	cmp	r0, #0
 80080ea:	f43f aec1 	beq.w	8007e70 <__gnu_unwind_execute+0xc>
 80080ee:	e6d7      	b.n	8007ea0 <__gnu_unwind_execute+0x3c>
 80080f0:	f000 020f 	and.w	r2, r0, #15
 80080f4:	2303      	movs	r3, #3
 80080f6:	4630      	mov	r0, r6
 80080f8:	3201      	adds	r2, #1
 80080fa:	4619      	mov	r1, r3
 80080fc:	f442 2220 	orr.w	r2, r2, #655360	@ 0xa0000
 8008100:	f7ff fd0e 	bl	8007b20 <_Unwind_VRS_Pop>
 8008104:	2800      	cmp	r0, #0
 8008106:	f43f aeb3 	beq.w	8007e70 <__gnu_unwind_execute+0xc>
 800810a:	e6c9      	b.n	8007ea0 <__gnu_unwind_execute+0x3c>
 800810c:	4628      	mov	r0, r5
 800810e:	f7ff fe8b 	bl	8007e28 <next_unwind_byte>
 8008112:	f000 02f0 	and.w	r2, r0, #240	@ 0xf0
 8008116:	f000 030f 	and.w	r3, r0, #15
 800811a:	3210      	adds	r2, #16
 800811c:	3301      	adds	r3, #1
 800811e:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8008122:	e6df      	b.n	8007ee4 <__gnu_unwind_execute+0x80>
 8008124:	ac02      	add	r4, sp, #8
 8008126:	463b      	mov	r3, r7
 8008128:	4639      	mov	r1, r7
 800812a:	220e      	movs	r2, #14
 800812c:	4630      	mov	r0, r6
 800812e:	9400      	str	r4, [sp, #0]
 8008130:	f7ff fb04 	bl	800773c <_Unwind_VRS_Get>
 8008134:	220f      	movs	r2, #15
 8008136:	463b      	mov	r3, r7
 8008138:	4639      	mov	r1, r7
 800813a:	4630      	mov	r0, r6
 800813c:	9400      	str	r4, [sp, #0]
 800813e:	f7ff fb23 	bl	8007788 <_Unwind_VRS_Set>
 8008142:	e7c1      	b.n	80080c8 <__gnu_unwind_execute+0x264>
 8008144:	f000 03fc 	and.w	r3, r0, #252	@ 0xfc
 8008148:	2bb4      	cmp	r3, #180	@ 0xb4
 800814a:	f43f aea9 	beq.w	8007ea0 <__gnu_unwind_execute+0x3c>
 800814e:	f000 0207 	and.w	r2, r0, #7
 8008152:	2301      	movs	r3, #1
 8008154:	4630      	mov	r0, r6
 8008156:	441a      	add	r2, r3
 8008158:	4619      	mov	r1, r3
 800815a:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 800815e:	f7ff fcdf 	bl	8007b20 <_Unwind_VRS_Pop>
 8008162:	2800      	cmp	r0, #0
 8008164:	f43f ae84 	beq.w	8007e70 <__gnu_unwind_execute+0xc>
 8008168:	e69a      	b.n	8007ea0 <__gnu_unwind_execute+0x3c>
 800816a:	bf00      	nop

0800816c <abort>:
 800816c:	2006      	movs	r0, #6
 800816e:	b508      	push	{r3, lr}
 8008170:	f000 f82c 	bl	80081cc <raise>
 8008174:	2001      	movs	r0, #1
 8008176:	f7f8 fbb7 	bl	80008e8 <_exit>

0800817a <_raise_r>:
 800817a:	291f      	cmp	r1, #31
 800817c:	b538      	push	{r3, r4, r5, lr}
 800817e:	4605      	mov	r5, r0
 8008180:	460c      	mov	r4, r1
 8008182:	d904      	bls.n	800818e <_raise_r+0x14>
 8008184:	2316      	movs	r3, #22
 8008186:	6003      	str	r3, [r0, #0]
 8008188:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800818c:	bd38      	pop	{r3, r4, r5, pc}
 800818e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008190:	b112      	cbz	r2, 8008198 <_raise_r+0x1e>
 8008192:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008196:	b94b      	cbnz	r3, 80081ac <_raise_r+0x32>
 8008198:	4628      	mov	r0, r5
 800819a:	f000 f831 	bl	8008200 <_getpid_r>
 800819e:	4622      	mov	r2, r4
 80081a0:	4601      	mov	r1, r0
 80081a2:	4628      	mov	r0, r5
 80081a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081a8:	f000 b818 	b.w	80081dc <_kill_r>
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	d00a      	beq.n	80081c6 <_raise_r+0x4c>
 80081b0:	1c59      	adds	r1, r3, #1
 80081b2:	d103      	bne.n	80081bc <_raise_r+0x42>
 80081b4:	2316      	movs	r3, #22
 80081b6:	6003      	str	r3, [r0, #0]
 80081b8:	2001      	movs	r0, #1
 80081ba:	e7e7      	b.n	800818c <_raise_r+0x12>
 80081bc:	2100      	movs	r1, #0
 80081be:	4620      	mov	r0, r4
 80081c0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80081c4:	4798      	blx	r3
 80081c6:	2000      	movs	r0, #0
 80081c8:	e7e0      	b.n	800818c <_raise_r+0x12>
	...

080081cc <raise>:
 80081cc:	4b02      	ldr	r3, [pc, #8]	@ (80081d8 <raise+0xc>)
 80081ce:	4601      	mov	r1, r0
 80081d0:	6818      	ldr	r0, [r3, #0]
 80081d2:	f7ff bfd2 	b.w	800817a <_raise_r>
 80081d6:	bf00      	nop
 80081d8:	20000098 	.word	0x20000098

080081dc <_kill_r>:
 80081dc:	b538      	push	{r3, r4, r5, lr}
 80081de:	2300      	movs	r3, #0
 80081e0:	4d06      	ldr	r5, [pc, #24]	@ (80081fc <_kill_r+0x20>)
 80081e2:	4604      	mov	r4, r0
 80081e4:	4608      	mov	r0, r1
 80081e6:	4611      	mov	r1, r2
 80081e8:	602b      	str	r3, [r5, #0]
 80081ea:	f7f8 fb6d 	bl	80008c8 <_kill>
 80081ee:	1c43      	adds	r3, r0, #1
 80081f0:	d102      	bne.n	80081f8 <_kill_r+0x1c>
 80081f2:	682b      	ldr	r3, [r5, #0]
 80081f4:	b103      	cbz	r3, 80081f8 <_kill_r+0x1c>
 80081f6:	6023      	str	r3, [r4, #0]
 80081f8:	bd38      	pop	{r3, r4, r5, pc}
 80081fa:	bf00      	nop
 80081fc:	200005cc 	.word	0x200005cc

08008200 <_getpid_r>:
 8008200:	f7f8 bb5a 	b.w	80008b8 <_getpid>

08008204 <_init>:
 8008204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008206:	bf00      	nop
 8008208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800820a:	bc08      	pop	{r3}
 800820c:	469e      	mov	lr, r3
 800820e:	4770      	bx	lr

08008210 <_fini>:
 8008210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008212:	bf00      	nop
 8008214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008216:	bc08      	pop	{r3}
 8008218:	469e      	mov	lr, r3
 800821a:	4770      	bx	lr
 800821c:	0000      	movs	r0, r0
	...

08008220 <__nvm_ll_erase_page_veneer>:
 8008220:	f85f f000 	ldr.w	pc, [pc]	@ 8008224 <__nvm_ll_erase_page_veneer+0x4>
 8008224:	200000e9 	.word	0x200000e9

08008228 <__nvm_ll_write_veneer>:
 8008228:	f85f f000 	ldr.w	pc, [pc]	@ 800822c <__nvm_ll_write_veneer+0x4>
 800822c:	20000221 	.word	0x20000221

Disassembly of section .data:

20000000 <nvm_props>:
20000000:	08200000 0000a000 00000010 00002000     .. .......... ..

20000010 <nvma>:
20000010:	20000000 08200000 00004000 ffffffff     ... .. ..@......
20000020:	00000080 08006e7d 08006f11 08006e71     ....}n...o..qn..
20000030:	080058b1 ffffffff ffffffff              .X..........

2000003c <nvmb>:
2000003c:	20000000 08204000 00004000 ffffffff     ... .@ ..@......
2000004c:	00000080 08006e7d 08006f11 08006e71     ....}n...o..qn..
2000005c:	080058b1 ffffffff ffffffff              .X..........

20000068 <SystemCoreClock>:
20000068:	003d0900                                ..=.

2000006c <COM_USART>:
2000006c:	40013800                                .8.@

20000070 <LED_PORT>:
20000070:	42020800 42020400 42021800              ...B...B...B

2000007c <BUTTON_PORT>:
2000007c:	42020800                                ...B

20000080 <ButtonCallback.1>:
20000080:	08000ce1                                ....

20000084 <BSP_BUTTON_PRIO.0>:
20000084:	0000000f                                ....

20000088 <uwTickPrio>:
20000088:	00000010                                ....

2000008c <uwTickFreq>:
2000008c:	00000001                                ....

20000090 <last_area>:
20000090:	ffffffff                                ....

20000094 <first_area>:
20000094:	ffffffff                                ....

20000098 <_impure_ptr>:
20000098:	2000009c                                ... 

2000009c <_impure_data>:
2000009c:	00000000 20000494 200004fc 20000564     ....... ... d.. 
	...

200000e8 <nvm_ll_erase_page>:
200000e8:	b538      	push	{r3, r4, r5, lr}
200000ea:	4b2a      	ldr	r3, [pc, #168]	@ (20000194 <nvm_ll_erase_page+0xac>)
200000ec:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
200000f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
200000f4:	4293      	cmp	r3, r2
200000f6:	d003      	beq.n	20000100 <nvm_ll_erase_page+0x18>
200000f8:	b16b      	cbz	r3, 20000116 <nvm_ll_erase_page+0x2e>
200000fa:	025a      	lsls	r2, r3, #9
200000fc:	4252      	negs	r2, r2
200000fe:	e000      	b.n	20000102 <nvm_ll_erase_page+0x1a>
20000100:	4a25      	ldr	r2, [pc, #148]	@ (20000198 <nvm_ll_erase_page+0xb0>)
20000102:	4002      	ands	r2, r0
20000104:	f102 4578 	add.w	r5, r2, #4160749568	@ 0xf8000000
20000108:	f64f 71ff 	movw	r1, #65535	@ 0xffff
2000010c:	428b      	cmp	r3, r1
2000010e:	d004      	beq.n	2000011a <nvm_ll_erase_page+0x32>
20000110:	b383      	cbz	r3, 20000174 <nvm_ll_erase_page+0x8c>
20000112:	025b      	lsls	r3, r3, #9
20000114:	e003      	b.n	2000011e <nvm_ll_erase_page+0x36>
20000116:	4a20      	ldr	r2, [pc, #128]	@ (20000198 <nvm_ll_erase_page+0xb0>)
20000118:	e7f3      	b.n	20000102 <nvm_ll_erase_page+0x1a>
2000011a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
2000011e:	fbb5 f5f3 	udiv	r5, r5, r3
20000122:	1a80      	subs	r0, r0, r2
20000124:	0b44      	lsrs	r4, r0, #13
20000126:	f000 f8c7 	bl	200002b8 <__bank_swapped_veneer>
2000012a:	42a8      	cmp	r0, r5
2000012c:	d025      	beq.n	2000017a <nvm_ll_erase_page+0x92>
2000012e:	4a1b      	ldr	r2, [pc, #108]	@ (2000019c <nvm_ll_erase_page+0xb4>)
20000130:	6a93      	ldr	r3, [r2, #40]	@ 0x28
20000132:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
20000136:	6293      	str	r3, [r2, #40]	@ 0x28
20000138:	4a18      	ldr	r2, [pc, #96]	@ (2000019c <nvm_ll_erase_page+0xb4>)
2000013a:	6a93      	ldr	r3, [r2, #40]	@ 0x28
2000013c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
20000140:	f023 0302 	bic.w	r3, r3, #2
20000144:	ea43 03c4 	orr.w	r3, r3, r4, lsl #3
20000148:	f043 0302 	orr.w	r3, r3, #2
2000014c:	6293      	str	r3, [r2, #40]	@ 0x28
2000014e:	f000 f8af 	bl	200002b0 <__icache_is_enabled_veneer>
20000152:	4604      	mov	r4, r0
20000154:	b9b8      	cbnz	r0, 20000186 <nvm_ll_erase_page+0x9e>
20000156:	4a11      	ldr	r2, [pc, #68]	@ (2000019c <nvm_ll_erase_page+0xb4>)
20000158:	6a93      	ldr	r3, [r2, #40]	@ 0x28
2000015a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
2000015e:	6293      	str	r3, [r2, #40]	@ 0x28
20000160:	4b0e      	ldr	r3, [pc, #56]	@ (2000019c <nvm_ll_erase_page+0xb4>)
20000162:	6a1b      	ldr	r3, [r3, #32]
20000164:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
20000168:	d1fa      	bne.n	20000160 <nvm_ll_erase_page+0x78>
2000016a:	4b0c      	ldr	r3, [pc, #48]	@ (2000019c <nvm_ll_erase_page+0xb4>)
2000016c:	2200      	movs	r2, #0
2000016e:	629a      	str	r2, [r3, #40]	@ 0x28
20000170:	b964      	cbnz	r4, 2000018c <nvm_ll_erase_page+0xa4>
20000172:	bd38      	pop	{r3, r4, r5, pc}
20000174:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
20000178:	e7d1      	b.n	2000011e <nvm_ll_erase_page+0x36>
2000017a:	4a08      	ldr	r2, [pc, #32]	@ (2000019c <nvm_ll_erase_page+0xb4>)
2000017c:	6a93      	ldr	r3, [r2, #40]	@ 0x28
2000017e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
20000182:	6293      	str	r3, [r2, #40]	@ 0x28
20000184:	e7d8      	b.n	20000138 <nvm_ll_erase_page+0x50>
20000186:	f000 f88b 	bl	200002a0 <__icache_disable_veneer>
2000018a:	e7e4      	b.n	20000156 <nvm_ll_erase_page+0x6e>
2000018c:	f000 f88c 	bl	200002a8 <__icache_enable_veneer>
20000190:	e7ef      	b.n	20000172 <nvm_ll_erase_page+0x8a>
20000192:	bf00      	nop
20000194:	0bfa0700 	.word	0x0bfa0700
20000198:	ffe00000 	.word	0xffe00000
2000019c:	40022000 	.word	0x40022000

200001a0 <nvm_ll_write_unaligned_src>:
200001a0:	b5f0      	push	{r4, r5, r6, r7, lr}
200001a2:	b085      	sub	sp, #20
200001a4:	4605      	mov	r5, r0
200001a6:	460c      	mov	r4, r1
200001a8:	4616      	mov	r6, r2
200001aa:	f000 f881 	bl	200002b0 <__icache_is_enabled_veneer>
200001ae:	4607      	mov	r7, r0
200001b0:	b928      	cbnz	r0, 200001be <nvm_ll_write_unaligned_src+0x1e>
200001b2:	4b1a      	ldr	r3, [pc, #104]	@ (2000021c <nvm_ll_write_unaligned_src+0x7c>)
200001b4:	2201      	movs	r2, #1
200001b6:	629a      	str	r2, [r3, #40]	@ 0x28
200001b8:	f04f 0c00 	mov.w	ip, #0
200001bc:	e022      	b.n	20000204 <nvm_ll_write_unaligned_src+0x64>
200001be:	f000 f86f 	bl	200002a0 <__icache_disable_veneer>
200001c2:	e7f6      	b.n	200001b2 <nvm_ll_write_unaligned_src+0x12>
200001c4:	46ee      	mov	lr, sp
200001c6:	6820      	ldr	r0, [r4, #0]
200001c8:	6861      	ldr	r1, [r4, #4]
200001ca:	68a2      	ldr	r2, [r4, #8]
200001cc:	68e3      	ldr	r3, [r4, #12]
200001ce:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
200001d2:	3410      	adds	r4, #16
200001d4:	f845 002c 	str.w	r0, [r5, ip, lsl #2]
200001d8:	f10c 0301 	add.w	r3, ip, #1
200001dc:	9a01      	ldr	r2, [sp, #4]
200001de:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
200001e2:	f10c 0302 	add.w	r3, ip, #2
200001e6:	9a02      	ldr	r2, [sp, #8]
200001e8:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
200001ec:	f10c 0303 	add.w	r3, ip, #3
200001f0:	9a03      	ldr	r2, [sp, #12]
200001f2:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
200001f6:	4b09      	ldr	r3, [pc, #36]	@ (2000021c <nvm_ll_write_unaligned_src+0x7c>)
200001f8:	6a1b      	ldr	r3, [r3, #32]
200001fa:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
200001fe:	d1fa      	bne.n	200001f6 <nvm_ll_write_unaligned_src+0x56>
20000200:	f10c 0c04 	add.w	ip, ip, #4
20000204:	45b4      	cmp	ip, r6
20000206:	d3dd      	bcc.n	200001c4 <nvm_ll_write_unaligned_src+0x24>
20000208:	4b04      	ldr	r3, [pc, #16]	@ (2000021c <nvm_ll_write_unaligned_src+0x7c>)
2000020a:	2200      	movs	r2, #0
2000020c:	629a      	str	r2, [r3, #40]	@ 0x28
2000020e:	b90f      	cbnz	r7, 20000214 <nvm_ll_write_unaligned_src+0x74>
20000210:	b005      	add	sp, #20
20000212:	bdf0      	pop	{r4, r5, r6, r7, pc}
20000214:	f000 f848 	bl	200002a8 <__icache_enable_veneer>
20000218:	e7fa      	b.n	20000210 <nvm_ll_write_unaligned_src+0x70>
2000021a:	bf00      	nop
2000021c:	40022000 	.word	0x40022000

20000220 <nvm_ll_write>:
20000220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
20000224:	4606      	mov	r6, r0
20000226:	460d      	mov	r5, r1
20000228:	4617      	mov	r7, r2
2000022a:	f011 0403 	ands.w	r4, r1, #3
2000022e:	d003      	beq.n	20000238 <nvm_ll_write+0x18>
20000230:	f7ff ffb6 	bl	200001a0 <nvm_ll_write_unaligned_src>
20000234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
20000238:	f000 f83a 	bl	200002b0 <__icache_is_enabled_veneer>
2000023c:	4680      	mov	r8, r0
2000023e:	b918      	cbnz	r0, 20000248 <nvm_ll_write+0x28>
20000240:	4b15      	ldr	r3, [pc, #84]	@ (20000298 <nvm_ll_write+0x78>)
20000242:	2201      	movs	r2, #1
20000244:	629a      	str	r2, [r3, #40]	@ 0x28
20000246:	e01b      	b.n	20000280 <nvm_ll_write+0x60>
20000248:	f000 f82a 	bl	200002a0 <__icache_disable_veneer>
2000024c:	e7f8      	b.n	20000240 <nvm_ll_write+0x20>
2000024e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
20000252:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
20000256:	1c63      	adds	r3, r4, #1
20000258:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
2000025c:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
20000260:	1ca3      	adds	r3, r4, #2
20000262:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
20000266:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
2000026a:	1ce3      	adds	r3, r4, #3
2000026c:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
20000270:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
20000274:	4b08      	ldr	r3, [pc, #32]	@ (20000298 <nvm_ll_write+0x78>)
20000276:	6a1b      	ldr	r3, [r3, #32]
20000278:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
2000027c:	d1fa      	bne.n	20000274 <nvm_ll_write+0x54>
2000027e:	3404      	adds	r4, #4
20000280:	42bc      	cmp	r4, r7
20000282:	d3e4      	bcc.n	2000024e <nvm_ll_write+0x2e>
20000284:	4b04      	ldr	r3, [pc, #16]	@ (20000298 <nvm_ll_write+0x78>)
20000286:	2200      	movs	r2, #0
20000288:	629a      	str	r2, [r3, #40]	@ 0x28
2000028a:	f1b8 0f00 	cmp.w	r8, #0
2000028e:	d0d1      	beq.n	20000234 <nvm_ll_write+0x14>
20000290:	f000 f80a 	bl	200002a8 <__icache_enable_veneer>
20000294:	e7ce      	b.n	20000234 <nvm_ll_write+0x14>
20000296:	bf00      	nop
20000298:	40022000 	.word	0x40022000
2000029c:	00000000 	.word	0x00000000

200002a0 <__icache_disable_veneer>:
200002a0:	f85f f000 	ldr.w	pc, [pc]	@ 200002a4 <__icache_disable_veneer+0x4>
200002a4:	08006e41 	.word	0x08006e41

200002a8 <__icache_enable_veneer>:
200002a8:	f85f f000 	ldr.w	pc, [pc]	@ 200002ac <__icache_enable_veneer+0x4>
200002ac:	08006e61 	.word	0x08006e61

200002b0 <__icache_is_enabled_veneer>:
200002b0:	f85f f000 	ldr.w	pc, [pc]	@ 200002b4 <__icache_is_enabled_veneer+0x4>
200002b4:	08006e31 	.word	0x08006e31

200002b8 <__bank_swapped_veneer>:
200002b8:	f85f f000 	ldr.w	pc, [pc]	@ 200002bc <__bank_swapped_veneer+0x4>
200002bc:	08006e1d 	.word	0x08006e1d
